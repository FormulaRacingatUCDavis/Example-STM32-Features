
nucleo-f446re-microsd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006794  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  08006958  08006958  00016958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e30  08006e30  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08006e30  08006e30  00016e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e38  08006e38  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e38  08006e38  00016e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e3c  08006e3c  00016e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08006e40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002368  20000024  08006e64  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000238c  08006e64  0002238c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000deea  00000000  00000000  00020097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023c6  00000000  00000000  0002df81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c58  00000000  00000000  00030348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000097d  00000000  00000000  00030fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022bd4  00000000  00000000  0003191d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001218d  00000000  00000000  000544f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000caffe  00000000  00000000  0006667e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000031d0  00000000  00000000  0013167c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0013484c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000024 	.word	0x20000024
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08006940 	.word	0x08006940

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000028 	.word	0x20000028
 8000200:	08006940 	.word	0x08006940

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000504:	2200      	movs	r2, #0
 8000506:	2140      	movs	r1, #64	; 0x40
 8000508:	4803      	ldr	r0, [pc, #12]	; (8000518 <SELECT+0x18>)
 800050a:	f001 fa7f 	bl	8001a0c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800050e:	2001      	movs	r0, #1
 8000510:	f000 ffde 	bl	80014d0 <HAL_Delay>
}
 8000514:	bf00      	nop
 8000516:	bd80      	pop	{r7, pc}
 8000518:	40020400 	.word	0x40020400

0800051c <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000520:	2201      	movs	r2, #1
 8000522:	2140      	movs	r1, #64	; 0x40
 8000524:	4803      	ldr	r0, [pc, #12]	; (8000534 <DESELECT+0x18>)
 8000526:	f001 fa71 	bl	8001a0c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800052a:	2001      	movs	r0, #1
 800052c:	f000 ffd0 	bl	80014d0 <HAL_Delay>
}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}
 8000534:	40020400 	.word	0x40020400

08000538 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000542:	bf00      	nop
 8000544:	4b08      	ldr	r3, [pc, #32]	; (8000568 <SPI_TxByte+0x30>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	689b      	ldr	r3, [r3, #8]
 800054a:	f003 0302 	and.w	r3, r3, #2
 800054e:	2b02      	cmp	r3, #2
 8000550:	d1f8      	bne.n	8000544 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000552:	1df9      	adds	r1, r7, #7
 8000554:	2364      	movs	r3, #100	; 0x64
 8000556:	2201      	movs	r2, #1
 8000558:	4803      	ldr	r0, [pc, #12]	; (8000568 <SPI_TxByte+0x30>)
 800055a:	f002 f8e2 	bl	8002722 <HAL_SPI_Transmit>
}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	200020b0 	.word	0x200020b0

0800056c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	460b      	mov	r3, r1
 8000576:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000578:	bf00      	nop
 800057a:	4b08      	ldr	r3, [pc, #32]	; (800059c <SPI_TxBuffer+0x30>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	689b      	ldr	r3, [r3, #8]
 8000580:	f003 0302 	and.w	r3, r3, #2
 8000584:	2b02      	cmp	r3, #2
 8000586:	d1f8      	bne.n	800057a <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000588:	887a      	ldrh	r2, [r7, #2]
 800058a:	2364      	movs	r3, #100	; 0x64
 800058c:	6879      	ldr	r1, [r7, #4]
 800058e:	4803      	ldr	r0, [pc, #12]	; (800059c <SPI_TxBuffer+0x30>)
 8000590:	f002 f8c7 	bl	8002722 <HAL_SPI_Transmit>
}
 8000594:	bf00      	nop
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	200020b0 	.word	0x200020b0

080005a0 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80005a6:	23ff      	movs	r3, #255	; 0xff
 80005a8:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005aa:	bf00      	nop
 80005ac:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <SPI_RxByte+0x34>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	689b      	ldr	r3, [r3, #8]
 80005b2:	f003 0302 	and.w	r3, r3, #2
 80005b6:	2b02      	cmp	r3, #2
 80005b8:	d1f8      	bne.n	80005ac <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80005ba:	1dba      	adds	r2, r7, #6
 80005bc:	1df9      	adds	r1, r7, #7
 80005be:	2364      	movs	r3, #100	; 0x64
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	2301      	movs	r3, #1
 80005c4:	4803      	ldr	r0, [pc, #12]	; (80005d4 <SPI_RxByte+0x34>)
 80005c6:	f002 f9e8 	bl	800299a <HAL_SPI_TransmitReceive>

	return data;
 80005ca:	79bb      	ldrb	r3, [r7, #6]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	200020b0 	.word	0x200020b0

080005d8 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80005e0:	f7ff ffde 	bl	80005a0 <SPI_RxByte>
 80005e4:	4603      	mov	r3, r0
 80005e6:	461a      	mov	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	701a      	strb	r2, [r3, #0]
}
 80005ec:	bf00      	nop
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80005fa:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <SD_ReadyWait+0x30>)
 80005fc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000600:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000602:	f7ff ffcd 	bl	80005a0 <SPI_RxByte>
 8000606:	4603      	mov	r3, r0
 8000608:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	2bff      	cmp	r3, #255	; 0xff
 800060e:	d003      	beq.n	8000618 <SD_ReadyWait+0x24>
 8000610:	4b04      	ldr	r3, [pc, #16]	; (8000624 <SD_ReadyWait+0x30>)
 8000612:	881b      	ldrh	r3, [r3, #0]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d1f4      	bne.n	8000602 <SD_ReadyWait+0xe>

	return res;
 8000618:	79fb      	ldrb	r3, [r7, #7]
}
 800061a:	4618      	mov	r0, r3
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	20000042 	.word	0x20000042

08000628 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800062e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000632:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000634:	f7ff ff72 	bl	800051c <DESELECT>
	for(int i = 0; i < 10; i++)
 8000638:	2300      	movs	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	e005      	b.n	800064a <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800063e:	20ff      	movs	r0, #255	; 0xff
 8000640:	f7ff ff7a 	bl	8000538 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	3301      	adds	r3, #1
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	68bb      	ldr	r3, [r7, #8]
 800064c:	2b09      	cmp	r3, #9
 800064e:	ddf6      	ble.n	800063e <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000650:	f7ff ff56 	bl	8000500 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000654:	2340      	movs	r3, #64	; 0x40
 8000656:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000668:	2395      	movs	r3, #149	; 0x95
 800066a:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 800066c:	463b      	mov	r3, r7
 800066e:	2106      	movs	r1, #6
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff ff7b 	bl	800056c <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000676:	e002      	b.n	800067e <SD_PowerOn+0x56>
	{
		cnt--;
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	3b01      	subs	r3, #1
 800067c:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800067e:	f7ff ff8f 	bl	80005a0 <SPI_RxByte>
 8000682:	4603      	mov	r3, r0
 8000684:	2b01      	cmp	r3, #1
 8000686:	d002      	beq.n	800068e <SD_PowerOn+0x66>
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d1f4      	bne.n	8000678 <SD_PowerOn+0x50>
	}

	DESELECT();
 800068e:	f7ff ff45 	bl	800051c <DESELECT>
	SPI_TxByte(0XFF);
 8000692:	20ff      	movs	r0, #255	; 0xff
 8000694:	f7ff ff50 	bl	8000538 <SPI_TxByte>

	PowerFlag = 1;
 8000698:	4b03      	ldr	r3, [pc, #12]	; (80006a8 <SD_PowerOn+0x80>)
 800069a:	2201      	movs	r2, #1
 800069c:	701a      	strb	r2, [r3, #0]
}
 800069e:	bf00      	nop
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000045 	.word	0x20000045

080006ac <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80006b0:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <SD_PowerOff+0x14>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	701a      	strb	r2, [r3, #0]
}
 80006b6:	bf00      	nop
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	20000045 	.word	0x20000045

080006c4 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
	return PowerFlag;
 80006c8:	4b03      	ldr	r3, [pc, #12]	; (80006d8 <SD_CheckPower+0x14>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	20000045 	.word	0x20000045

080006dc <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80006e6:	4b13      	ldr	r3, [pc, #76]	; (8000734 <SD_RxDataBlock+0x58>)
 80006e8:	22c8      	movs	r2, #200	; 0xc8
 80006ea:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80006ec:	f7ff ff58 	bl	80005a0 <SPI_RxByte>
 80006f0:	4603      	mov	r3, r0
 80006f2:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80006f4:	7bfb      	ldrb	r3, [r7, #15]
 80006f6:	2bff      	cmp	r3, #255	; 0xff
 80006f8:	d103      	bne.n	8000702 <SD_RxDataBlock+0x26>
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <SD_RxDataBlock+0x58>)
 80006fc:	881b      	ldrh	r3, [r3, #0]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d1f4      	bne.n	80006ec <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000702:	7bfb      	ldrb	r3, [r7, #15]
 8000704:	2bfe      	cmp	r3, #254	; 0xfe
 8000706:	d001      	beq.n	800070c <SD_RxDataBlock+0x30>
 8000708:	2300      	movs	r3, #0
 800070a:	e00f      	b.n	800072c <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	1c5a      	adds	r2, r3, #1
 8000710:	607a      	str	r2, [r7, #4]
 8000712:	4618      	mov	r0, r3
 8000714:	f7ff ff60 	bl	80005d8 <SPI_RxBytePtr>
	} while(len--);
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	1e5a      	subs	r2, r3, #1
 800071c:	603a      	str	r2, [r7, #0]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d1f4      	bne.n	800070c <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000722:	f7ff ff3d 	bl	80005a0 <SPI_RxByte>
	SPI_RxByte();
 8000726:	f7ff ff3b 	bl	80005a0 <SPI_RxByte>

	return TRUE;
 800072a:	2301      	movs	r3, #1
}
 800072c:	4618      	mov	r0, r3
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000040 	.word	0x20000040

08000738 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	460b      	mov	r3, r1
 8000742:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000748:	f7ff ff54 	bl	80005f4 <SD_ReadyWait>
 800074c:	4603      	mov	r3, r0
 800074e:	2bff      	cmp	r3, #255	; 0xff
 8000750:	d001      	beq.n	8000756 <SD_TxDataBlock+0x1e>
 8000752:	2300      	movs	r3, #0
 8000754:	e02f      	b.n	80007b6 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000756:	78fb      	ldrb	r3, [r7, #3]
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff feed 	bl	8000538 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800075e:	78fb      	ldrb	r3, [r7, #3]
 8000760:	2bfd      	cmp	r3, #253	; 0xfd
 8000762:	d020      	beq.n	80007a6 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000764:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f7ff feff 	bl	800056c <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800076e:	f7ff ff17 	bl	80005a0 <SPI_RxByte>
		SPI_RxByte();
 8000772:	f7ff ff15 	bl	80005a0 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000776:	e00b      	b.n	8000790 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000778:	f7ff ff12 	bl	80005a0 <SPI_RxByte>
 800077c:	4603      	mov	r3, r0
 800077e:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000780:	7bfb      	ldrb	r3, [r7, #15]
 8000782:	f003 031f 	and.w	r3, r3, #31
 8000786:	2b05      	cmp	r3, #5
 8000788:	d006      	beq.n	8000798 <SD_TxDataBlock+0x60>
			i++;
 800078a:	7bbb      	ldrb	r3, [r7, #14]
 800078c:	3301      	adds	r3, #1
 800078e:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000790:	7bbb      	ldrb	r3, [r7, #14]
 8000792:	2b40      	cmp	r3, #64	; 0x40
 8000794:	d9f0      	bls.n	8000778 <SD_TxDataBlock+0x40>
 8000796:	e000      	b.n	800079a <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000798:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800079a:	bf00      	nop
 800079c:	f7ff ff00 	bl	80005a0 <SPI_RxByte>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d0fa      	beq.n	800079c <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80007a6:	7bfb      	ldrb	r3, [r7, #15]
 80007a8:	f003 031f 	and.w	r3, r3, #31
 80007ac:	2b05      	cmp	r3, #5
 80007ae:	d101      	bne.n	80007b4 <SD_TxDataBlock+0x7c>
 80007b0:	2301      	movs	r3, #1
 80007b2:	e000      	b.n	80007b6 <SD_TxDataBlock+0x7e>

	return FALSE;
 80007b4:	2300      	movs	r3, #0
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3710      	adds	r7, #16
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	b084      	sub	sp, #16
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	4603      	mov	r3, r0
 80007c6:	6039      	str	r1, [r7, #0]
 80007c8:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80007ca:	f7ff ff13 	bl	80005f4 <SD_ReadyWait>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2bff      	cmp	r3, #255	; 0xff
 80007d2:	d001      	beq.n	80007d8 <SD_SendCmd+0x1a>
 80007d4:	23ff      	movs	r3, #255	; 0xff
 80007d6:	e042      	b.n	800085e <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80007d8:	79fb      	ldrb	r3, [r7, #7]
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff feac 	bl	8000538 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	0e1b      	lsrs	r3, r3, #24
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff fea6 	bl	8000538 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	0c1b      	lsrs	r3, r3, #16
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff fea0 	bl	8000538 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	0a1b      	lsrs	r3, r3, #8
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff fe9a 	bl	8000538 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	b2db      	uxtb	r3, r3
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff fe95 	bl	8000538 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	2b40      	cmp	r3, #64	; 0x40
 8000812:	d102      	bne.n	800081a <SD_SendCmd+0x5c>
 8000814:	2395      	movs	r3, #149	; 0x95
 8000816:	73fb      	strb	r3, [r7, #15]
 8000818:	e007      	b.n	800082a <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	2b48      	cmp	r3, #72	; 0x48
 800081e:	d102      	bne.n	8000826 <SD_SendCmd+0x68>
 8000820:	2387      	movs	r3, #135	; 0x87
 8000822:	73fb      	strb	r3, [r7, #15]
 8000824:	e001      	b.n	800082a <SD_SendCmd+0x6c>
	else crc = 1;
 8000826:	2301      	movs	r3, #1
 8000828:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800082a:	7bfb      	ldrb	r3, [r7, #15]
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff fe83 	bl	8000538 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	2b4c      	cmp	r3, #76	; 0x4c
 8000836:	d101      	bne.n	800083c <SD_SendCmd+0x7e>
 8000838:	f7ff feb2 	bl	80005a0 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 800083c:	230a      	movs	r3, #10
 800083e:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000840:	f7ff feae 	bl	80005a0 <SPI_RxByte>
 8000844:	4603      	mov	r3, r0
 8000846:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000848:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800084c:	2b00      	cmp	r3, #0
 800084e:	da05      	bge.n	800085c <SD_SendCmd+0x9e>
 8000850:	7bbb      	ldrb	r3, [r7, #14]
 8000852:	3b01      	subs	r3, #1
 8000854:	73bb      	strb	r3, [r7, #14]
 8000856:	7bbb      	ldrb	r3, [r7, #14]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d1f1      	bne.n	8000840 <SD_SendCmd+0x82>

	return res;
 800085c:	7b7b      	ldrb	r3, [r7, #13]
}
 800085e:	4618      	mov	r0, r3
 8000860:	3710      	adds	r7, #16
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000868:	b590      	push	{r4, r7, lr}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <SD_disk_initialize+0x14>
 8000878:	2301      	movs	r3, #1
 800087a:	e0d1      	b.n	8000a20 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 800087c:	4b6a      	ldr	r3, [pc, #424]	; (8000a28 <SD_disk_initialize+0x1c0>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	b2db      	uxtb	r3, r3
 8000882:	f003 0302 	and.w	r3, r3, #2
 8000886:	2b00      	cmp	r3, #0
 8000888:	d003      	beq.n	8000892 <SD_disk_initialize+0x2a>
 800088a:	4b67      	ldr	r3, [pc, #412]	; (8000a28 <SD_disk_initialize+0x1c0>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	b2db      	uxtb	r3, r3
 8000890:	e0c6      	b.n	8000a20 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000892:	f7ff fec9 	bl	8000628 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000896:	f7ff fe33 	bl	8000500 <SELECT>

	/* check disk type */
	type = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800089e:	2100      	movs	r1, #0
 80008a0:	2040      	movs	r0, #64	; 0x40
 80008a2:	f7ff ff8c 	bl	80007be <SD_SendCmd>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	f040 80a1 	bne.w	80009f0 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80008ae:	4b5f      	ldr	r3, [pc, #380]	; (8000a2c <SD_disk_initialize+0x1c4>)
 80008b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008b4:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80008b6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80008ba:	2048      	movs	r0, #72	; 0x48
 80008bc:	f7ff ff7f 	bl	80007be <SD_SendCmd>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d155      	bne.n	8000972 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80008c6:	2300      	movs	r3, #0
 80008c8:	73fb      	strb	r3, [r7, #15]
 80008ca:	e00c      	b.n	80008e6 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80008cc:	7bfc      	ldrb	r4, [r7, #15]
 80008ce:	f7ff fe67 	bl	80005a0 <SPI_RxByte>
 80008d2:	4603      	mov	r3, r0
 80008d4:	461a      	mov	r2, r3
 80008d6:	f104 0310 	add.w	r3, r4, #16
 80008da:	443b      	add	r3, r7
 80008dc:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80008e0:	7bfb      	ldrb	r3, [r7, #15]
 80008e2:	3301      	adds	r3, #1
 80008e4:	73fb      	strb	r3, [r7, #15]
 80008e6:	7bfb      	ldrb	r3, [r7, #15]
 80008e8:	2b03      	cmp	r3, #3
 80008ea:	d9ef      	bls.n	80008cc <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80008ec:	7abb      	ldrb	r3, [r7, #10]
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d17e      	bne.n	80009f0 <SD_disk_initialize+0x188>
 80008f2:	7afb      	ldrb	r3, [r7, #11]
 80008f4:	2baa      	cmp	r3, #170	; 0xaa
 80008f6:	d17b      	bne.n	80009f0 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80008f8:	2100      	movs	r1, #0
 80008fa:	2077      	movs	r0, #119	; 0x77
 80008fc:	f7ff ff5f 	bl	80007be <SD_SendCmd>
 8000900:	4603      	mov	r3, r0
 8000902:	2b01      	cmp	r3, #1
 8000904:	d807      	bhi.n	8000916 <SD_disk_initialize+0xae>
 8000906:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800090a:	2069      	movs	r0, #105	; 0x69
 800090c:	f7ff ff57 	bl	80007be <SD_SendCmd>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d004      	beq.n	8000920 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000916:	4b45      	ldr	r3, [pc, #276]	; (8000a2c <SD_disk_initialize+0x1c4>)
 8000918:	881b      	ldrh	r3, [r3, #0]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d1ec      	bne.n	80008f8 <SD_disk_initialize+0x90>
 800091e:	e000      	b.n	8000922 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000920:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000922:	4b42      	ldr	r3, [pc, #264]	; (8000a2c <SD_disk_initialize+0x1c4>)
 8000924:	881b      	ldrh	r3, [r3, #0]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d062      	beq.n	80009f0 <SD_disk_initialize+0x188>
 800092a:	2100      	movs	r1, #0
 800092c:	207a      	movs	r0, #122	; 0x7a
 800092e:	f7ff ff46 	bl	80007be <SD_SendCmd>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d15b      	bne.n	80009f0 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000938:	2300      	movs	r3, #0
 800093a:	73fb      	strb	r3, [r7, #15]
 800093c:	e00c      	b.n	8000958 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 800093e:	7bfc      	ldrb	r4, [r7, #15]
 8000940:	f7ff fe2e 	bl	80005a0 <SPI_RxByte>
 8000944:	4603      	mov	r3, r0
 8000946:	461a      	mov	r2, r3
 8000948:	f104 0310 	add.w	r3, r4, #16
 800094c:	443b      	add	r3, r7
 800094e:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000952:	7bfb      	ldrb	r3, [r7, #15]
 8000954:	3301      	adds	r3, #1
 8000956:	73fb      	strb	r3, [r7, #15]
 8000958:	7bfb      	ldrb	r3, [r7, #15]
 800095a:	2b03      	cmp	r3, #3
 800095c:	d9ef      	bls.n	800093e <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800095e:	7a3b      	ldrb	r3, [r7, #8]
 8000960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <SD_disk_initialize+0x104>
 8000968:	230c      	movs	r3, #12
 800096a:	e000      	b.n	800096e <SD_disk_initialize+0x106>
 800096c:	2304      	movs	r3, #4
 800096e:	73bb      	strb	r3, [r7, #14]
 8000970:	e03e      	b.n	80009f0 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000972:	2100      	movs	r1, #0
 8000974:	2077      	movs	r0, #119	; 0x77
 8000976:	f7ff ff22 	bl	80007be <SD_SendCmd>
 800097a:	4603      	mov	r3, r0
 800097c:	2b01      	cmp	r3, #1
 800097e:	d808      	bhi.n	8000992 <SD_disk_initialize+0x12a>
 8000980:	2100      	movs	r1, #0
 8000982:	2069      	movs	r0, #105	; 0x69
 8000984:	f7ff ff1b 	bl	80007be <SD_SendCmd>
 8000988:	4603      	mov	r3, r0
 800098a:	2b01      	cmp	r3, #1
 800098c:	d801      	bhi.n	8000992 <SD_disk_initialize+0x12a>
 800098e:	2302      	movs	r3, #2
 8000990:	e000      	b.n	8000994 <SD_disk_initialize+0x12c>
 8000992:	2301      	movs	r3, #1
 8000994:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000996:	7bbb      	ldrb	r3, [r7, #14]
 8000998:	2b02      	cmp	r3, #2
 800099a:	d10e      	bne.n	80009ba <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800099c:	2100      	movs	r1, #0
 800099e:	2077      	movs	r0, #119	; 0x77
 80009a0:	f7ff ff0d 	bl	80007be <SD_SendCmd>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d80e      	bhi.n	80009c8 <SD_disk_initialize+0x160>
 80009aa:	2100      	movs	r1, #0
 80009ac:	2069      	movs	r0, #105	; 0x69
 80009ae:	f7ff ff06 	bl	80007be <SD_SendCmd>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d107      	bne.n	80009c8 <SD_disk_initialize+0x160>
 80009b8:	e00c      	b.n	80009d4 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80009ba:	2100      	movs	r1, #0
 80009bc:	2041      	movs	r0, #65	; 0x41
 80009be:	f7ff fefe 	bl	80007be <SD_SendCmd>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d004      	beq.n	80009d2 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 80009c8:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <SD_disk_initialize+0x1c4>)
 80009ca:	881b      	ldrh	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d1e2      	bne.n	8000996 <SD_disk_initialize+0x12e>
 80009d0:	e000      	b.n	80009d4 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80009d2:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80009d4:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <SD_disk_initialize+0x1c4>)
 80009d6:	881b      	ldrh	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d007      	beq.n	80009ec <SD_disk_initialize+0x184>
 80009dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009e0:	2050      	movs	r0, #80	; 0x50
 80009e2:	f7ff feec 	bl	80007be <SD_SendCmd>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <SD_disk_initialize+0x188>
 80009ec:	2300      	movs	r3, #0
 80009ee:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80009f0:	4a0f      	ldr	r2, [pc, #60]	; (8000a30 <SD_disk_initialize+0x1c8>)
 80009f2:	7bbb      	ldrb	r3, [r7, #14]
 80009f4:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80009f6:	f7ff fd91 	bl	800051c <DESELECT>
	SPI_RxByte();
 80009fa:	f7ff fdd1 	bl	80005a0 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80009fe:	7bbb      	ldrb	r3, [r7, #14]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d008      	beq.n	8000a16 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000a04:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <SD_disk_initialize+0x1c0>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	f023 0301 	bic.w	r3, r3, #1
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <SD_disk_initialize+0x1c0>)
 8000a12:	701a      	strb	r2, [r3, #0]
 8000a14:	e001      	b.n	8000a1a <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000a16:	f7ff fe49 	bl	80006ac <SD_PowerOff>
	}

	return Stat;
 8000a1a:	4b03      	ldr	r3, [pc, #12]	; (8000a28 <SD_disk_initialize+0x1c0>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	b2db      	uxtb	r3, r3
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3714      	adds	r7, #20
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd90      	pop	{r4, r7, pc}
 8000a28:	20000000 	.word	0x20000000
 8000a2c:	20000040 	.word	0x20000040
 8000a30:	20000044 	.word	0x20000044

08000a34 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <SD_disk_status+0x14>
 8000a44:	2301      	movs	r3, #1
 8000a46:	e002      	b.n	8000a4e <SD_disk_status+0x1a>
	return Stat;
 8000a48:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <SD_disk_status+0x28>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	b2db      	uxtb	r3, r3
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	20000000 	.word	0x20000000

08000a60 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60b9      	str	r1, [r7, #8]
 8000a68:	607a      	str	r2, [r7, #4]
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000a70:	7bfb      	ldrb	r3, [r7, #15]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d102      	bne.n	8000a7c <SD_disk_read+0x1c>
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d101      	bne.n	8000a80 <SD_disk_read+0x20>
 8000a7c:	2304      	movs	r3, #4
 8000a7e:	e051      	b.n	8000b24 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000a80:	4b2a      	ldr	r3, [pc, #168]	; (8000b2c <SD_disk_read+0xcc>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <SD_disk_read+0x32>
 8000a8e:	2303      	movs	r3, #3
 8000a90:	e048      	b.n	8000b24 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000a92:	4b27      	ldr	r3, [pc, #156]	; (8000b30 <SD_disk_read+0xd0>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	f003 0304 	and.w	r3, r3, #4
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d102      	bne.n	8000aa4 <SD_disk_read+0x44>
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	025b      	lsls	r3, r3, #9
 8000aa2:	607b      	str	r3, [r7, #4]

	SELECT();
 8000aa4:	f7ff fd2c 	bl	8000500 <SELECT>

	if (count == 1)
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d111      	bne.n	8000ad2 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000aae:	6879      	ldr	r1, [r7, #4]
 8000ab0:	2051      	movs	r0, #81	; 0x51
 8000ab2:	f7ff fe84 	bl	80007be <SD_SendCmd>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d129      	bne.n	8000b10 <SD_disk_read+0xb0>
 8000abc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ac0:	68b8      	ldr	r0, [r7, #8]
 8000ac2:	f7ff fe0b 	bl	80006dc <SD_RxDataBlock>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d021      	beq.n	8000b10 <SD_disk_read+0xb0>
 8000acc:	2300      	movs	r3, #0
 8000ace:	603b      	str	r3, [r7, #0]
 8000ad0:	e01e      	b.n	8000b10 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000ad2:	6879      	ldr	r1, [r7, #4]
 8000ad4:	2052      	movs	r0, #82	; 0x52
 8000ad6:	f7ff fe72 	bl	80007be <SD_SendCmd>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d117      	bne.n	8000b10 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000ae0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ae4:	68b8      	ldr	r0, [r7, #8]
 8000ae6:	f7ff fdf9 	bl	80006dc <SD_RxDataBlock>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d00a      	beq.n	8000b06 <SD_disk_read+0xa6>
				buff += 512;
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000af6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	3b01      	subs	r3, #1
 8000afc:	603b      	str	r3, [r7, #0]
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d1ed      	bne.n	8000ae0 <SD_disk_read+0x80>
 8000b04:	e000      	b.n	8000b08 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000b06:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000b08:	2100      	movs	r1, #0
 8000b0a:	204c      	movs	r0, #76	; 0x4c
 8000b0c:	f7ff fe57 	bl	80007be <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000b10:	f7ff fd04 	bl	800051c <DESELECT>
	SPI_RxByte();
 8000b14:	f7ff fd44 	bl	80005a0 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	bf14      	ite	ne
 8000b1e:	2301      	movne	r3, #1
 8000b20:	2300      	moveq	r3, #0
 8000b22:	b2db      	uxtb	r3, r3
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3710      	adds	r7, #16
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000000 	.word	0x20000000
 8000b30:	20000044 	.word	0x20000044

08000b34 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60b9      	str	r1, [r7, #8]
 8000b3c:	607a      	str	r2, [r7, #4]
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	4603      	mov	r3, r0
 8000b42:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000b44:	7bfb      	ldrb	r3, [r7, #15]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d102      	bne.n	8000b50 <SD_disk_write+0x1c>
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d101      	bne.n	8000b54 <SD_disk_write+0x20>
 8000b50:	2304      	movs	r3, #4
 8000b52:	e06b      	b.n	8000c2c <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b54:	4b37      	ldr	r3, [pc, #220]	; (8000c34 <SD_disk_write+0x100>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <SD_disk_write+0x32>
 8000b62:	2303      	movs	r3, #3
 8000b64:	e062      	b.n	8000c2c <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000b66:	4b33      	ldr	r3, [pc, #204]	; (8000c34 <SD_disk_write+0x100>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	f003 0304 	and.w	r3, r3, #4
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <SD_disk_write+0x44>
 8000b74:	2302      	movs	r3, #2
 8000b76:	e059      	b.n	8000c2c <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b78:	4b2f      	ldr	r3, [pc, #188]	; (8000c38 <SD_disk_write+0x104>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	f003 0304 	and.w	r3, r3, #4
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d102      	bne.n	8000b8a <SD_disk_write+0x56>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	025b      	lsls	r3, r3, #9
 8000b88:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b8a:	f7ff fcb9 	bl	8000500 <SELECT>

	if (count == 1)
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d110      	bne.n	8000bb6 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000b94:	6879      	ldr	r1, [r7, #4]
 8000b96:	2058      	movs	r0, #88	; 0x58
 8000b98:	f7ff fe11 	bl	80007be <SD_SendCmd>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d13a      	bne.n	8000c18 <SD_disk_write+0xe4>
 8000ba2:	21fe      	movs	r1, #254	; 0xfe
 8000ba4:	68b8      	ldr	r0, [r7, #8]
 8000ba6:	f7ff fdc7 	bl	8000738 <SD_TxDataBlock>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d033      	beq.n	8000c18 <SD_disk_write+0xe4>
			count = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	e030      	b.n	8000c18 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000bb6:	4b20      	ldr	r3, [pc, #128]	; (8000c38 <SD_disk_write+0x104>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	f003 0302 	and.w	r3, r3, #2
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d007      	beq.n	8000bd2 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	2077      	movs	r0, #119	; 0x77
 8000bc6:	f7ff fdfa 	bl	80007be <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000bca:	6839      	ldr	r1, [r7, #0]
 8000bcc:	2057      	movs	r0, #87	; 0x57
 8000bce:	f7ff fdf6 	bl	80007be <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000bd2:	6879      	ldr	r1, [r7, #4]
 8000bd4:	2059      	movs	r0, #89	; 0x59
 8000bd6:	f7ff fdf2 	bl	80007be <SD_SendCmd>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d11b      	bne.n	8000c18 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000be0:	21fc      	movs	r1, #252	; 0xfc
 8000be2:	68b8      	ldr	r0, [r7, #8]
 8000be4:	f7ff fda8 	bl	8000738 <SD_TxDataBlock>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d00a      	beq.n	8000c04 <SD_disk_write+0xd0>
				buff += 512;
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000bf4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	3b01      	subs	r3, #1
 8000bfa:	603b      	str	r3, [r7, #0]
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d1ee      	bne.n	8000be0 <SD_disk_write+0xac>
 8000c02:	e000      	b.n	8000c06 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c04:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000c06:	21fd      	movs	r1, #253	; 0xfd
 8000c08:	2000      	movs	r0, #0
 8000c0a:	f7ff fd95 	bl	8000738 <SD_TxDataBlock>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d101      	bne.n	8000c18 <SD_disk_write+0xe4>
			{
				count = 1;
 8000c14:	2301      	movs	r3, #1
 8000c16:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000c18:	f7ff fc80 	bl	800051c <DESELECT>
	SPI_RxByte();
 8000c1c:	f7ff fcc0 	bl	80005a0 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	bf14      	ite	ne
 8000c26:	2301      	movne	r3, #1
 8000c28:	2300      	moveq	r3, #0
 8000c2a:	b2db      	uxtb	r3, r3
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3710      	adds	r7, #16
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20000000 	.word	0x20000000
 8000c38:	20000044 	.word	0x20000044

08000c3c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000c3c:	b590      	push	{r4, r7, lr}
 8000c3e:	b08b      	sub	sp, #44	; 0x2c
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	603a      	str	r2, [r7, #0]
 8000c46:	71fb      	strb	r3, [r7, #7]
 8000c48:	460b      	mov	r3, r1
 8000c4a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <SD_disk_ioctl+0x1e>
 8000c56:	2304      	movs	r3, #4
 8000c58:	e115      	b.n	8000e86 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000c60:	79bb      	ldrb	r3, [r7, #6]
 8000c62:	2b05      	cmp	r3, #5
 8000c64:	d124      	bne.n	8000cb0 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000c66:	6a3b      	ldr	r3, [r7, #32]
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b02      	cmp	r3, #2
 8000c6c:	d012      	beq.n	8000c94 <SD_disk_ioctl+0x58>
 8000c6e:	2b02      	cmp	r3, #2
 8000c70:	dc1a      	bgt.n	8000ca8 <SD_disk_ioctl+0x6c>
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d002      	beq.n	8000c7c <SD_disk_ioctl+0x40>
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d006      	beq.n	8000c88 <SD_disk_ioctl+0x4c>
 8000c7a:	e015      	b.n	8000ca8 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000c7c:	f7ff fd16 	bl	80006ac <SD_PowerOff>
			res = RES_OK;
 8000c80:	2300      	movs	r3, #0
 8000c82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c86:	e0fc      	b.n	8000e82 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8000c88:	f7ff fcce 	bl	8000628 <SD_PowerOn>
			res = RES_OK;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c92:	e0f6      	b.n	8000e82 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000c94:	6a3b      	ldr	r3, [r7, #32]
 8000c96:	1c5c      	adds	r4, r3, #1
 8000c98:	f7ff fd14 	bl	80006c4 <SD_CheckPower>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000ca6:	e0ec      	b.n	8000e82 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8000ca8:	2304      	movs	r3, #4
 8000caa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000cae:	e0e8      	b.n	8000e82 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000cb0:	4b77      	ldr	r3, [pc, #476]	; (8000e90 <SD_disk_ioctl+0x254>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <SD_disk_ioctl+0x86>
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	e0e1      	b.n	8000e86 <SD_disk_ioctl+0x24a>

		SELECT();
 8000cc2:	f7ff fc1d 	bl	8000500 <SELECT>

		switch (ctrl)
 8000cc6:	79bb      	ldrb	r3, [r7, #6]
 8000cc8:	2b0d      	cmp	r3, #13
 8000cca:	f200 80cb 	bhi.w	8000e64 <SD_disk_ioctl+0x228>
 8000cce:	a201      	add	r2, pc, #4	; (adr r2, 8000cd4 <SD_disk_ioctl+0x98>)
 8000cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cd4:	08000dcf 	.word	0x08000dcf
 8000cd8:	08000d0d 	.word	0x08000d0d
 8000cdc:	08000dbf 	.word	0x08000dbf
 8000ce0:	08000e65 	.word	0x08000e65
 8000ce4:	08000e65 	.word	0x08000e65
 8000ce8:	08000e65 	.word	0x08000e65
 8000cec:	08000e65 	.word	0x08000e65
 8000cf0:	08000e65 	.word	0x08000e65
 8000cf4:	08000e65 	.word	0x08000e65
 8000cf8:	08000e65 	.word	0x08000e65
 8000cfc:	08000e65 	.word	0x08000e65
 8000d00:	08000de1 	.word	0x08000de1
 8000d04:	08000e05 	.word	0x08000e05
 8000d08:	08000e29 	.word	0x08000e29
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	2049      	movs	r0, #73	; 0x49
 8000d10:	f7ff fd55 	bl	80007be <SD_SendCmd>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f040 80a8 	bne.w	8000e6c <SD_disk_ioctl+0x230>
 8000d1c:	f107 030c 	add.w	r3, r7, #12
 8000d20:	2110      	movs	r1, #16
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fcda 	bl	80006dc <SD_RxDataBlock>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	f000 809e 	beq.w	8000e6c <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000d30:	7b3b      	ldrb	r3, [r7, #12]
 8000d32:	099b      	lsrs	r3, r3, #6
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d10e      	bne.n	8000d58 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000d3a:	7d7b      	ldrb	r3, [r7, #21]
 8000d3c:	b29a      	uxth	r2, r3
 8000d3e:	7d3b      	ldrb	r3, [r7, #20]
 8000d40:	b29b      	uxth	r3, r3
 8000d42:	021b      	lsls	r3, r3, #8
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	4413      	add	r3, r2
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000d4e:	8bfb      	ldrh	r3, [r7, #30]
 8000d50:	029a      	lsls	r2, r3, #10
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	e02e      	b.n	8000db6 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000d58:	7c7b      	ldrb	r3, [r7, #17]
 8000d5a:	f003 030f 	and.w	r3, r3, #15
 8000d5e:	b2da      	uxtb	r2, r3
 8000d60:	7dbb      	ldrb	r3, [r7, #22]
 8000d62:	09db      	lsrs	r3, r3, #7
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	4413      	add	r3, r2
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	7d7b      	ldrb	r3, [r7, #21]
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	f003 0306 	and.w	r3, r3, #6
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	4413      	add	r3, r2
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	3302      	adds	r3, #2
 8000d7c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000d80:	7d3b      	ldrb	r3, [r7, #20]
 8000d82:	099b      	lsrs	r3, r3, #6
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	b29a      	uxth	r2, r3
 8000d88:	7cfb      	ldrb	r3, [r7, #19]
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	4413      	add	r3, r2
 8000d92:	b29a      	uxth	r2, r3
 8000d94:	7cbb      	ldrb	r3, [r7, #18]
 8000d96:	029b      	lsls	r3, r3, #10
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000d9e:	b29b      	uxth	r3, r3
 8000da0:	4413      	add	r3, r2
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	3301      	adds	r3, #1
 8000da6:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000da8:	8bfa      	ldrh	r2, [r7, #30]
 8000daa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000dae:	3b09      	subs	r3, #9
 8000db0:	409a      	lsls	r2, r3
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000db6:	2300      	movs	r3, #0
 8000db8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000dbc:	e056      	b.n	8000e6c <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dc4:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000dcc:	e055      	b.n	8000e7a <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000dce:	f7ff fc11 	bl	80005f4 <SD_ReadyWait>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2bff      	cmp	r3, #255	; 0xff
 8000dd6:	d14b      	bne.n	8000e70 <SD_disk_ioctl+0x234>
 8000dd8:	2300      	movs	r3, #0
 8000dda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000dde:	e047      	b.n	8000e70 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000de0:	2100      	movs	r1, #0
 8000de2:	2049      	movs	r0, #73	; 0x49
 8000de4:	f7ff fceb 	bl	80007be <SD_SendCmd>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d142      	bne.n	8000e74 <SD_disk_ioctl+0x238>
 8000dee:	2110      	movs	r1, #16
 8000df0:	6a38      	ldr	r0, [r7, #32]
 8000df2:	f7ff fc73 	bl	80006dc <SD_RxDataBlock>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d03b      	beq.n	8000e74 <SD_disk_ioctl+0x238>
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e02:	e037      	b.n	8000e74 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e04:	2100      	movs	r1, #0
 8000e06:	204a      	movs	r0, #74	; 0x4a
 8000e08:	f7ff fcd9 	bl	80007be <SD_SendCmd>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d132      	bne.n	8000e78 <SD_disk_ioctl+0x23c>
 8000e12:	2110      	movs	r1, #16
 8000e14:	6a38      	ldr	r0, [r7, #32]
 8000e16:	f7ff fc61 	bl	80006dc <SD_RxDataBlock>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d02b      	beq.n	8000e78 <SD_disk_ioctl+0x23c>
 8000e20:	2300      	movs	r3, #0
 8000e22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e26:	e027      	b.n	8000e78 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000e28:	2100      	movs	r1, #0
 8000e2a:	207a      	movs	r0, #122	; 0x7a
 8000e2c:	f7ff fcc7 	bl	80007be <SD_SendCmd>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d116      	bne.n	8000e64 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000e36:	2300      	movs	r3, #0
 8000e38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000e3c:	e00b      	b.n	8000e56 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000e3e:	6a3c      	ldr	r4, [r7, #32]
 8000e40:	1c63      	adds	r3, r4, #1
 8000e42:	623b      	str	r3, [r7, #32]
 8000e44:	f7ff fbac 	bl	80005a0 <SPI_RxByte>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000e4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e50:	3301      	adds	r3, #1
 8000e52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000e56:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e5a:	2b03      	cmp	r3, #3
 8000e5c:	d9ef      	bls.n	8000e3e <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000e64:	2304      	movs	r3, #4
 8000e66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000e6a:	e006      	b.n	8000e7a <SD_disk_ioctl+0x23e>
			break;
 8000e6c:	bf00      	nop
 8000e6e:	e004      	b.n	8000e7a <SD_disk_ioctl+0x23e>
			break;
 8000e70:	bf00      	nop
 8000e72:	e002      	b.n	8000e7a <SD_disk_ioctl+0x23e>
			break;
 8000e74:	bf00      	nop
 8000e76:	e000      	b.n	8000e7a <SD_disk_ioctl+0x23e>
			break;
 8000e78:	bf00      	nop
		}

		DESELECT();
 8000e7a:	f7ff fb4f 	bl	800051c <DESELECT>
		SPI_RxByte();
 8000e7e:	f7ff fb8f 	bl	80005a0 <SPI_RxByte>
	}

	return res;
 8000e82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	372c      	adds	r7, #44	; 0x2c
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd90      	pop	{r4, r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000000 	.word	0x20000000

08000e94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e98:	f000 faa8 	bl	80013ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e9c:	f000 f82e 	bl	8000efc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea0:	f000 f8fa 	bl	8001098 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ea4:	f000 f8ce 	bl	8001044 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000ea8:	f000 f896 	bl	8000fd8 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000eac:	f002 faa4 	bl	80033f8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(500);
 8000eb0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000eb4:	f000 fb0c 	bl	80014d0 <HAL_Delay>
  f_mount(&fs, "", 0);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	490b      	ldr	r1, [pc, #44]	; (8000ee8 <main+0x54>)
 8000ebc:	480b      	ldr	r0, [pc, #44]	; (8000eec <main+0x58>)
 8000ebe:	f004 fce3 	bl	8005888 <f_mount>
  f_open(&fil, "write.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 8000ec2:	2213      	movs	r2, #19
 8000ec4:	490a      	ldr	r1, [pc, #40]	; (8000ef0 <main+0x5c>)
 8000ec6:	480b      	ldr	r0, [pc, #44]	; (8000ef4 <main+0x60>)
 8000ec8:	f004 fd24 	bl	8005914 <f_open>
  f_lseek(&fil, fil.fptr);
 8000ecc:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <main+0x60>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4808      	ldr	r0, [pc, #32]	; (8000ef4 <main+0x60>)
 8000ed4:	f005 f926 	bl	8006124 <f_lseek>
  f_puts("Hello I am an SD card and I have data\n", &fil);
 8000ed8:	4906      	ldr	r1, [pc, #24]	; (8000ef4 <main+0x60>)
 8000eda:	4807      	ldr	r0, [pc, #28]	; (8000ef8 <main+0x64>)
 8000edc:	f005 fbbd 	bl	800665a <f_puts>
  f_close(&fil);
 8000ee0:	4804      	ldr	r0, [pc, #16]	; (8000ef4 <main+0x60>)
 8000ee2:	f005 f8f5 	bl	80060d0 <f_close>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ee6:	e7fe      	b.n	8000ee6 <main+0x52>
 8000ee8:	08006958 	.word	0x08006958
 8000eec:	20000048 	.word	0x20000048
 8000ef0:	0800695c 	.word	0x0800695c
 8000ef4:	20001080 	.word	0x20001080
 8000ef8:	08006968 	.word	0x08006968

08000efc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b094      	sub	sp, #80	; 0x50
 8000f00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f02:	f107 031c 	add.w	r3, r7, #28
 8000f06:	2234      	movs	r2, #52	; 0x34
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f005 fcec 	bl	80068e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f10:	f107 0308 	add.w	r3, r7, #8
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f20:	2300      	movs	r3, #0
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	4b2a      	ldr	r3, [pc, #168]	; (8000fd0 <SystemClock_Config+0xd4>)
 8000f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f28:	4a29      	ldr	r2, [pc, #164]	; (8000fd0 <SystemClock_Config+0xd4>)
 8000f2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f30:	4b27      	ldr	r3, [pc, #156]	; (8000fd0 <SystemClock_Config+0xd4>)
 8000f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	603b      	str	r3, [r7, #0]
 8000f40:	4b24      	ldr	r3, [pc, #144]	; (8000fd4 <SystemClock_Config+0xd8>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f48:	4a22      	ldr	r2, [pc, #136]	; (8000fd4 <SystemClock_Config+0xd8>)
 8000f4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f4e:	6013      	str	r3, [r2, #0]
 8000f50:	4b20      	ldr	r3, [pc, #128]	; (8000fd4 <SystemClock_Config+0xd8>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f58:	603b      	str	r3, [r7, #0]
 8000f5a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f60:	2301      	movs	r3, #1
 8000f62:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f64:	2310      	movs	r3, #16
 8000f66:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f70:	2310      	movs	r3, #16
 8000f72:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f74:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f78:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f7a:	2304      	movs	r3, #4
 8000f7c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f82:	2302      	movs	r3, #2
 8000f84:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f86:	f107 031c 	add.w	r3, r7, #28
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f001 f8a2 	bl	80020d4 <HAL_RCC_OscConfig>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000f96:	f000 f8ed 	bl	8001174 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f9a:	230f      	movs	r3, #15
 8000f9c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000faa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fac:	2300      	movs	r3, #0
 8000fae:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fb0:	f107 0308 	add.w	r3, r7, #8
 8000fb4:	2102      	movs	r1, #2
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 fd42 	bl	8001a40 <HAL_RCC_ClockConfig>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000fc2:	f000 f8d7 	bl	8001174 <Error_Handler>
  }
}
 8000fc6:	bf00      	nop
 8000fc8:	3750      	adds	r7, #80	; 0x50
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40007000 	.word	0x40007000

08000fd8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fdc:	4b17      	ldr	r3, [pc, #92]	; (800103c <MX_SPI1_Init+0x64>)
 8000fde:	4a18      	ldr	r2, [pc, #96]	; (8001040 <MX_SPI1_Init+0x68>)
 8000fe0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fe2:	4b16      	ldr	r3, [pc, #88]	; (800103c <MX_SPI1_Init+0x64>)
 8000fe4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fe8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fea:	4b14      	ldr	r3, [pc, #80]	; (800103c <MX_SPI1_Init+0x64>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <MX_SPI1_Init+0x64>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ff6:	4b11      	ldr	r3, [pc, #68]	; (800103c <MX_SPI1_Init+0x64>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	; (800103c <MX_SPI1_Init+0x64>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <MX_SPI1_Init+0x64>)
 8001004:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001008:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800100a:	4b0c      	ldr	r3, [pc, #48]	; (800103c <MX_SPI1_Init+0x64>)
 800100c:	2200      	movs	r2, #0
 800100e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001010:	4b0a      	ldr	r3, [pc, #40]	; (800103c <MX_SPI1_Init+0x64>)
 8001012:	2200      	movs	r2, #0
 8001014:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001016:	4b09      	ldr	r3, [pc, #36]	; (800103c <MX_SPI1_Init+0x64>)
 8001018:	2200      	movs	r2, #0
 800101a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800101c:	4b07      	ldr	r3, [pc, #28]	; (800103c <MX_SPI1_Init+0x64>)
 800101e:	2200      	movs	r2, #0
 8001020:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001022:	4b06      	ldr	r3, [pc, #24]	; (800103c <MX_SPI1_Init+0x64>)
 8001024:	220a      	movs	r2, #10
 8001026:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001028:	4804      	ldr	r0, [pc, #16]	; (800103c <MX_SPI1_Init+0x64>)
 800102a:	f001 faf1 	bl	8002610 <HAL_SPI_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001034:	f000 f89e 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}
 800103c:	200020b0 	.word	0x200020b0
 8001040:	40013000 	.word	0x40013000

08001044 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 800104a:	4a12      	ldr	r2, [pc, #72]	; (8001094 <MX_USART2_UART_Init+0x50>)
 800104c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 8001050:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001054:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001056:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001062:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001068:	4b09      	ldr	r3, [pc, #36]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 800106a:	220c      	movs	r2, #12
 800106c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800106e:	4b08      	ldr	r3, [pc, #32]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 8001076:	2200      	movs	r2, #0
 8001078:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800107a:	4805      	ldr	r0, [pc, #20]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 800107c:	f001 fefa 	bl	8002e74 <HAL_UART_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001086:	f000 f875 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20002108 	.word	0x20002108
 8001094:	40004400 	.word	0x40004400

08001098 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08a      	sub	sp, #40	; 0x28
 800109c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109e:	f107 0314 	add.w	r3, r7, #20
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	60da      	str	r2, [r3, #12]
 80010ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	613b      	str	r3, [r7, #16]
 80010b2:	4b2d      	ldr	r3, [pc, #180]	; (8001168 <MX_GPIO_Init+0xd0>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a2c      	ldr	r2, [pc, #176]	; (8001168 <MX_GPIO_Init+0xd0>)
 80010b8:	f043 0304 	orr.w	r3, r3, #4
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b2a      	ldr	r3, [pc, #168]	; (8001168 <MX_GPIO_Init+0xd0>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0304 	and.w	r3, r3, #4
 80010c6:	613b      	str	r3, [r7, #16]
 80010c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	4b26      	ldr	r3, [pc, #152]	; (8001168 <MX_GPIO_Init+0xd0>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a25      	ldr	r2, [pc, #148]	; (8001168 <MX_GPIO_Init+0xd0>)
 80010d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b23      	ldr	r3, [pc, #140]	; (8001168 <MX_GPIO_Init+0xd0>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	4b1f      	ldr	r3, [pc, #124]	; (8001168 <MX_GPIO_Init+0xd0>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a1e      	ldr	r2, [pc, #120]	; (8001168 <MX_GPIO_Init+0xd0>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b1c      	ldr	r3, [pc, #112]	; (8001168 <MX_GPIO_Init+0xd0>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	607b      	str	r3, [r7, #4]
 8001106:	4b18      	ldr	r3, [pc, #96]	; (8001168 <MX_GPIO_Init+0xd0>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a17      	ldr	r2, [pc, #92]	; (8001168 <MX_GPIO_Init+0xd0>)
 800110c:	f043 0302 	orr.w	r3, r3, #2
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b15      	ldr	r3, [pc, #84]	; (8001168 <MX_GPIO_Init+0xd0>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800111e:	2200      	movs	r2, #0
 8001120:	2140      	movs	r1, #64	; 0x40
 8001122:	4812      	ldr	r0, [pc, #72]	; (800116c <MX_GPIO_Init+0xd4>)
 8001124:	f000 fc72 	bl	8001a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001128:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800112c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800112e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001132:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	4619      	mov	r1, r3
 800113e:	480c      	ldr	r0, [pc, #48]	; (8001170 <MX_GPIO_Init+0xd8>)
 8001140:	f000 fad0 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001144:	2340      	movs	r3, #64	; 0x40
 8001146:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001148:	2301      	movs	r3, #1
 800114a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001150:	2300      	movs	r3, #0
 8001152:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	4619      	mov	r1, r3
 800115a:	4804      	ldr	r0, [pc, #16]	; (800116c <MX_GPIO_Init+0xd4>)
 800115c:	f000 fac2 	bl	80016e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001160:	bf00      	nop
 8001162:	3728      	adds	r7, #40	; 0x28
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40023800 	.word	0x40023800
 800116c:	40020400 	.word	0x40020400
 8001170:	40020800 	.word	0x40020800

08001174 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001178:	b672      	cpsid	i
}
 800117a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800117c:	e7fe      	b.n	800117c <Error_Handler+0x8>
	...

08001180 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	4b10      	ldr	r3, [pc, #64]	; (80011cc <HAL_MspInit+0x4c>)
 800118c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118e:	4a0f      	ldr	r2, [pc, #60]	; (80011cc <HAL_MspInit+0x4c>)
 8001190:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001194:	6453      	str	r3, [r2, #68]	; 0x44
 8001196:	4b0d      	ldr	r3, [pc, #52]	; (80011cc <HAL_MspInit+0x4c>)
 8001198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	603b      	str	r3, [r7, #0]
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <HAL_MspInit+0x4c>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	4a08      	ldr	r2, [pc, #32]	; (80011cc <HAL_MspInit+0x4c>)
 80011ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b0:	6413      	str	r3, [r2, #64]	; 0x40
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <HAL_MspInit+0x4c>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ba:	603b      	str	r3, [r7, #0]
 80011bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011be:	2007      	movs	r0, #7
 80011c0:	f000 fa5c 	bl	800167c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40023800 	.word	0x40023800

080011d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08a      	sub	sp, #40	; 0x28
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a19      	ldr	r2, [pc, #100]	; (8001254 <HAL_SPI_MspInit+0x84>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d12b      	bne.n	800124a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	613b      	str	r3, [r7, #16]
 80011f6:	4b18      	ldr	r3, [pc, #96]	; (8001258 <HAL_SPI_MspInit+0x88>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	4a17      	ldr	r2, [pc, #92]	; (8001258 <HAL_SPI_MspInit+0x88>)
 80011fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001200:	6453      	str	r3, [r2, #68]	; 0x44
 8001202:	4b15      	ldr	r3, [pc, #84]	; (8001258 <HAL_SPI_MspInit+0x88>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	4b11      	ldr	r3, [pc, #68]	; (8001258 <HAL_SPI_MspInit+0x88>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a10      	ldr	r2, [pc, #64]	; (8001258 <HAL_SPI_MspInit+0x88>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <HAL_SPI_MspInit+0x88>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800122a:	23e0      	movs	r3, #224	; 0xe0
 800122c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122e:	2302      	movs	r3, #2
 8001230:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001236:	2303      	movs	r3, #3
 8001238:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800123a:	2305      	movs	r3, #5
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	4619      	mov	r1, r3
 8001244:	4805      	ldr	r0, [pc, #20]	; (800125c <HAL_SPI_MspInit+0x8c>)
 8001246:	f000 fa4d 	bl	80016e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800124a:	bf00      	nop
 800124c:	3728      	adds	r7, #40	; 0x28
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40013000 	.word	0x40013000
 8001258:	40023800 	.word	0x40023800
 800125c:	40020000 	.word	0x40020000

08001260 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08a      	sub	sp, #40	; 0x28
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a19      	ldr	r2, [pc, #100]	; (80012e4 <HAL_UART_MspInit+0x84>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d12b      	bne.n	80012da <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <HAL_UART_MspInit+0x88>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	4a17      	ldr	r2, [pc, #92]	; (80012e8 <HAL_UART_MspInit+0x88>)
 800128c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001290:	6413      	str	r3, [r2, #64]	; 0x40
 8001292:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <HAL_UART_MspInit+0x88>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <HAL_UART_MspInit+0x88>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a10      	ldr	r2, [pc, #64]	; (80012e8 <HAL_UART_MspInit+0x88>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <HAL_UART_MspInit+0x88>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012ba:	230c      	movs	r3, #12
 80012bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012be:	2302      	movs	r3, #2
 80012c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c6:	2303      	movs	r3, #3
 80012c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012ca:	2307      	movs	r3, #7
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ce:	f107 0314 	add.w	r3, r7, #20
 80012d2:	4619      	mov	r1, r3
 80012d4:	4805      	ldr	r0, [pc, #20]	; (80012ec <HAL_UART_MspInit+0x8c>)
 80012d6:	f000 fa05 	bl	80016e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012da:	bf00      	nop
 80012dc:	3728      	adds	r7, #40	; 0x28
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40004400 	.word	0x40004400
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40020000 	.word	0x40020000

080012f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <NMI_Handler+0x4>

080012f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012fa:	e7fe      	b.n	80012fa <HardFault_Handler+0x4>

080012fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001300:	e7fe      	b.n	8001300 <MemManage_Handler+0x4>

08001302 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001306:	e7fe      	b.n	8001306 <BusFault_Handler+0x4>

08001308 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800130c:	e7fe      	b.n	800130c <UsageFault_Handler+0x4>

0800130e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (Timer1 > 0)
 800133c:	4b0b      	ldr	r3, [pc, #44]	; (800136c <SysTick_Handler+0x34>)
 800133e:	881b      	ldrh	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d005      	beq.n	8001350 <SysTick_Handler+0x18>
		Timer1--;
 8001344:	4b09      	ldr	r3, [pc, #36]	; (800136c <SysTick_Handler+0x34>)
 8001346:	881b      	ldrh	r3, [r3, #0]
 8001348:	3b01      	subs	r3, #1
 800134a:	b29a      	uxth	r2, r3
 800134c:	4b07      	ldr	r3, [pc, #28]	; (800136c <SysTick_Handler+0x34>)
 800134e:	801a      	strh	r2, [r3, #0]
	if (Timer2 > 0)
 8001350:	4b07      	ldr	r3, [pc, #28]	; (8001370 <SysTick_Handler+0x38>)
 8001352:	881b      	ldrh	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d005      	beq.n	8001364 <SysTick_Handler+0x2c>
		Timer2--;
 8001358:	4b05      	ldr	r3, [pc, #20]	; (8001370 <SysTick_Handler+0x38>)
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	3b01      	subs	r3, #1
 800135e:	b29a      	uxth	r2, r3
 8001360:	4b03      	ldr	r3, [pc, #12]	; (8001370 <SysTick_Handler+0x38>)
 8001362:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001364:	f000 f894 	bl	8001490 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000040 	.word	0x20000040
 8001370:	20000042 	.word	0x20000042

08001374 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <SystemInit+0x20>)
 800137a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800137e:	4a05      	ldr	r2, [pc, #20]	; (8001394 <SystemInit+0x20>)
 8001380:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001384:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001398:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800139c:	480d      	ldr	r0, [pc, #52]	; (80013d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800139e:	490e      	ldr	r1, [pc, #56]	; (80013d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013a0:	4a0e      	ldr	r2, [pc, #56]	; (80013dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a4:	e002      	b.n	80013ac <LoopCopyDataInit>

080013a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013aa:	3304      	adds	r3, #4

080013ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b0:	d3f9      	bcc.n	80013a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013b2:	4a0b      	ldr	r2, [pc, #44]	; (80013e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013b4:	4c0b      	ldr	r4, [pc, #44]	; (80013e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013b8:	e001      	b.n	80013be <LoopFillZerobss>

080013ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013bc:	3204      	adds	r2, #4

080013be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c0:	d3fb      	bcc.n	80013ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013c2:	f7ff ffd7 	bl	8001374 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013c6:	f005 fa97 	bl	80068f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ca:	f7ff fd63 	bl	8000e94 <main>
  bx  lr    
 80013ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d8:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80013dc:	08006e40 	.word	0x08006e40
  ldr r2, =_sbss
 80013e0:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80013e4:	2000238c 	.word	0x2000238c

080013e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013e8:	e7fe      	b.n	80013e8 <ADC_IRQHandler>
	...

080013ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013f0:	4b0e      	ldr	r3, [pc, #56]	; (800142c <HAL_Init+0x40>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a0d      	ldr	r2, [pc, #52]	; (800142c <HAL_Init+0x40>)
 80013f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013fc:	4b0b      	ldr	r3, [pc, #44]	; (800142c <HAL_Init+0x40>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a0a      	ldr	r2, [pc, #40]	; (800142c <HAL_Init+0x40>)
 8001402:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001406:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001408:	4b08      	ldr	r3, [pc, #32]	; (800142c <HAL_Init+0x40>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a07      	ldr	r2, [pc, #28]	; (800142c <HAL_Init+0x40>)
 800140e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001412:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001414:	2003      	movs	r0, #3
 8001416:	f000 f931 	bl	800167c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800141a:	2000      	movs	r0, #0
 800141c:	f000 f808 	bl	8001430 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001420:	f7ff feae 	bl	8001180 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40023c00 	.word	0x40023c00

08001430 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001438:	4b12      	ldr	r3, [pc, #72]	; (8001484 <HAL_InitTick+0x54>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	4b12      	ldr	r3, [pc, #72]	; (8001488 <HAL_InitTick+0x58>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	4619      	mov	r1, r3
 8001442:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001446:	fbb3 f3f1 	udiv	r3, r3, r1
 800144a:	fbb2 f3f3 	udiv	r3, r2, r3
 800144e:	4618      	mov	r0, r3
 8001450:	f000 f93b 	bl	80016ca <HAL_SYSTICK_Config>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e00e      	b.n	800147c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2b0f      	cmp	r3, #15
 8001462:	d80a      	bhi.n	800147a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001464:	2200      	movs	r2, #0
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800146c:	f000 f911 	bl	8001692 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001470:	4a06      	ldr	r2, [pc, #24]	; (800148c <HAL_InitTick+0x5c>)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001476:	2300      	movs	r3, #0
 8001478:	e000      	b.n	800147c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
}
 800147c:	4618      	mov	r0, r3
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20000004 	.word	0x20000004
 8001488:	2000000c 	.word	0x2000000c
 800148c:	20000008 	.word	0x20000008

08001490 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001494:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <HAL_IncTick+0x20>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	461a      	mov	r2, r3
 800149a:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <HAL_IncTick+0x24>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4413      	add	r3, r2
 80014a0:	4a04      	ldr	r2, [pc, #16]	; (80014b4 <HAL_IncTick+0x24>)
 80014a2:	6013      	str	r3, [r2, #0]
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	2000000c 	.word	0x2000000c
 80014b4:	2000214c 	.word	0x2000214c

080014b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  return uwTick;
 80014bc:	4b03      	ldr	r3, [pc, #12]	; (80014cc <HAL_GetTick+0x14>)
 80014be:	681b      	ldr	r3, [r3, #0]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	2000214c 	.word	0x2000214c

080014d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014d8:	f7ff ffee 	bl	80014b8 <HAL_GetTick>
 80014dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014e8:	d005      	beq.n	80014f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ea:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <HAL_Delay+0x44>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	461a      	mov	r2, r3
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	4413      	add	r3, r2
 80014f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014f6:	bf00      	nop
 80014f8:	f7ff ffde 	bl	80014b8 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	429a      	cmp	r2, r3
 8001506:	d8f7      	bhi.n	80014f8 <HAL_Delay+0x28>
  {
  }
}
 8001508:	bf00      	nop
 800150a:	bf00      	nop
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	2000000c 	.word	0x2000000c

08001518 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001528:	4b0c      	ldr	r3, [pc, #48]	; (800155c <__NVIC_SetPriorityGrouping+0x44>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800152e:	68ba      	ldr	r2, [r7, #8]
 8001530:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001534:	4013      	ands	r3, r2
 8001536:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001540:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001548:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800154a:	4a04      	ldr	r2, [pc, #16]	; (800155c <__NVIC_SetPriorityGrouping+0x44>)
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	60d3      	str	r3, [r2, #12]
}
 8001550:	bf00      	nop
 8001552:	3714      	adds	r7, #20
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001564:	4b04      	ldr	r3, [pc, #16]	; (8001578 <__NVIC_GetPriorityGrouping+0x18>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	0a1b      	lsrs	r3, r3, #8
 800156a:	f003 0307 	and.w	r3, r3, #7
}
 800156e:	4618      	mov	r0, r3
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	6039      	str	r1, [r7, #0]
 8001586:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158c:	2b00      	cmp	r3, #0
 800158e:	db0a      	blt.n	80015a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	b2da      	uxtb	r2, r3
 8001594:	490c      	ldr	r1, [pc, #48]	; (80015c8 <__NVIC_SetPriority+0x4c>)
 8001596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159a:	0112      	lsls	r2, r2, #4
 800159c:	b2d2      	uxtb	r2, r2
 800159e:	440b      	add	r3, r1
 80015a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a4:	e00a      	b.n	80015bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	4908      	ldr	r1, [pc, #32]	; (80015cc <__NVIC_SetPriority+0x50>)
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	f003 030f 	and.w	r3, r3, #15
 80015b2:	3b04      	subs	r3, #4
 80015b4:	0112      	lsls	r2, r2, #4
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	440b      	add	r3, r1
 80015ba:	761a      	strb	r2, [r3, #24]
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000e100 	.word	0xe000e100
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b089      	sub	sp, #36	; 0x24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	f1c3 0307 	rsb	r3, r3, #7
 80015ea:	2b04      	cmp	r3, #4
 80015ec:	bf28      	it	cs
 80015ee:	2304      	movcs	r3, #4
 80015f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	3304      	adds	r3, #4
 80015f6:	2b06      	cmp	r3, #6
 80015f8:	d902      	bls.n	8001600 <NVIC_EncodePriority+0x30>
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3b03      	subs	r3, #3
 80015fe:	e000      	b.n	8001602 <NVIC_EncodePriority+0x32>
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001604:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43da      	mvns	r2, r3
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	401a      	ands	r2, r3
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001618:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	fa01 f303 	lsl.w	r3, r1, r3
 8001622:	43d9      	mvns	r1, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001628:	4313      	orrs	r3, r2
         );
}
 800162a:	4618      	mov	r0, r3
 800162c:	3724      	adds	r7, #36	; 0x24
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
	...

08001638 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3b01      	subs	r3, #1
 8001644:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001648:	d301      	bcc.n	800164e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800164a:	2301      	movs	r3, #1
 800164c:	e00f      	b.n	800166e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800164e:	4a0a      	ldr	r2, [pc, #40]	; (8001678 <SysTick_Config+0x40>)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3b01      	subs	r3, #1
 8001654:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001656:	210f      	movs	r1, #15
 8001658:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800165c:	f7ff ff8e 	bl	800157c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001660:	4b05      	ldr	r3, [pc, #20]	; (8001678 <SysTick_Config+0x40>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001666:	4b04      	ldr	r3, [pc, #16]	; (8001678 <SysTick_Config+0x40>)
 8001668:	2207      	movs	r2, #7
 800166a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	e000e010 	.word	0xe000e010

0800167c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff ff47 	bl	8001518 <__NVIC_SetPriorityGrouping>
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001692:	b580      	push	{r7, lr}
 8001694:	b086      	sub	sp, #24
 8001696:	af00      	add	r7, sp, #0
 8001698:	4603      	mov	r3, r0
 800169a:	60b9      	str	r1, [r7, #8]
 800169c:	607a      	str	r2, [r7, #4]
 800169e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016a4:	f7ff ff5c 	bl	8001560 <__NVIC_GetPriorityGrouping>
 80016a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	68b9      	ldr	r1, [r7, #8]
 80016ae:	6978      	ldr	r0, [r7, #20]
 80016b0:	f7ff ff8e 	bl	80015d0 <NVIC_EncodePriority>
 80016b4:	4602      	mov	r2, r0
 80016b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ba:	4611      	mov	r1, r2
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff ff5d 	bl	800157c <__NVIC_SetPriority>
}
 80016c2:	bf00      	nop
 80016c4:	3718      	adds	r7, #24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b082      	sub	sp, #8
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7ff ffb0 	bl	8001638 <SysTick_Config>
 80016d8:	4603      	mov	r3, r0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b089      	sub	sp, #36	; 0x24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]
 80016fe:	e165      	b.n	80019cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001700:	2201      	movs	r2, #1
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	697a      	ldr	r2, [r7, #20]
 8001710:	4013      	ands	r3, r2
 8001712:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	429a      	cmp	r2, r3
 800171a:	f040 8154 	bne.w	80019c6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f003 0303 	and.w	r3, r3, #3
 8001726:	2b01      	cmp	r3, #1
 8001728:	d005      	beq.n	8001736 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001732:	2b02      	cmp	r3, #2
 8001734:	d130      	bne.n	8001798 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	2203      	movs	r2, #3
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43db      	mvns	r3, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4013      	ands	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	68da      	ldr	r2, [r3, #12]
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4313      	orrs	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800176c:	2201      	movs	r2, #1
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	4013      	ands	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	091b      	lsrs	r3, r3, #4
 8001782:	f003 0201 	and.w	r2, r3, #1
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4313      	orrs	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 0303 	and.w	r3, r3, #3
 80017a0:	2b03      	cmp	r3, #3
 80017a2:	d017      	beq.n	80017d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	2203      	movs	r2, #3
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4013      	ands	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	689a      	ldr	r2, [r3, #8]
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 0303 	and.w	r3, r3, #3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d123      	bne.n	8001828 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	08da      	lsrs	r2, r3, #3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3208      	adds	r2, #8
 80017e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	f003 0307 	and.w	r3, r3, #7
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	220f      	movs	r2, #15
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	43db      	mvns	r3, r3
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4013      	ands	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	691a      	ldr	r2, [r3, #16]
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4313      	orrs	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	08da      	lsrs	r2, r3, #3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	3208      	adds	r2, #8
 8001822:	69b9      	ldr	r1, [r7, #24]
 8001824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	2203      	movs	r2, #3
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4013      	ands	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f003 0203 	and.w	r2, r3, #3
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4313      	orrs	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001864:	2b00      	cmp	r3, #0
 8001866:	f000 80ae 	beq.w	80019c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	4b5d      	ldr	r3, [pc, #372]	; (80019e4 <HAL_GPIO_Init+0x300>)
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	4a5c      	ldr	r2, [pc, #368]	; (80019e4 <HAL_GPIO_Init+0x300>)
 8001874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001878:	6453      	str	r3, [r2, #68]	; 0x44
 800187a:	4b5a      	ldr	r3, [pc, #360]	; (80019e4 <HAL_GPIO_Init+0x300>)
 800187c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001886:	4a58      	ldr	r2, [pc, #352]	; (80019e8 <HAL_GPIO_Init+0x304>)
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	089b      	lsrs	r3, r3, #2
 800188c:	3302      	adds	r3, #2
 800188e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001892:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	f003 0303 	and.w	r3, r3, #3
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	220f      	movs	r2, #15
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43db      	mvns	r3, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4013      	ands	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a4f      	ldr	r2, [pc, #316]	; (80019ec <HAL_GPIO_Init+0x308>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d025      	beq.n	80018fe <HAL_GPIO_Init+0x21a>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a4e      	ldr	r2, [pc, #312]	; (80019f0 <HAL_GPIO_Init+0x30c>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d01f      	beq.n	80018fa <HAL_GPIO_Init+0x216>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a4d      	ldr	r2, [pc, #308]	; (80019f4 <HAL_GPIO_Init+0x310>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d019      	beq.n	80018f6 <HAL_GPIO_Init+0x212>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a4c      	ldr	r2, [pc, #304]	; (80019f8 <HAL_GPIO_Init+0x314>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d013      	beq.n	80018f2 <HAL_GPIO_Init+0x20e>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a4b      	ldr	r2, [pc, #300]	; (80019fc <HAL_GPIO_Init+0x318>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d00d      	beq.n	80018ee <HAL_GPIO_Init+0x20a>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a4a      	ldr	r2, [pc, #296]	; (8001a00 <HAL_GPIO_Init+0x31c>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d007      	beq.n	80018ea <HAL_GPIO_Init+0x206>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a49      	ldr	r2, [pc, #292]	; (8001a04 <HAL_GPIO_Init+0x320>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d101      	bne.n	80018e6 <HAL_GPIO_Init+0x202>
 80018e2:	2306      	movs	r3, #6
 80018e4:	e00c      	b.n	8001900 <HAL_GPIO_Init+0x21c>
 80018e6:	2307      	movs	r3, #7
 80018e8:	e00a      	b.n	8001900 <HAL_GPIO_Init+0x21c>
 80018ea:	2305      	movs	r3, #5
 80018ec:	e008      	b.n	8001900 <HAL_GPIO_Init+0x21c>
 80018ee:	2304      	movs	r3, #4
 80018f0:	e006      	b.n	8001900 <HAL_GPIO_Init+0x21c>
 80018f2:	2303      	movs	r3, #3
 80018f4:	e004      	b.n	8001900 <HAL_GPIO_Init+0x21c>
 80018f6:	2302      	movs	r3, #2
 80018f8:	e002      	b.n	8001900 <HAL_GPIO_Init+0x21c>
 80018fa:	2301      	movs	r3, #1
 80018fc:	e000      	b.n	8001900 <HAL_GPIO_Init+0x21c>
 80018fe:	2300      	movs	r3, #0
 8001900:	69fa      	ldr	r2, [r7, #28]
 8001902:	f002 0203 	and.w	r2, r2, #3
 8001906:	0092      	lsls	r2, r2, #2
 8001908:	4093      	lsls	r3, r2
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4313      	orrs	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001910:	4935      	ldr	r1, [pc, #212]	; (80019e8 <HAL_GPIO_Init+0x304>)
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	089b      	lsrs	r3, r3, #2
 8001916:	3302      	adds	r3, #2
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800191e:	4b3a      	ldr	r3, [pc, #232]	; (8001a08 <HAL_GPIO_Init+0x324>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	43db      	mvns	r3, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4013      	ands	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	4313      	orrs	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001942:	4a31      	ldr	r2, [pc, #196]	; (8001a08 <HAL_GPIO_Init+0x324>)
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001948:	4b2f      	ldr	r3, [pc, #188]	; (8001a08 <HAL_GPIO_Init+0x324>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	43db      	mvns	r3, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4013      	ands	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d003      	beq.n	800196c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	4313      	orrs	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800196c:	4a26      	ldr	r2, [pc, #152]	; (8001a08 <HAL_GPIO_Init+0x324>)
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001972:	4b25      	ldr	r3, [pc, #148]	; (8001a08 <HAL_GPIO_Init+0x324>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	43db      	mvns	r3, r3
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4013      	ands	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001996:	4a1c      	ldr	r2, [pc, #112]	; (8001a08 <HAL_GPIO_Init+0x324>)
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800199c:	4b1a      	ldr	r3, [pc, #104]	; (8001a08 <HAL_GPIO_Init+0x324>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	43db      	mvns	r3, r3
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4013      	ands	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d003      	beq.n	80019c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	4313      	orrs	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019c0:	4a11      	ldr	r2, [pc, #68]	; (8001a08 <HAL_GPIO_Init+0x324>)
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	3301      	adds	r3, #1
 80019ca:	61fb      	str	r3, [r7, #28]
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	2b0f      	cmp	r3, #15
 80019d0:	f67f ae96 	bls.w	8001700 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019d4:	bf00      	nop
 80019d6:	bf00      	nop
 80019d8:	3724      	adds	r7, #36	; 0x24
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	40023800 	.word	0x40023800
 80019e8:	40013800 	.word	0x40013800
 80019ec:	40020000 	.word	0x40020000
 80019f0:	40020400 	.word	0x40020400
 80019f4:	40020800 	.word	0x40020800
 80019f8:	40020c00 	.word	0x40020c00
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40021400 	.word	0x40021400
 8001a04:	40021800 	.word	0x40021800
 8001a08:	40013c00 	.word	0x40013c00

08001a0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	460b      	mov	r3, r1
 8001a16:	807b      	strh	r3, [r7, #2]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a1c:	787b      	ldrb	r3, [r7, #1]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d003      	beq.n	8001a2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a22:	887a      	ldrh	r2, [r7, #2]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a28:	e003      	b.n	8001a32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a2a:	887b      	ldrh	r3, [r7, #2]
 8001a2c:	041a      	lsls	r2, r3, #16
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	619a      	str	r2, [r3, #24]
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
	...

08001a40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d101      	bne.n	8001a54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e0cc      	b.n	8001bee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a54:	4b68      	ldr	r3, [pc, #416]	; (8001bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 030f 	and.w	r3, r3, #15
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d90c      	bls.n	8001a7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a62:	4b65      	ldr	r3, [pc, #404]	; (8001bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	b2d2      	uxtb	r2, r2
 8001a68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a6a:	4b63      	ldr	r3, [pc, #396]	; (8001bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 030f 	and.w	r3, r3, #15
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d001      	beq.n	8001a7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e0b8      	b.n	8001bee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d020      	beq.n	8001aca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d005      	beq.n	8001aa0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a94:	4b59      	ldr	r3, [pc, #356]	; (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	4a58      	ldr	r2, [pc, #352]	; (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001a9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0308 	and.w	r3, r3, #8
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d005      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001aac:	4b53      	ldr	r3, [pc, #332]	; (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	4a52      	ldr	r2, [pc, #328]	; (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001ab2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ab6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ab8:	4b50      	ldr	r3, [pc, #320]	; (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	494d      	ldr	r1, [pc, #308]	; (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d044      	beq.n	8001b60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d107      	bne.n	8001aee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ade:	4b47      	ldr	r3, [pc, #284]	; (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d119      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e07f      	b.n	8001bee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d003      	beq.n	8001afe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001afa:	2b03      	cmp	r3, #3
 8001afc:	d107      	bne.n	8001b0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001afe:	4b3f      	ldr	r3, [pc, #252]	; (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d109      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e06f      	b.n	8001bee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b0e:	4b3b      	ldr	r3, [pc, #236]	; (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e067      	b.n	8001bee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b1e:	4b37      	ldr	r3, [pc, #220]	; (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f023 0203 	bic.w	r2, r3, #3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	4934      	ldr	r1, [pc, #208]	; (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b30:	f7ff fcc2 	bl	80014b8 <HAL_GetTick>
 8001b34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b36:	e00a      	b.n	8001b4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b38:	f7ff fcbe 	bl	80014b8 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e04f      	b.n	8001bee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b4e:	4b2b      	ldr	r3, [pc, #172]	; (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 020c 	and.w	r2, r3, #12
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d1eb      	bne.n	8001b38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b60:	4b25      	ldr	r3, [pc, #148]	; (8001bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 030f 	and.w	r3, r3, #15
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d20c      	bcs.n	8001b88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6e:	4b22      	ldr	r3, [pc, #136]	; (8001bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	b2d2      	uxtb	r2, r2
 8001b74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b76:	4b20      	ldr	r3, [pc, #128]	; (8001bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d001      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e032      	b.n	8001bee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0304 	and.w	r3, r3, #4
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d008      	beq.n	8001ba6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b94:	4b19      	ldr	r3, [pc, #100]	; (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	4916      	ldr	r1, [pc, #88]	; (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0308 	and.w	r3, r3, #8
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d009      	beq.n	8001bc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bb2:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	490e      	ldr	r1, [pc, #56]	; (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bc6:	f000 f855 	bl	8001c74 <HAL_RCC_GetSysClockFreq>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	091b      	lsrs	r3, r3, #4
 8001bd2:	f003 030f 	and.w	r3, r3, #15
 8001bd6:	490a      	ldr	r1, [pc, #40]	; (8001c00 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd8:	5ccb      	ldrb	r3, [r1, r3]
 8001bda:	fa22 f303 	lsr.w	r3, r2, r3
 8001bde:	4a09      	ldr	r2, [pc, #36]	; (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001be0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001be2:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <HAL_RCC_ClockConfig+0x1c8>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff fc22 	bl	8001430 <HAL_InitTick>

  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40023c00 	.word	0x40023c00
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	080069d8 	.word	0x080069d8
 8001c04:	20000004 	.word	0x20000004
 8001c08:	20000008 	.word	0x20000008

08001c0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c10:	4b03      	ldr	r3, [pc, #12]	; (8001c20 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c12:	681b      	ldr	r3, [r3, #0]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	20000004 	.word	0x20000004

08001c24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c28:	f7ff fff0 	bl	8001c0c <HAL_RCC_GetHCLKFreq>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	0a9b      	lsrs	r3, r3, #10
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	4903      	ldr	r1, [pc, #12]	; (8001c48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c3a:	5ccb      	ldrb	r3, [r1, r3]
 8001c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40023800 	.word	0x40023800
 8001c48:	080069e8 	.word	0x080069e8

08001c4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c50:	f7ff ffdc 	bl	8001c0c <HAL_RCC_GetHCLKFreq>
 8001c54:	4602      	mov	r2, r0
 8001c56:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	0b5b      	lsrs	r3, r3, #13
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	4903      	ldr	r1, [pc, #12]	; (8001c70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c62:	5ccb      	ldrb	r3, [r1, r3]
 8001c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	080069e8 	.word	0x080069e8

08001c74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c78:	b0ae      	sub	sp, #184	; 0xb8
 8001c7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001c94:	2300      	movs	r3, #0
 8001c96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c9a:	4bcb      	ldr	r3, [pc, #812]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 030c 	and.w	r3, r3, #12
 8001ca2:	2b0c      	cmp	r3, #12
 8001ca4:	f200 8206 	bhi.w	80020b4 <HAL_RCC_GetSysClockFreq+0x440>
 8001ca8:	a201      	add	r2, pc, #4	; (adr r2, 8001cb0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cae:	bf00      	nop
 8001cb0:	08001ce5 	.word	0x08001ce5
 8001cb4:	080020b5 	.word	0x080020b5
 8001cb8:	080020b5 	.word	0x080020b5
 8001cbc:	080020b5 	.word	0x080020b5
 8001cc0:	08001ced 	.word	0x08001ced
 8001cc4:	080020b5 	.word	0x080020b5
 8001cc8:	080020b5 	.word	0x080020b5
 8001ccc:	080020b5 	.word	0x080020b5
 8001cd0:	08001cf5 	.word	0x08001cf5
 8001cd4:	080020b5 	.word	0x080020b5
 8001cd8:	080020b5 	.word	0x080020b5
 8001cdc:	080020b5 	.word	0x080020b5
 8001ce0:	08001ee5 	.word	0x08001ee5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ce4:	4bb9      	ldr	r3, [pc, #740]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x358>)
 8001ce6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001cea:	e1e7      	b.n	80020bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cec:	4bb8      	ldr	r3, [pc, #736]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001cee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001cf2:	e1e3      	b.n	80020bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cf4:	4bb4      	ldr	r3, [pc, #720]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d00:	4bb1      	ldr	r3, [pc, #708]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d071      	beq.n	8001df0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d0c:	4bae      	ldr	r3, [pc, #696]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	099b      	lsrs	r3, r3, #6
 8001d12:	2200      	movs	r2, #0
 8001d14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001d18:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001d1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001d28:	2300      	movs	r3, #0
 8001d2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001d2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001d32:	4622      	mov	r2, r4
 8001d34:	462b      	mov	r3, r5
 8001d36:	f04f 0000 	mov.w	r0, #0
 8001d3a:	f04f 0100 	mov.w	r1, #0
 8001d3e:	0159      	lsls	r1, r3, #5
 8001d40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d44:	0150      	lsls	r0, r2, #5
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4621      	mov	r1, r4
 8001d4c:	1a51      	subs	r1, r2, r1
 8001d4e:	6439      	str	r1, [r7, #64]	; 0x40
 8001d50:	4629      	mov	r1, r5
 8001d52:	eb63 0301 	sbc.w	r3, r3, r1
 8001d56:	647b      	str	r3, [r7, #68]	; 0x44
 8001d58:	f04f 0200 	mov.w	r2, #0
 8001d5c:	f04f 0300 	mov.w	r3, #0
 8001d60:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001d64:	4649      	mov	r1, r9
 8001d66:	018b      	lsls	r3, r1, #6
 8001d68:	4641      	mov	r1, r8
 8001d6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d6e:	4641      	mov	r1, r8
 8001d70:	018a      	lsls	r2, r1, #6
 8001d72:	4641      	mov	r1, r8
 8001d74:	1a51      	subs	r1, r2, r1
 8001d76:	63b9      	str	r1, [r7, #56]	; 0x38
 8001d78:	4649      	mov	r1, r9
 8001d7a:	eb63 0301 	sbc.w	r3, r3, r1
 8001d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d80:	f04f 0200 	mov.w	r2, #0
 8001d84:	f04f 0300 	mov.w	r3, #0
 8001d88:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001d8c:	4649      	mov	r1, r9
 8001d8e:	00cb      	lsls	r3, r1, #3
 8001d90:	4641      	mov	r1, r8
 8001d92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001d96:	4641      	mov	r1, r8
 8001d98:	00ca      	lsls	r2, r1, #3
 8001d9a:	4610      	mov	r0, r2
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4603      	mov	r3, r0
 8001da0:	4622      	mov	r2, r4
 8001da2:	189b      	adds	r3, r3, r2
 8001da4:	633b      	str	r3, [r7, #48]	; 0x30
 8001da6:	462b      	mov	r3, r5
 8001da8:	460a      	mov	r2, r1
 8001daa:	eb42 0303 	adc.w	r3, r2, r3
 8001dae:	637b      	str	r3, [r7, #52]	; 0x34
 8001db0:	f04f 0200 	mov.w	r2, #0
 8001db4:	f04f 0300 	mov.w	r3, #0
 8001db8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001dbc:	4629      	mov	r1, r5
 8001dbe:	024b      	lsls	r3, r1, #9
 8001dc0:	4621      	mov	r1, r4
 8001dc2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001dc6:	4621      	mov	r1, r4
 8001dc8:	024a      	lsls	r2, r1, #9
 8001dca:	4610      	mov	r0, r2
 8001dcc:	4619      	mov	r1, r3
 8001dce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001dd8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001ddc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001de0:	f7fe fa10 	bl	8000204 <__aeabi_uldivmod>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	4613      	mov	r3, r2
 8001dea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001dee:	e067      	b.n	8001ec0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001df0:	4b75      	ldr	r3, [pc, #468]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	099b      	lsrs	r3, r3, #6
 8001df6:	2200      	movs	r2, #0
 8001df8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001dfc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001e00:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e08:	67bb      	str	r3, [r7, #120]	; 0x78
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001e0e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001e12:	4622      	mov	r2, r4
 8001e14:	462b      	mov	r3, r5
 8001e16:	f04f 0000 	mov.w	r0, #0
 8001e1a:	f04f 0100 	mov.w	r1, #0
 8001e1e:	0159      	lsls	r1, r3, #5
 8001e20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e24:	0150      	lsls	r0, r2, #5
 8001e26:	4602      	mov	r2, r0
 8001e28:	460b      	mov	r3, r1
 8001e2a:	4621      	mov	r1, r4
 8001e2c:	1a51      	subs	r1, r2, r1
 8001e2e:	62b9      	str	r1, [r7, #40]	; 0x28
 8001e30:	4629      	mov	r1, r5
 8001e32:	eb63 0301 	sbc.w	r3, r3, r1
 8001e36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e38:	f04f 0200 	mov.w	r2, #0
 8001e3c:	f04f 0300 	mov.w	r3, #0
 8001e40:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001e44:	4649      	mov	r1, r9
 8001e46:	018b      	lsls	r3, r1, #6
 8001e48:	4641      	mov	r1, r8
 8001e4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e4e:	4641      	mov	r1, r8
 8001e50:	018a      	lsls	r2, r1, #6
 8001e52:	4641      	mov	r1, r8
 8001e54:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e58:	4649      	mov	r1, r9
 8001e5a:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e5e:	f04f 0200 	mov.w	r2, #0
 8001e62:	f04f 0300 	mov.w	r3, #0
 8001e66:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001e6a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001e6e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e72:	4692      	mov	sl, r2
 8001e74:	469b      	mov	fp, r3
 8001e76:	4623      	mov	r3, r4
 8001e78:	eb1a 0303 	adds.w	r3, sl, r3
 8001e7c:	623b      	str	r3, [r7, #32]
 8001e7e:	462b      	mov	r3, r5
 8001e80:	eb4b 0303 	adc.w	r3, fp, r3
 8001e84:	627b      	str	r3, [r7, #36]	; 0x24
 8001e86:	f04f 0200 	mov.w	r2, #0
 8001e8a:	f04f 0300 	mov.w	r3, #0
 8001e8e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001e92:	4629      	mov	r1, r5
 8001e94:	028b      	lsls	r3, r1, #10
 8001e96:	4621      	mov	r1, r4
 8001e98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e9c:	4621      	mov	r1, r4
 8001e9e:	028a      	lsls	r2, r1, #10
 8001ea0:	4610      	mov	r0, r2
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	673b      	str	r3, [r7, #112]	; 0x70
 8001eac:	677a      	str	r2, [r7, #116]	; 0x74
 8001eae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001eb2:	f7fe f9a7 	bl	8000204 <__aeabi_uldivmod>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	460b      	mov	r3, r1
 8001eba:	4613      	mov	r3, r2
 8001ebc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ec0:	4b41      	ldr	r3, [pc, #260]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	0c1b      	lsrs	r3, r3, #16
 8001ec6:	f003 0303 	and.w	r3, r3, #3
 8001eca:	3301      	adds	r3, #1
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001ed2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001ed6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ede:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001ee2:	e0eb      	b.n	80020bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ee4:	4b38      	ldr	r3, [pc, #224]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001eec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ef0:	4b35      	ldr	r3, [pc, #212]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d06b      	beq.n	8001fd4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001efc:	4b32      	ldr	r3, [pc, #200]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	099b      	lsrs	r3, r3, #6
 8001f02:	2200      	movs	r2, #0
 8001f04:	66bb      	str	r3, [r7, #104]	; 0x68
 8001f06:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001f08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f0e:	663b      	str	r3, [r7, #96]	; 0x60
 8001f10:	2300      	movs	r3, #0
 8001f12:	667b      	str	r3, [r7, #100]	; 0x64
 8001f14:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001f18:	4622      	mov	r2, r4
 8001f1a:	462b      	mov	r3, r5
 8001f1c:	f04f 0000 	mov.w	r0, #0
 8001f20:	f04f 0100 	mov.w	r1, #0
 8001f24:	0159      	lsls	r1, r3, #5
 8001f26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f2a:	0150      	lsls	r0, r2, #5
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	460b      	mov	r3, r1
 8001f30:	4621      	mov	r1, r4
 8001f32:	1a51      	subs	r1, r2, r1
 8001f34:	61b9      	str	r1, [r7, #24]
 8001f36:	4629      	mov	r1, r5
 8001f38:	eb63 0301 	sbc.w	r3, r3, r1
 8001f3c:	61fb      	str	r3, [r7, #28]
 8001f3e:	f04f 0200 	mov.w	r2, #0
 8001f42:	f04f 0300 	mov.w	r3, #0
 8001f46:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001f4a:	4659      	mov	r1, fp
 8001f4c:	018b      	lsls	r3, r1, #6
 8001f4e:	4651      	mov	r1, sl
 8001f50:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f54:	4651      	mov	r1, sl
 8001f56:	018a      	lsls	r2, r1, #6
 8001f58:	4651      	mov	r1, sl
 8001f5a:	ebb2 0801 	subs.w	r8, r2, r1
 8001f5e:	4659      	mov	r1, fp
 8001f60:	eb63 0901 	sbc.w	r9, r3, r1
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	f04f 0300 	mov.w	r3, #0
 8001f6c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f70:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f74:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f78:	4690      	mov	r8, r2
 8001f7a:	4699      	mov	r9, r3
 8001f7c:	4623      	mov	r3, r4
 8001f7e:	eb18 0303 	adds.w	r3, r8, r3
 8001f82:	613b      	str	r3, [r7, #16]
 8001f84:	462b      	mov	r3, r5
 8001f86:	eb49 0303 	adc.w	r3, r9, r3
 8001f8a:	617b      	str	r3, [r7, #20]
 8001f8c:	f04f 0200 	mov.w	r2, #0
 8001f90:	f04f 0300 	mov.w	r3, #0
 8001f94:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001f98:	4629      	mov	r1, r5
 8001f9a:	024b      	lsls	r3, r1, #9
 8001f9c:	4621      	mov	r1, r4
 8001f9e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001fa2:	4621      	mov	r1, r4
 8001fa4:	024a      	lsls	r2, r1, #9
 8001fa6:	4610      	mov	r0, r2
 8001fa8:	4619      	mov	r1, r3
 8001faa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fae:	2200      	movs	r2, #0
 8001fb0:	65bb      	str	r3, [r7, #88]	; 0x58
 8001fb2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001fb4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001fb8:	f7fe f924 	bl	8000204 <__aeabi_uldivmod>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001fc6:	e065      	b.n	8002094 <HAL_RCC_GetSysClockFreq+0x420>
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	00f42400 	.word	0x00f42400
 8001fd0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fd4:	4b3d      	ldr	r3, [pc, #244]	; (80020cc <HAL_RCC_GetSysClockFreq+0x458>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	099b      	lsrs	r3, r3, #6
 8001fda:	2200      	movs	r2, #0
 8001fdc:	4618      	mov	r0, r3
 8001fde:	4611      	mov	r1, r2
 8001fe0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001fe4:	653b      	str	r3, [r7, #80]	; 0x50
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	657b      	str	r3, [r7, #84]	; 0x54
 8001fea:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001fee:	4642      	mov	r2, r8
 8001ff0:	464b      	mov	r3, r9
 8001ff2:	f04f 0000 	mov.w	r0, #0
 8001ff6:	f04f 0100 	mov.w	r1, #0
 8001ffa:	0159      	lsls	r1, r3, #5
 8001ffc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002000:	0150      	lsls	r0, r2, #5
 8002002:	4602      	mov	r2, r0
 8002004:	460b      	mov	r3, r1
 8002006:	4641      	mov	r1, r8
 8002008:	1a51      	subs	r1, r2, r1
 800200a:	60b9      	str	r1, [r7, #8]
 800200c:	4649      	mov	r1, r9
 800200e:	eb63 0301 	sbc.w	r3, r3, r1
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	f04f 0200 	mov.w	r2, #0
 8002018:	f04f 0300 	mov.w	r3, #0
 800201c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002020:	4659      	mov	r1, fp
 8002022:	018b      	lsls	r3, r1, #6
 8002024:	4651      	mov	r1, sl
 8002026:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800202a:	4651      	mov	r1, sl
 800202c:	018a      	lsls	r2, r1, #6
 800202e:	4651      	mov	r1, sl
 8002030:	1a54      	subs	r4, r2, r1
 8002032:	4659      	mov	r1, fp
 8002034:	eb63 0501 	sbc.w	r5, r3, r1
 8002038:	f04f 0200 	mov.w	r2, #0
 800203c:	f04f 0300 	mov.w	r3, #0
 8002040:	00eb      	lsls	r3, r5, #3
 8002042:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002046:	00e2      	lsls	r2, r4, #3
 8002048:	4614      	mov	r4, r2
 800204a:	461d      	mov	r5, r3
 800204c:	4643      	mov	r3, r8
 800204e:	18e3      	adds	r3, r4, r3
 8002050:	603b      	str	r3, [r7, #0]
 8002052:	464b      	mov	r3, r9
 8002054:	eb45 0303 	adc.w	r3, r5, r3
 8002058:	607b      	str	r3, [r7, #4]
 800205a:	f04f 0200 	mov.w	r2, #0
 800205e:	f04f 0300 	mov.w	r3, #0
 8002062:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002066:	4629      	mov	r1, r5
 8002068:	028b      	lsls	r3, r1, #10
 800206a:	4621      	mov	r1, r4
 800206c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002070:	4621      	mov	r1, r4
 8002072:	028a      	lsls	r2, r1, #10
 8002074:	4610      	mov	r0, r2
 8002076:	4619      	mov	r1, r3
 8002078:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800207c:	2200      	movs	r2, #0
 800207e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002080:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002082:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002086:	f7fe f8bd 	bl	8000204 <__aeabi_uldivmod>
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	4613      	mov	r3, r2
 8002090:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002094:	4b0d      	ldr	r3, [pc, #52]	; (80020cc <HAL_RCC_GetSysClockFreq+0x458>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	0f1b      	lsrs	r3, r3, #28
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80020a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80020a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80020aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80020b2:	e003      	b.n	80020bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020b4:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80020b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80020ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	37b8      	adds	r7, #184	; 0xb8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020ca:	bf00      	nop
 80020cc:	40023800 	.word	0x40023800
 80020d0:	00f42400 	.word	0x00f42400

080020d4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e28d      	b.n	8002602 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f000 8083 	beq.w	80021fa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80020f4:	4b94      	ldr	r3, [pc, #592]	; (8002348 <HAL_RCC_OscConfig+0x274>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f003 030c 	and.w	r3, r3, #12
 80020fc:	2b04      	cmp	r3, #4
 80020fe:	d019      	beq.n	8002134 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002100:	4b91      	ldr	r3, [pc, #580]	; (8002348 <HAL_RCC_OscConfig+0x274>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002108:	2b08      	cmp	r3, #8
 800210a:	d106      	bne.n	800211a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800210c:	4b8e      	ldr	r3, [pc, #568]	; (8002348 <HAL_RCC_OscConfig+0x274>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002114:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002118:	d00c      	beq.n	8002134 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800211a:	4b8b      	ldr	r3, [pc, #556]	; (8002348 <HAL_RCC_OscConfig+0x274>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002122:	2b0c      	cmp	r3, #12
 8002124:	d112      	bne.n	800214c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002126:	4b88      	ldr	r3, [pc, #544]	; (8002348 <HAL_RCC_OscConfig+0x274>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800212e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002132:	d10b      	bne.n	800214c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002134:	4b84      	ldr	r3, [pc, #528]	; (8002348 <HAL_RCC_OscConfig+0x274>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d05b      	beq.n	80021f8 <HAL_RCC_OscConfig+0x124>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d157      	bne.n	80021f8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e25a      	b.n	8002602 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002154:	d106      	bne.n	8002164 <HAL_RCC_OscConfig+0x90>
 8002156:	4b7c      	ldr	r3, [pc, #496]	; (8002348 <HAL_RCC_OscConfig+0x274>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a7b      	ldr	r2, [pc, #492]	; (8002348 <HAL_RCC_OscConfig+0x274>)
 800215c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002160:	6013      	str	r3, [r2, #0]
 8002162:	e01d      	b.n	80021a0 <HAL_RCC_OscConfig+0xcc>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800216c:	d10c      	bne.n	8002188 <HAL_RCC_OscConfig+0xb4>
 800216e:	4b76      	ldr	r3, [pc, #472]	; (8002348 <HAL_RCC_OscConfig+0x274>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a75      	ldr	r2, [pc, #468]	; (8002348 <HAL_RCC_OscConfig+0x274>)
 8002174:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002178:	6013      	str	r3, [r2, #0]
 800217a:	4b73      	ldr	r3, [pc, #460]	; (8002348 <HAL_RCC_OscConfig+0x274>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a72      	ldr	r2, [pc, #456]	; (8002348 <HAL_RCC_OscConfig+0x274>)
 8002180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002184:	6013      	str	r3, [r2, #0]
 8002186:	e00b      	b.n	80021a0 <HAL_RCC_OscConfig+0xcc>
 8002188:	4b6f      	ldr	r3, [pc, #444]	; (8002348 <HAL_RCC_OscConfig+0x274>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a6e      	ldr	r2, [pc, #440]	; (8002348 <HAL_RCC_OscConfig+0x274>)
 800218e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002192:	6013      	str	r3, [r2, #0]
 8002194:	4b6c      	ldr	r3, [pc, #432]	; (8002348 <HAL_RCC_OscConfig+0x274>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a6b      	ldr	r2, [pc, #428]	; (8002348 <HAL_RCC_OscConfig+0x274>)
 800219a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800219e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d013      	beq.n	80021d0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a8:	f7ff f986 	bl	80014b8 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021b0:	f7ff f982 	bl	80014b8 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b64      	cmp	r3, #100	; 0x64
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e21f      	b.n	8002602 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c2:	4b61      	ldr	r3, [pc, #388]	; (8002348 <HAL_RCC_OscConfig+0x274>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d0f0      	beq.n	80021b0 <HAL_RCC_OscConfig+0xdc>
 80021ce:	e014      	b.n	80021fa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d0:	f7ff f972 	bl	80014b8 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021d8:	f7ff f96e 	bl	80014b8 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b64      	cmp	r3, #100	; 0x64
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e20b      	b.n	8002602 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ea:	4b57      	ldr	r3, [pc, #348]	; (8002348 <HAL_RCC_OscConfig+0x274>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f0      	bne.n	80021d8 <HAL_RCC_OscConfig+0x104>
 80021f6:	e000      	b.n	80021fa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d06f      	beq.n	80022e6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002206:	4b50      	ldr	r3, [pc, #320]	; (8002348 <HAL_RCC_OscConfig+0x274>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 030c 	and.w	r3, r3, #12
 800220e:	2b00      	cmp	r3, #0
 8002210:	d017      	beq.n	8002242 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002212:	4b4d      	ldr	r3, [pc, #308]	; (8002348 <HAL_RCC_OscConfig+0x274>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800221a:	2b08      	cmp	r3, #8
 800221c:	d105      	bne.n	800222a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800221e:	4b4a      	ldr	r3, [pc, #296]	; (8002348 <HAL_RCC_OscConfig+0x274>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00b      	beq.n	8002242 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800222a:	4b47      	ldr	r3, [pc, #284]	; (8002348 <HAL_RCC_OscConfig+0x274>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002232:	2b0c      	cmp	r3, #12
 8002234:	d11c      	bne.n	8002270 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002236:	4b44      	ldr	r3, [pc, #272]	; (8002348 <HAL_RCC_OscConfig+0x274>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d116      	bne.n	8002270 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002242:	4b41      	ldr	r3, [pc, #260]	; (8002348 <HAL_RCC_OscConfig+0x274>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d005      	beq.n	800225a <HAL_RCC_OscConfig+0x186>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d001      	beq.n	800225a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e1d3      	b.n	8002602 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800225a:	4b3b      	ldr	r3, [pc, #236]	; (8002348 <HAL_RCC_OscConfig+0x274>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	4937      	ldr	r1, [pc, #220]	; (8002348 <HAL_RCC_OscConfig+0x274>)
 800226a:	4313      	orrs	r3, r2
 800226c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800226e:	e03a      	b.n	80022e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d020      	beq.n	80022ba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002278:	4b34      	ldr	r3, [pc, #208]	; (800234c <HAL_RCC_OscConfig+0x278>)
 800227a:	2201      	movs	r2, #1
 800227c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227e:	f7ff f91b 	bl	80014b8 <HAL_GetTick>
 8002282:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002284:	e008      	b.n	8002298 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002286:	f7ff f917 	bl	80014b8 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e1b4      	b.n	8002602 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002298:	4b2b      	ldr	r3, [pc, #172]	; (8002348 <HAL_RCC_OscConfig+0x274>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d0f0      	beq.n	8002286 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a4:	4b28      	ldr	r3, [pc, #160]	; (8002348 <HAL_RCC_OscConfig+0x274>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	4925      	ldr	r1, [pc, #148]	; (8002348 <HAL_RCC_OscConfig+0x274>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	600b      	str	r3, [r1, #0]
 80022b8:	e015      	b.n	80022e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ba:	4b24      	ldr	r3, [pc, #144]	; (800234c <HAL_RCC_OscConfig+0x278>)
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c0:	f7ff f8fa 	bl	80014b8 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022c8:	f7ff f8f6 	bl	80014b8 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e193      	b.n	8002602 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022da:	4b1b      	ldr	r3, [pc, #108]	; (8002348 <HAL_RCC_OscConfig+0x274>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f0      	bne.n	80022c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0308 	and.w	r3, r3, #8
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d036      	beq.n	8002360 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d016      	beq.n	8002328 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022fa:	4b15      	ldr	r3, [pc, #84]	; (8002350 <HAL_RCC_OscConfig+0x27c>)
 80022fc:	2201      	movs	r2, #1
 80022fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002300:	f7ff f8da 	bl	80014b8 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002308:	f7ff f8d6 	bl	80014b8 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e173      	b.n	8002602 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800231a:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <HAL_RCC_OscConfig+0x274>)
 800231c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d0f0      	beq.n	8002308 <HAL_RCC_OscConfig+0x234>
 8002326:	e01b      	b.n	8002360 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002328:	4b09      	ldr	r3, [pc, #36]	; (8002350 <HAL_RCC_OscConfig+0x27c>)
 800232a:	2200      	movs	r2, #0
 800232c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800232e:	f7ff f8c3 	bl	80014b8 <HAL_GetTick>
 8002332:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002334:	e00e      	b.n	8002354 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002336:	f7ff f8bf 	bl	80014b8 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d907      	bls.n	8002354 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e15c      	b.n	8002602 <HAL_RCC_OscConfig+0x52e>
 8002348:	40023800 	.word	0x40023800
 800234c:	42470000 	.word	0x42470000
 8002350:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002354:	4b8a      	ldr	r3, [pc, #552]	; (8002580 <HAL_RCC_OscConfig+0x4ac>)
 8002356:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1ea      	bne.n	8002336 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 8097 	beq.w	800249c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800236e:	2300      	movs	r3, #0
 8002370:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002372:	4b83      	ldr	r3, [pc, #524]	; (8002580 <HAL_RCC_OscConfig+0x4ac>)
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10f      	bne.n	800239e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	60bb      	str	r3, [r7, #8]
 8002382:	4b7f      	ldr	r3, [pc, #508]	; (8002580 <HAL_RCC_OscConfig+0x4ac>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	4a7e      	ldr	r2, [pc, #504]	; (8002580 <HAL_RCC_OscConfig+0x4ac>)
 8002388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800238c:	6413      	str	r3, [r2, #64]	; 0x40
 800238e:	4b7c      	ldr	r3, [pc, #496]	; (8002580 <HAL_RCC_OscConfig+0x4ac>)
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002396:	60bb      	str	r3, [r7, #8]
 8002398:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800239a:	2301      	movs	r3, #1
 800239c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239e:	4b79      	ldr	r3, [pc, #484]	; (8002584 <HAL_RCC_OscConfig+0x4b0>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d118      	bne.n	80023dc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023aa:	4b76      	ldr	r3, [pc, #472]	; (8002584 <HAL_RCC_OscConfig+0x4b0>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a75      	ldr	r2, [pc, #468]	; (8002584 <HAL_RCC_OscConfig+0x4b0>)
 80023b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023b6:	f7ff f87f 	bl	80014b8 <HAL_GetTick>
 80023ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023bc:	e008      	b.n	80023d0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023be:	f7ff f87b 	bl	80014b8 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e118      	b.n	8002602 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d0:	4b6c      	ldr	r3, [pc, #432]	; (8002584 <HAL_RCC_OscConfig+0x4b0>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0f0      	beq.n	80023be <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d106      	bne.n	80023f2 <HAL_RCC_OscConfig+0x31e>
 80023e4:	4b66      	ldr	r3, [pc, #408]	; (8002580 <HAL_RCC_OscConfig+0x4ac>)
 80023e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e8:	4a65      	ldr	r2, [pc, #404]	; (8002580 <HAL_RCC_OscConfig+0x4ac>)
 80023ea:	f043 0301 	orr.w	r3, r3, #1
 80023ee:	6713      	str	r3, [r2, #112]	; 0x70
 80023f0:	e01c      	b.n	800242c <HAL_RCC_OscConfig+0x358>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	2b05      	cmp	r3, #5
 80023f8:	d10c      	bne.n	8002414 <HAL_RCC_OscConfig+0x340>
 80023fa:	4b61      	ldr	r3, [pc, #388]	; (8002580 <HAL_RCC_OscConfig+0x4ac>)
 80023fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fe:	4a60      	ldr	r2, [pc, #384]	; (8002580 <HAL_RCC_OscConfig+0x4ac>)
 8002400:	f043 0304 	orr.w	r3, r3, #4
 8002404:	6713      	str	r3, [r2, #112]	; 0x70
 8002406:	4b5e      	ldr	r3, [pc, #376]	; (8002580 <HAL_RCC_OscConfig+0x4ac>)
 8002408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800240a:	4a5d      	ldr	r2, [pc, #372]	; (8002580 <HAL_RCC_OscConfig+0x4ac>)
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	6713      	str	r3, [r2, #112]	; 0x70
 8002412:	e00b      	b.n	800242c <HAL_RCC_OscConfig+0x358>
 8002414:	4b5a      	ldr	r3, [pc, #360]	; (8002580 <HAL_RCC_OscConfig+0x4ac>)
 8002416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002418:	4a59      	ldr	r2, [pc, #356]	; (8002580 <HAL_RCC_OscConfig+0x4ac>)
 800241a:	f023 0301 	bic.w	r3, r3, #1
 800241e:	6713      	str	r3, [r2, #112]	; 0x70
 8002420:	4b57      	ldr	r3, [pc, #348]	; (8002580 <HAL_RCC_OscConfig+0x4ac>)
 8002422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002424:	4a56      	ldr	r2, [pc, #344]	; (8002580 <HAL_RCC_OscConfig+0x4ac>)
 8002426:	f023 0304 	bic.w	r3, r3, #4
 800242a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d015      	beq.n	8002460 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002434:	f7ff f840 	bl	80014b8 <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800243a:	e00a      	b.n	8002452 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800243c:	f7ff f83c 	bl	80014b8 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	f241 3288 	movw	r2, #5000	; 0x1388
 800244a:	4293      	cmp	r3, r2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e0d7      	b.n	8002602 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002452:	4b4b      	ldr	r3, [pc, #300]	; (8002580 <HAL_RCC_OscConfig+0x4ac>)
 8002454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d0ee      	beq.n	800243c <HAL_RCC_OscConfig+0x368>
 800245e:	e014      	b.n	800248a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002460:	f7ff f82a 	bl	80014b8 <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002466:	e00a      	b.n	800247e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002468:	f7ff f826 	bl	80014b8 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	f241 3288 	movw	r2, #5000	; 0x1388
 8002476:	4293      	cmp	r3, r2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e0c1      	b.n	8002602 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800247e:	4b40      	ldr	r3, [pc, #256]	; (8002580 <HAL_RCC_OscConfig+0x4ac>)
 8002480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1ee      	bne.n	8002468 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800248a:	7dfb      	ldrb	r3, [r7, #23]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d105      	bne.n	800249c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002490:	4b3b      	ldr	r3, [pc, #236]	; (8002580 <HAL_RCC_OscConfig+0x4ac>)
 8002492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002494:	4a3a      	ldr	r2, [pc, #232]	; (8002580 <HAL_RCC_OscConfig+0x4ac>)
 8002496:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800249a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f000 80ad 	beq.w	8002600 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024a6:	4b36      	ldr	r3, [pc, #216]	; (8002580 <HAL_RCC_OscConfig+0x4ac>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 030c 	and.w	r3, r3, #12
 80024ae:	2b08      	cmp	r3, #8
 80024b0:	d060      	beq.n	8002574 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d145      	bne.n	8002546 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ba:	4b33      	ldr	r3, [pc, #204]	; (8002588 <HAL_RCC_OscConfig+0x4b4>)
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c0:	f7fe fffa 	bl	80014b8 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024c8:	f7fe fff6 	bl	80014b8 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e093      	b.n	8002602 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024da:	4b29      	ldr	r3, [pc, #164]	; (8002580 <HAL_RCC_OscConfig+0x4ac>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1f0      	bne.n	80024c8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	69da      	ldr	r2, [r3, #28]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	431a      	orrs	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f4:	019b      	lsls	r3, r3, #6
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fc:	085b      	lsrs	r3, r3, #1
 80024fe:	3b01      	subs	r3, #1
 8002500:	041b      	lsls	r3, r3, #16
 8002502:	431a      	orrs	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002508:	061b      	lsls	r3, r3, #24
 800250a:	431a      	orrs	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002510:	071b      	lsls	r3, r3, #28
 8002512:	491b      	ldr	r1, [pc, #108]	; (8002580 <HAL_RCC_OscConfig+0x4ac>)
 8002514:	4313      	orrs	r3, r2
 8002516:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002518:	4b1b      	ldr	r3, [pc, #108]	; (8002588 <HAL_RCC_OscConfig+0x4b4>)
 800251a:	2201      	movs	r2, #1
 800251c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800251e:	f7fe ffcb 	bl	80014b8 <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002526:	f7fe ffc7 	bl	80014b8 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e064      	b.n	8002602 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002538:	4b11      	ldr	r3, [pc, #68]	; (8002580 <HAL_RCC_OscConfig+0x4ac>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d0f0      	beq.n	8002526 <HAL_RCC_OscConfig+0x452>
 8002544:	e05c      	b.n	8002600 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002546:	4b10      	ldr	r3, [pc, #64]	; (8002588 <HAL_RCC_OscConfig+0x4b4>)
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254c:	f7fe ffb4 	bl	80014b8 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002554:	f7fe ffb0 	bl	80014b8 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e04d      	b.n	8002602 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002566:	4b06      	ldr	r3, [pc, #24]	; (8002580 <HAL_RCC_OscConfig+0x4ac>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1f0      	bne.n	8002554 <HAL_RCC_OscConfig+0x480>
 8002572:	e045      	b.n	8002600 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d107      	bne.n	800258c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e040      	b.n	8002602 <HAL_RCC_OscConfig+0x52e>
 8002580:	40023800 	.word	0x40023800
 8002584:	40007000 	.word	0x40007000
 8002588:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800258c:	4b1f      	ldr	r3, [pc, #124]	; (800260c <HAL_RCC_OscConfig+0x538>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d030      	beq.n	80025fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d129      	bne.n	80025fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d122      	bne.n	80025fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025bc:	4013      	ands	r3, r2
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d119      	bne.n	80025fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d2:	085b      	lsrs	r3, r3, #1
 80025d4:	3b01      	subs	r3, #1
 80025d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025d8:	429a      	cmp	r2, r3
 80025da:	d10f      	bne.n	80025fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d107      	bne.n	80025fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d001      	beq.n	8002600 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e000      	b.n	8002602 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3718      	adds	r7, #24
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40023800 	.word	0x40023800

08002610 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e07b      	b.n	800271a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002626:	2b00      	cmp	r3, #0
 8002628:	d108      	bne.n	800263c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002632:	d009      	beq.n	8002648 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	61da      	str	r2, [r3, #28]
 800263a:	e005      	b.n	8002648 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d106      	bne.n	8002668 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7fe fdb4 	bl	80011d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2202      	movs	r2, #2
 800266c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800267e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002690:	431a      	orrs	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800269a:	431a      	orrs	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	431a      	orrs	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	431a      	orrs	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026b8:	431a      	orrs	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026c2:	431a      	orrs	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026cc:	ea42 0103 	orr.w	r1, r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	430a      	orrs	r2, r1
 80026de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	0c1b      	lsrs	r3, r3, #16
 80026e6:	f003 0104 	and.w	r1, r3, #4
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ee:	f003 0210 	and.w	r2, r3, #16
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	69da      	ldr	r2, [r3, #28]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002708:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b088      	sub	sp, #32
 8002726:	af00      	add	r7, sp, #0
 8002728:	60f8      	str	r0, [r7, #12]
 800272a:	60b9      	str	r1, [r7, #8]
 800272c:	603b      	str	r3, [r7, #0]
 800272e:	4613      	mov	r3, r2
 8002730:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002732:	2300      	movs	r3, #0
 8002734:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800273c:	2b01      	cmp	r3, #1
 800273e:	d101      	bne.n	8002744 <HAL_SPI_Transmit+0x22>
 8002740:	2302      	movs	r3, #2
 8002742:	e126      	b.n	8002992 <HAL_SPI_Transmit+0x270>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800274c:	f7fe feb4 	bl	80014b8 <HAL_GetTick>
 8002750:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002752:	88fb      	ldrh	r3, [r7, #6]
 8002754:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b01      	cmp	r3, #1
 8002760:	d002      	beq.n	8002768 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002762:	2302      	movs	r3, #2
 8002764:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002766:	e10b      	b.n	8002980 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d002      	beq.n	8002774 <HAL_SPI_Transmit+0x52>
 800276e:	88fb      	ldrh	r3, [r7, #6]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d102      	bne.n	800277a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002778:	e102      	b.n	8002980 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2203      	movs	r2, #3
 800277e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	68ba      	ldr	r2, [r7, #8]
 800278c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	88fa      	ldrh	r2, [r7, #6]
 8002792:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	88fa      	ldrh	r2, [r7, #6]
 8002798:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2200      	movs	r2, #0
 80027a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027c0:	d10f      	bne.n	80027e2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ec:	2b40      	cmp	r3, #64	; 0x40
 80027ee:	d007      	beq.n	8002800 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002808:	d14b      	bne.n	80028a2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d002      	beq.n	8002818 <HAL_SPI_Transmit+0xf6>
 8002812:	8afb      	ldrh	r3, [r7, #22]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d13e      	bne.n	8002896 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281c:	881a      	ldrh	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002828:	1c9a      	adds	r2, r3, #2
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002832:	b29b      	uxth	r3, r3
 8002834:	3b01      	subs	r3, #1
 8002836:	b29a      	uxth	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800283c:	e02b      	b.n	8002896 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b02      	cmp	r3, #2
 800284a:	d112      	bne.n	8002872 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002850:	881a      	ldrh	r2, [r3, #0]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285c:	1c9a      	adds	r2, r3, #2
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002866:	b29b      	uxth	r3, r3
 8002868:	3b01      	subs	r3, #1
 800286a:	b29a      	uxth	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002870:	e011      	b.n	8002896 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002872:	f7fe fe21 	bl	80014b8 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	429a      	cmp	r2, r3
 8002880:	d803      	bhi.n	800288a <HAL_SPI_Transmit+0x168>
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002888:	d102      	bne.n	8002890 <HAL_SPI_Transmit+0x16e>
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d102      	bne.n	8002896 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002894:	e074      	b.n	8002980 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800289a:	b29b      	uxth	r3, r3
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1ce      	bne.n	800283e <HAL_SPI_Transmit+0x11c>
 80028a0:	e04c      	b.n	800293c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d002      	beq.n	80028b0 <HAL_SPI_Transmit+0x18e>
 80028aa:	8afb      	ldrh	r3, [r7, #22]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d140      	bne.n	8002932 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	330c      	adds	r3, #12
 80028ba:	7812      	ldrb	r2, [r2, #0]
 80028bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	1c5a      	adds	r2, r3, #1
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	3b01      	subs	r3, #1
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80028d6:	e02c      	b.n	8002932 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d113      	bne.n	800290e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	330c      	adds	r3, #12
 80028f0:	7812      	ldrb	r2, [r2, #0]
 80028f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f8:	1c5a      	adds	r2, r3, #1
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002902:	b29b      	uxth	r3, r3
 8002904:	3b01      	subs	r3, #1
 8002906:	b29a      	uxth	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	86da      	strh	r2, [r3, #54]	; 0x36
 800290c:	e011      	b.n	8002932 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800290e:	f7fe fdd3 	bl	80014b8 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	429a      	cmp	r2, r3
 800291c:	d803      	bhi.n	8002926 <HAL_SPI_Transmit+0x204>
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002924:	d102      	bne.n	800292c <HAL_SPI_Transmit+0x20a>
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d102      	bne.n	8002932 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002930:	e026      	b.n	8002980 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002936:	b29b      	uxth	r3, r3
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1cd      	bne.n	80028d8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	6839      	ldr	r1, [r7, #0]
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f000 fa55 	bl	8002df0 <SPI_EndRxTxTransaction>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d002      	beq.n	8002952 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2220      	movs	r2, #32
 8002950:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10a      	bne.n	8002970 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800295a:	2300      	movs	r3, #0
 800295c:	613b      	str	r3, [r7, #16]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	613b      	str	r3, [r7, #16]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	613b      	str	r3, [r7, #16]
 800296e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002974:	2b00      	cmp	r3, #0
 8002976:	d002      	beq.n	800297e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	77fb      	strb	r3, [r7, #31]
 800297c:	e000      	b.n	8002980 <HAL_SPI_Transmit+0x25e>
  }

error:
 800297e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002990:	7ffb      	ldrb	r3, [r7, #31]
}
 8002992:	4618      	mov	r0, r3
 8002994:	3720      	adds	r7, #32
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b08c      	sub	sp, #48	; 0x30
 800299e:	af00      	add	r7, sp, #0
 80029a0:	60f8      	str	r0, [r7, #12]
 80029a2:	60b9      	str	r1, [r7, #8]
 80029a4:	607a      	str	r2, [r7, #4]
 80029a6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80029a8:	2301      	movs	r3, #1
 80029aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80029ac:	2300      	movs	r3, #0
 80029ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d101      	bne.n	80029c0 <HAL_SPI_TransmitReceive+0x26>
 80029bc:	2302      	movs	r3, #2
 80029be:	e18a      	b.n	8002cd6 <HAL_SPI_TransmitReceive+0x33c>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029c8:	f7fe fd76 	bl	80014b8 <HAL_GetTick>
 80029cc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80029de:	887b      	ldrh	r3, [r7, #2]
 80029e0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80029e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d00f      	beq.n	8002a0a <HAL_SPI_TransmitReceive+0x70>
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029f0:	d107      	bne.n	8002a02 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d103      	bne.n	8002a02 <HAL_SPI_TransmitReceive+0x68>
 80029fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80029fe:	2b04      	cmp	r3, #4
 8002a00:	d003      	beq.n	8002a0a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002a02:	2302      	movs	r3, #2
 8002a04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002a08:	e15b      	b.n	8002cc2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d005      	beq.n	8002a1c <HAL_SPI_TransmitReceive+0x82>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d002      	beq.n	8002a1c <HAL_SPI_TransmitReceive+0x82>
 8002a16:	887b      	ldrh	r3, [r7, #2]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d103      	bne.n	8002a24 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002a22:	e14e      	b.n	8002cc2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b04      	cmp	r3, #4
 8002a2e:	d003      	beq.n	8002a38 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2205      	movs	r2, #5
 8002a34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	887a      	ldrh	r2, [r7, #2]
 8002a48:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	887a      	ldrh	r2, [r7, #2]
 8002a4e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	887a      	ldrh	r2, [r7, #2]
 8002a5a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	887a      	ldrh	r2, [r7, #2]
 8002a60:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a78:	2b40      	cmp	r3, #64	; 0x40
 8002a7a:	d007      	beq.n	8002a8c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a94:	d178      	bne.n	8002b88 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d002      	beq.n	8002aa4 <HAL_SPI_TransmitReceive+0x10a>
 8002a9e:	8b7b      	ldrh	r3, [r7, #26]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d166      	bne.n	8002b72 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa8:	881a      	ldrh	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab4:	1c9a      	adds	r2, r3, #2
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ac8:	e053      	b.n	8002b72 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d11b      	bne.n	8002b10 <HAL_SPI_TransmitReceive+0x176>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d016      	beq.n	8002b10 <HAL_SPI_TransmitReceive+0x176>
 8002ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d113      	bne.n	8002b10 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aec:	881a      	ldrh	r2, [r3, #0]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af8:	1c9a      	adds	r2, r3, #2
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	3b01      	subs	r3, #1
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d119      	bne.n	8002b52 <HAL_SPI_TransmitReceive+0x1b8>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d014      	beq.n	8002b52 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68da      	ldr	r2, [r3, #12]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b32:	b292      	uxth	r2, r2
 8002b34:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3a:	1c9a      	adds	r2, r3, #2
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	3b01      	subs	r3, #1
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002b52:	f7fe fcb1 	bl	80014b8 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d807      	bhi.n	8002b72 <HAL_SPI_TransmitReceive+0x1d8>
 8002b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b68:	d003      	beq.n	8002b72 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002b70:	e0a7      	b.n	8002cc2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1a6      	bne.n	8002aca <HAL_SPI_TransmitReceive+0x130>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1a1      	bne.n	8002aca <HAL_SPI_TransmitReceive+0x130>
 8002b86:	e07c      	b.n	8002c82 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d002      	beq.n	8002b96 <HAL_SPI_TransmitReceive+0x1fc>
 8002b90:	8b7b      	ldrh	r3, [r7, #26]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d16b      	bne.n	8002c6e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	330c      	adds	r3, #12
 8002ba0:	7812      	ldrb	r2, [r2, #0]
 8002ba2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba8:	1c5a      	adds	r2, r3, #1
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bbc:	e057      	b.n	8002c6e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d11c      	bne.n	8002c06 <HAL_SPI_TransmitReceive+0x26c>
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d017      	beq.n	8002c06 <HAL_SPI_TransmitReceive+0x26c>
 8002bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d114      	bne.n	8002c06 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	330c      	adds	r3, #12
 8002be6:	7812      	ldrb	r2, [r2, #0]
 8002be8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	1c5a      	adds	r2, r3, #1
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c02:	2300      	movs	r3, #0
 8002c04:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d119      	bne.n	8002c48 <HAL_SPI_TransmitReceive+0x2ae>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d014      	beq.n	8002c48 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68da      	ldr	r2, [r3, #12]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c28:	b2d2      	uxtb	r2, r2
 8002c2a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c30:	1c5a      	adds	r2, r3, #1
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c44:	2301      	movs	r3, #1
 8002c46:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002c48:	f7fe fc36 	bl	80014b8 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d803      	bhi.n	8002c60 <HAL_SPI_TransmitReceive+0x2c6>
 8002c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c5e:	d102      	bne.n	8002c66 <HAL_SPI_TransmitReceive+0x2cc>
 8002c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d103      	bne.n	8002c6e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002c6c:	e029      	b.n	8002cc2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1a2      	bne.n	8002bbe <HAL_SPI_TransmitReceive+0x224>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d19d      	bne.n	8002bbe <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f000 f8b2 	bl	8002df0 <SPI_EndRxTxTransaction>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d006      	beq.n	8002ca0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002c9e:	e010      	b.n	8002cc2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d10b      	bne.n	8002cc0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ca8:	2300      	movs	r3, #0
 8002caa:	617b      	str	r3, [r7, #20]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	617b      	str	r3, [r7, #20]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	617b      	str	r3, [r7, #20]
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	e000      	b.n	8002cc2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002cc0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002cd2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3730      	adds	r7, #48	; 0x30
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
	...

08002ce0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b088      	sub	sp, #32
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	603b      	str	r3, [r7, #0]
 8002cec:	4613      	mov	r3, r2
 8002cee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002cf0:	f7fe fbe2 	bl	80014b8 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf8:	1a9b      	subs	r3, r3, r2
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d00:	f7fe fbda 	bl	80014b8 <HAL_GetTick>
 8002d04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d06:	4b39      	ldr	r3, [pc, #228]	; (8002dec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	015b      	lsls	r3, r3, #5
 8002d0c:	0d1b      	lsrs	r3, r3, #20
 8002d0e:	69fa      	ldr	r2, [r7, #28]
 8002d10:	fb02 f303 	mul.w	r3, r2, r3
 8002d14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d16:	e054      	b.n	8002dc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d1e:	d050      	beq.n	8002dc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d20:	f7fe fbca 	bl	80014b8 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	69fa      	ldr	r2, [r7, #28]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d902      	bls.n	8002d36 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d13d      	bne.n	8002db2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d4e:	d111      	bne.n	8002d74 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d58:	d004      	beq.n	8002d64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d62:	d107      	bne.n	8002d74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d7c:	d10f      	bne.n	8002d9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e017      	b.n	8002de2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002db8:	2300      	movs	r3, #0
 8002dba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	68ba      	ldr	r2, [r7, #8]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	bf0c      	ite	eq
 8002dd2:	2301      	moveq	r3, #1
 8002dd4:	2300      	movne	r3, #0
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	461a      	mov	r2, r3
 8002dda:	79fb      	ldrb	r3, [r7, #7]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d19b      	bne.n	8002d18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3720      	adds	r7, #32
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	20000004 	.word	0x20000004

08002df0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b088      	sub	sp, #32
 8002df4:	af02      	add	r7, sp, #8
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002dfc:	4b1b      	ldr	r3, [pc, #108]	; (8002e6c <SPI_EndRxTxTransaction+0x7c>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a1b      	ldr	r2, [pc, #108]	; (8002e70 <SPI_EndRxTxTransaction+0x80>)
 8002e02:	fba2 2303 	umull	r2, r3, r2, r3
 8002e06:	0d5b      	lsrs	r3, r3, #21
 8002e08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e0c:	fb02 f303 	mul.w	r3, r2, r3
 8002e10:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e1a:	d112      	bne.n	8002e42 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	9300      	str	r3, [sp, #0]
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	2200      	movs	r2, #0
 8002e24:	2180      	movs	r1, #128	; 0x80
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f7ff ff5a 	bl	8002ce0 <SPI_WaitFlagStateUntilTimeout>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d016      	beq.n	8002e60 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e36:	f043 0220 	orr.w	r2, r3, #32
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e00f      	b.n	8002e62 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00a      	beq.n	8002e5e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e58:	2b80      	cmp	r3, #128	; 0x80
 8002e5a:	d0f2      	beq.n	8002e42 <SPI_EndRxTxTransaction+0x52>
 8002e5c:	e000      	b.n	8002e60 <SPI_EndRxTxTransaction+0x70>
        break;
 8002e5e:	bf00      	nop
  }

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3718      	adds	r7, #24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	20000004 	.word	0x20000004
 8002e70:	165e9f81 	.word	0x165e9f81

08002e74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e03f      	b.n	8002f06 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d106      	bne.n	8002ea0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7fe f9e0 	bl	8001260 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2224      	movs	r2, #36	; 0x24
 8002ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68da      	ldr	r2, [r3, #12]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002eb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 f829 	bl	8002f10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	691a      	ldr	r2, [r3, #16]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ecc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	695a      	ldr	r2, [r3, #20]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002edc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68da      	ldr	r2, [r3, #12]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002eec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2220      	movs	r2, #32
 8002f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
	...

08002f10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f14:	b0c0      	sub	sp, #256	; 0x100
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f2c:	68d9      	ldr	r1, [r3, #12]
 8002f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	ea40 0301 	orr.w	r3, r0, r1
 8002f38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	431a      	orrs	r2, r3
 8002f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f68:	f021 010c 	bic.w	r1, r1, #12
 8002f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002f76:	430b      	orrs	r3, r1
 8002f78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f8a:	6999      	ldr	r1, [r3, #24]
 8002f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	ea40 0301 	orr.w	r3, r0, r1
 8002f96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	4b8f      	ldr	r3, [pc, #572]	; (80031dc <UART_SetConfig+0x2cc>)
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d005      	beq.n	8002fb0 <UART_SetConfig+0xa0>
 8002fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	4b8d      	ldr	r3, [pc, #564]	; (80031e0 <UART_SetConfig+0x2d0>)
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d104      	bne.n	8002fba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002fb0:	f7fe fe4c 	bl	8001c4c <HAL_RCC_GetPCLK2Freq>
 8002fb4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002fb8:	e003      	b.n	8002fc2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002fba:	f7fe fe33 	bl	8001c24 <HAL_RCC_GetPCLK1Freq>
 8002fbe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fc6:	69db      	ldr	r3, [r3, #28]
 8002fc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fcc:	f040 810c 	bne.w	80031e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002fda:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002fde:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002fe2:	4622      	mov	r2, r4
 8002fe4:	462b      	mov	r3, r5
 8002fe6:	1891      	adds	r1, r2, r2
 8002fe8:	65b9      	str	r1, [r7, #88]	; 0x58
 8002fea:	415b      	adcs	r3, r3
 8002fec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002ff2:	4621      	mov	r1, r4
 8002ff4:	eb12 0801 	adds.w	r8, r2, r1
 8002ff8:	4629      	mov	r1, r5
 8002ffa:	eb43 0901 	adc.w	r9, r3, r1
 8002ffe:	f04f 0200 	mov.w	r2, #0
 8003002:	f04f 0300 	mov.w	r3, #0
 8003006:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800300a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800300e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003012:	4690      	mov	r8, r2
 8003014:	4699      	mov	r9, r3
 8003016:	4623      	mov	r3, r4
 8003018:	eb18 0303 	adds.w	r3, r8, r3
 800301c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003020:	462b      	mov	r3, r5
 8003022:	eb49 0303 	adc.w	r3, r9, r3
 8003026:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800302a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003036:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800303a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800303e:	460b      	mov	r3, r1
 8003040:	18db      	adds	r3, r3, r3
 8003042:	653b      	str	r3, [r7, #80]	; 0x50
 8003044:	4613      	mov	r3, r2
 8003046:	eb42 0303 	adc.w	r3, r2, r3
 800304a:	657b      	str	r3, [r7, #84]	; 0x54
 800304c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003050:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003054:	f7fd f8d6 	bl	8000204 <__aeabi_uldivmod>
 8003058:	4602      	mov	r2, r0
 800305a:	460b      	mov	r3, r1
 800305c:	4b61      	ldr	r3, [pc, #388]	; (80031e4 <UART_SetConfig+0x2d4>)
 800305e:	fba3 2302 	umull	r2, r3, r3, r2
 8003062:	095b      	lsrs	r3, r3, #5
 8003064:	011c      	lsls	r4, r3, #4
 8003066:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800306a:	2200      	movs	r2, #0
 800306c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003070:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003074:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003078:	4642      	mov	r2, r8
 800307a:	464b      	mov	r3, r9
 800307c:	1891      	adds	r1, r2, r2
 800307e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003080:	415b      	adcs	r3, r3
 8003082:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003084:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003088:	4641      	mov	r1, r8
 800308a:	eb12 0a01 	adds.w	sl, r2, r1
 800308e:	4649      	mov	r1, r9
 8003090:	eb43 0b01 	adc.w	fp, r3, r1
 8003094:	f04f 0200 	mov.w	r2, #0
 8003098:	f04f 0300 	mov.w	r3, #0
 800309c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80030a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80030a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030a8:	4692      	mov	sl, r2
 80030aa:	469b      	mov	fp, r3
 80030ac:	4643      	mov	r3, r8
 80030ae:	eb1a 0303 	adds.w	r3, sl, r3
 80030b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80030b6:	464b      	mov	r3, r9
 80030b8:	eb4b 0303 	adc.w	r3, fp, r3
 80030bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80030c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80030d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80030d4:	460b      	mov	r3, r1
 80030d6:	18db      	adds	r3, r3, r3
 80030d8:	643b      	str	r3, [r7, #64]	; 0x40
 80030da:	4613      	mov	r3, r2
 80030dc:	eb42 0303 	adc.w	r3, r2, r3
 80030e0:	647b      	str	r3, [r7, #68]	; 0x44
 80030e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80030e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80030ea:	f7fd f88b 	bl	8000204 <__aeabi_uldivmod>
 80030ee:	4602      	mov	r2, r0
 80030f0:	460b      	mov	r3, r1
 80030f2:	4611      	mov	r1, r2
 80030f4:	4b3b      	ldr	r3, [pc, #236]	; (80031e4 <UART_SetConfig+0x2d4>)
 80030f6:	fba3 2301 	umull	r2, r3, r3, r1
 80030fa:	095b      	lsrs	r3, r3, #5
 80030fc:	2264      	movs	r2, #100	; 0x64
 80030fe:	fb02 f303 	mul.w	r3, r2, r3
 8003102:	1acb      	subs	r3, r1, r3
 8003104:	00db      	lsls	r3, r3, #3
 8003106:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800310a:	4b36      	ldr	r3, [pc, #216]	; (80031e4 <UART_SetConfig+0x2d4>)
 800310c:	fba3 2302 	umull	r2, r3, r3, r2
 8003110:	095b      	lsrs	r3, r3, #5
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003118:	441c      	add	r4, r3
 800311a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800311e:	2200      	movs	r2, #0
 8003120:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003124:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003128:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800312c:	4642      	mov	r2, r8
 800312e:	464b      	mov	r3, r9
 8003130:	1891      	adds	r1, r2, r2
 8003132:	63b9      	str	r1, [r7, #56]	; 0x38
 8003134:	415b      	adcs	r3, r3
 8003136:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003138:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800313c:	4641      	mov	r1, r8
 800313e:	1851      	adds	r1, r2, r1
 8003140:	6339      	str	r1, [r7, #48]	; 0x30
 8003142:	4649      	mov	r1, r9
 8003144:	414b      	adcs	r3, r1
 8003146:	637b      	str	r3, [r7, #52]	; 0x34
 8003148:	f04f 0200 	mov.w	r2, #0
 800314c:	f04f 0300 	mov.w	r3, #0
 8003150:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003154:	4659      	mov	r1, fp
 8003156:	00cb      	lsls	r3, r1, #3
 8003158:	4651      	mov	r1, sl
 800315a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800315e:	4651      	mov	r1, sl
 8003160:	00ca      	lsls	r2, r1, #3
 8003162:	4610      	mov	r0, r2
 8003164:	4619      	mov	r1, r3
 8003166:	4603      	mov	r3, r0
 8003168:	4642      	mov	r2, r8
 800316a:	189b      	adds	r3, r3, r2
 800316c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003170:	464b      	mov	r3, r9
 8003172:	460a      	mov	r2, r1
 8003174:	eb42 0303 	adc.w	r3, r2, r3
 8003178:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800317c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003188:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800318c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003190:	460b      	mov	r3, r1
 8003192:	18db      	adds	r3, r3, r3
 8003194:	62bb      	str	r3, [r7, #40]	; 0x28
 8003196:	4613      	mov	r3, r2
 8003198:	eb42 0303 	adc.w	r3, r2, r3
 800319c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800319e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80031a6:	f7fd f82d 	bl	8000204 <__aeabi_uldivmod>
 80031aa:	4602      	mov	r2, r0
 80031ac:	460b      	mov	r3, r1
 80031ae:	4b0d      	ldr	r3, [pc, #52]	; (80031e4 <UART_SetConfig+0x2d4>)
 80031b0:	fba3 1302 	umull	r1, r3, r3, r2
 80031b4:	095b      	lsrs	r3, r3, #5
 80031b6:	2164      	movs	r1, #100	; 0x64
 80031b8:	fb01 f303 	mul.w	r3, r1, r3
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	3332      	adds	r3, #50	; 0x32
 80031c2:	4a08      	ldr	r2, [pc, #32]	; (80031e4 <UART_SetConfig+0x2d4>)
 80031c4:	fba2 2303 	umull	r2, r3, r2, r3
 80031c8:	095b      	lsrs	r3, r3, #5
 80031ca:	f003 0207 	and.w	r2, r3, #7
 80031ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4422      	add	r2, r4
 80031d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80031d8:	e106      	b.n	80033e8 <UART_SetConfig+0x4d8>
 80031da:	bf00      	nop
 80031dc:	40011000 	.word	0x40011000
 80031e0:	40011400 	.word	0x40011400
 80031e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031ec:	2200      	movs	r2, #0
 80031ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80031f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80031f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80031fa:	4642      	mov	r2, r8
 80031fc:	464b      	mov	r3, r9
 80031fe:	1891      	adds	r1, r2, r2
 8003200:	6239      	str	r1, [r7, #32]
 8003202:	415b      	adcs	r3, r3
 8003204:	627b      	str	r3, [r7, #36]	; 0x24
 8003206:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800320a:	4641      	mov	r1, r8
 800320c:	1854      	adds	r4, r2, r1
 800320e:	4649      	mov	r1, r9
 8003210:	eb43 0501 	adc.w	r5, r3, r1
 8003214:	f04f 0200 	mov.w	r2, #0
 8003218:	f04f 0300 	mov.w	r3, #0
 800321c:	00eb      	lsls	r3, r5, #3
 800321e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003222:	00e2      	lsls	r2, r4, #3
 8003224:	4614      	mov	r4, r2
 8003226:	461d      	mov	r5, r3
 8003228:	4643      	mov	r3, r8
 800322a:	18e3      	adds	r3, r4, r3
 800322c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003230:	464b      	mov	r3, r9
 8003232:	eb45 0303 	adc.w	r3, r5, r3
 8003236:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800323a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003246:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800324a:	f04f 0200 	mov.w	r2, #0
 800324e:	f04f 0300 	mov.w	r3, #0
 8003252:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003256:	4629      	mov	r1, r5
 8003258:	008b      	lsls	r3, r1, #2
 800325a:	4621      	mov	r1, r4
 800325c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003260:	4621      	mov	r1, r4
 8003262:	008a      	lsls	r2, r1, #2
 8003264:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003268:	f7fc ffcc 	bl	8000204 <__aeabi_uldivmod>
 800326c:	4602      	mov	r2, r0
 800326e:	460b      	mov	r3, r1
 8003270:	4b60      	ldr	r3, [pc, #384]	; (80033f4 <UART_SetConfig+0x4e4>)
 8003272:	fba3 2302 	umull	r2, r3, r3, r2
 8003276:	095b      	lsrs	r3, r3, #5
 8003278:	011c      	lsls	r4, r3, #4
 800327a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800327e:	2200      	movs	r2, #0
 8003280:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003284:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003288:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800328c:	4642      	mov	r2, r8
 800328e:	464b      	mov	r3, r9
 8003290:	1891      	adds	r1, r2, r2
 8003292:	61b9      	str	r1, [r7, #24]
 8003294:	415b      	adcs	r3, r3
 8003296:	61fb      	str	r3, [r7, #28]
 8003298:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800329c:	4641      	mov	r1, r8
 800329e:	1851      	adds	r1, r2, r1
 80032a0:	6139      	str	r1, [r7, #16]
 80032a2:	4649      	mov	r1, r9
 80032a4:	414b      	adcs	r3, r1
 80032a6:	617b      	str	r3, [r7, #20]
 80032a8:	f04f 0200 	mov.w	r2, #0
 80032ac:	f04f 0300 	mov.w	r3, #0
 80032b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032b4:	4659      	mov	r1, fp
 80032b6:	00cb      	lsls	r3, r1, #3
 80032b8:	4651      	mov	r1, sl
 80032ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032be:	4651      	mov	r1, sl
 80032c0:	00ca      	lsls	r2, r1, #3
 80032c2:	4610      	mov	r0, r2
 80032c4:	4619      	mov	r1, r3
 80032c6:	4603      	mov	r3, r0
 80032c8:	4642      	mov	r2, r8
 80032ca:	189b      	adds	r3, r3, r2
 80032cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80032d0:	464b      	mov	r3, r9
 80032d2:	460a      	mov	r2, r1
 80032d4:	eb42 0303 	adc.w	r3, r2, r3
 80032d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80032dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80032e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80032e8:	f04f 0200 	mov.w	r2, #0
 80032ec:	f04f 0300 	mov.w	r3, #0
 80032f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80032f4:	4649      	mov	r1, r9
 80032f6:	008b      	lsls	r3, r1, #2
 80032f8:	4641      	mov	r1, r8
 80032fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032fe:	4641      	mov	r1, r8
 8003300:	008a      	lsls	r2, r1, #2
 8003302:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003306:	f7fc ff7d 	bl	8000204 <__aeabi_uldivmod>
 800330a:	4602      	mov	r2, r0
 800330c:	460b      	mov	r3, r1
 800330e:	4611      	mov	r1, r2
 8003310:	4b38      	ldr	r3, [pc, #224]	; (80033f4 <UART_SetConfig+0x4e4>)
 8003312:	fba3 2301 	umull	r2, r3, r3, r1
 8003316:	095b      	lsrs	r3, r3, #5
 8003318:	2264      	movs	r2, #100	; 0x64
 800331a:	fb02 f303 	mul.w	r3, r2, r3
 800331e:	1acb      	subs	r3, r1, r3
 8003320:	011b      	lsls	r3, r3, #4
 8003322:	3332      	adds	r3, #50	; 0x32
 8003324:	4a33      	ldr	r2, [pc, #204]	; (80033f4 <UART_SetConfig+0x4e4>)
 8003326:	fba2 2303 	umull	r2, r3, r2, r3
 800332a:	095b      	lsrs	r3, r3, #5
 800332c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003330:	441c      	add	r4, r3
 8003332:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003336:	2200      	movs	r2, #0
 8003338:	673b      	str	r3, [r7, #112]	; 0x70
 800333a:	677a      	str	r2, [r7, #116]	; 0x74
 800333c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003340:	4642      	mov	r2, r8
 8003342:	464b      	mov	r3, r9
 8003344:	1891      	adds	r1, r2, r2
 8003346:	60b9      	str	r1, [r7, #8]
 8003348:	415b      	adcs	r3, r3
 800334a:	60fb      	str	r3, [r7, #12]
 800334c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003350:	4641      	mov	r1, r8
 8003352:	1851      	adds	r1, r2, r1
 8003354:	6039      	str	r1, [r7, #0]
 8003356:	4649      	mov	r1, r9
 8003358:	414b      	adcs	r3, r1
 800335a:	607b      	str	r3, [r7, #4]
 800335c:	f04f 0200 	mov.w	r2, #0
 8003360:	f04f 0300 	mov.w	r3, #0
 8003364:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003368:	4659      	mov	r1, fp
 800336a:	00cb      	lsls	r3, r1, #3
 800336c:	4651      	mov	r1, sl
 800336e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003372:	4651      	mov	r1, sl
 8003374:	00ca      	lsls	r2, r1, #3
 8003376:	4610      	mov	r0, r2
 8003378:	4619      	mov	r1, r3
 800337a:	4603      	mov	r3, r0
 800337c:	4642      	mov	r2, r8
 800337e:	189b      	adds	r3, r3, r2
 8003380:	66bb      	str	r3, [r7, #104]	; 0x68
 8003382:	464b      	mov	r3, r9
 8003384:	460a      	mov	r2, r1
 8003386:	eb42 0303 	adc.w	r3, r2, r3
 800338a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800338c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	663b      	str	r3, [r7, #96]	; 0x60
 8003396:	667a      	str	r2, [r7, #100]	; 0x64
 8003398:	f04f 0200 	mov.w	r2, #0
 800339c:	f04f 0300 	mov.w	r3, #0
 80033a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80033a4:	4649      	mov	r1, r9
 80033a6:	008b      	lsls	r3, r1, #2
 80033a8:	4641      	mov	r1, r8
 80033aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033ae:	4641      	mov	r1, r8
 80033b0:	008a      	lsls	r2, r1, #2
 80033b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80033b6:	f7fc ff25 	bl	8000204 <__aeabi_uldivmod>
 80033ba:	4602      	mov	r2, r0
 80033bc:	460b      	mov	r3, r1
 80033be:	4b0d      	ldr	r3, [pc, #52]	; (80033f4 <UART_SetConfig+0x4e4>)
 80033c0:	fba3 1302 	umull	r1, r3, r3, r2
 80033c4:	095b      	lsrs	r3, r3, #5
 80033c6:	2164      	movs	r1, #100	; 0x64
 80033c8:	fb01 f303 	mul.w	r3, r1, r3
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	011b      	lsls	r3, r3, #4
 80033d0:	3332      	adds	r3, #50	; 0x32
 80033d2:	4a08      	ldr	r2, [pc, #32]	; (80033f4 <UART_SetConfig+0x4e4>)
 80033d4:	fba2 2303 	umull	r2, r3, r2, r3
 80033d8:	095b      	lsrs	r3, r3, #5
 80033da:	f003 020f 	and.w	r2, r3, #15
 80033de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4422      	add	r2, r4
 80033e6:	609a      	str	r2, [r3, #8]
}
 80033e8:	bf00      	nop
 80033ea:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80033ee:	46bd      	mov	sp, r7
 80033f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033f4:	51eb851f 	.word	0x51eb851f

080033f8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80033fc:	4904      	ldr	r1, [pc, #16]	; (8003410 <MX_FATFS_Init+0x18>)
 80033fe:	4805      	ldr	r0, [pc, #20]	; (8003414 <MX_FATFS_Init+0x1c>)
 8003400:	f003 f99c 	bl	800673c <FATFS_LinkDriver>
 8003404:	4603      	mov	r3, r0
 8003406:	461a      	mov	r2, r3
 8003408:	4b03      	ldr	r3, [pc, #12]	; (8003418 <MX_FATFS_Init+0x20>)
 800340a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800340c:	bf00      	nop
 800340e:	bd80      	pop	{r7, pc}
 8003410:	20002154 	.word	0x20002154
 8003414:	20000010 	.word	0x20000010
 8003418:	20002150 	.word	0x20002150

0800341c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003420:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003422:	4618      	mov	r0, r3
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	4603      	mov	r3, r0
 8003434:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
	SD_disk_initialize(pdrv);
 8003436:	79fb      	ldrb	r3, [r7, #7]
 8003438:	4618      	mov	r0, r3
 800343a:	f7fd fa15 	bl	8000868 <SD_disk_initialize>
  /* USER CODE END INIT */
}
 800343e:	bf00      	nop
 8003440:	4618      	mov	r0, r3
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	4603      	mov	r3, r0
 8003450:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
	SD_disk_status(pdrv);
 8003452:	79fb      	ldrb	r3, [r7, #7]
 8003454:	4618      	mov	r0, r3
 8003456:	f7fd faed 	bl	8000a34 <SD_disk_status>
  /* USER CODE END STATUS */
}
 800345a:	bf00      	nop
 800345c:	4618      	mov	r0, r3
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	60b9      	str	r1, [r7, #8]
 800346c:	607a      	str	r2, [r7, #4]
 800346e:	603b      	str	r3, [r7, #0]
 8003470:	4603      	mov	r3, r0
 8003472:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	SD_disk_read(pdrv, buff, sector, count);
 8003474:	7bf8      	ldrb	r0, [r7, #15]
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	68b9      	ldr	r1, [r7, #8]
 800347c:	f7fd faf0 	bl	8000a60 <SD_disk_read>
  /* USER CODE END READ */
}
 8003480:	bf00      	nop
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b084      	sub	sp, #16
 800348e:	af00      	add	r7, sp, #0
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
 8003494:	603b      	str	r3, [r7, #0]
 8003496:	4603      	mov	r3, r0
 8003498:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
	SD_disk_write(pdrv, buff, sector, count);
 800349a:	7bf8      	ldrb	r0, [r7, #15]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	68b9      	ldr	r1, [r7, #8]
 80034a2:	f7fd fb47 	bl	8000b34 <SD_disk_write>
  /* USER CODE END WRITE */
}
 80034a6:	bf00      	nop
 80034a8:	4618      	mov	r0, r3
 80034aa:	3710      	adds	r7, #16
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	4603      	mov	r3, r0
 80034b8:	603a      	str	r2, [r7, #0]
 80034ba:	71fb      	strb	r3, [r7, #7]
 80034bc:	460b      	mov	r3, r1
 80034be:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
	SD_disk_ioctl(pdrv, cmd, buff);
 80034c0:	79fb      	ldrb	r3, [r7, #7]
 80034c2:	79b9      	ldrb	r1, [r7, #6]
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7fd fbb8 	bl	8000c3c <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 80034cc:	bf00      	nop
 80034ce:	4618      	mov	r0, r3
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
	...

080034d8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	4603      	mov	r3, r0
 80034e0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80034e2:	79fb      	ldrb	r3, [r7, #7]
 80034e4:	4a08      	ldr	r2, [pc, #32]	; (8003508 <disk_status+0x30>)
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	4413      	add	r3, r2
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	79fa      	ldrb	r2, [r7, #7]
 80034f0:	4905      	ldr	r1, [pc, #20]	; (8003508 <disk_status+0x30>)
 80034f2:	440a      	add	r2, r1
 80034f4:	7a12      	ldrb	r2, [r2, #8]
 80034f6:	4610      	mov	r0, r2
 80034f8:	4798      	blx	r3
 80034fa:	4603      	mov	r3, r0
 80034fc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80034fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003500:	4618      	mov	r0, r3
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	20002380 	.word	0x20002380

0800350c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	4603      	mov	r3, r0
 8003514:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003516:	2300      	movs	r3, #0
 8003518:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800351a:	79fb      	ldrb	r3, [r7, #7]
 800351c:	4a0d      	ldr	r2, [pc, #52]	; (8003554 <disk_initialize+0x48>)
 800351e:	5cd3      	ldrb	r3, [r2, r3]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d111      	bne.n	8003548 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8003524:	79fb      	ldrb	r3, [r7, #7]
 8003526:	4a0b      	ldr	r2, [pc, #44]	; (8003554 <disk_initialize+0x48>)
 8003528:	2101      	movs	r1, #1
 800352a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800352c:	79fb      	ldrb	r3, [r7, #7]
 800352e:	4a09      	ldr	r2, [pc, #36]	; (8003554 <disk_initialize+0x48>)
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4413      	add	r3, r2
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	79fa      	ldrb	r2, [r7, #7]
 800353a:	4906      	ldr	r1, [pc, #24]	; (8003554 <disk_initialize+0x48>)
 800353c:	440a      	add	r2, r1
 800353e:	7a12      	ldrb	r2, [r2, #8]
 8003540:	4610      	mov	r0, r2
 8003542:	4798      	blx	r3
 8003544:	4603      	mov	r3, r0
 8003546:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003548:	7bfb      	ldrb	r3, [r7, #15]
}
 800354a:	4618      	mov	r0, r3
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	20002380 	.word	0x20002380

08003558 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003558:	b590      	push	{r4, r7, lr}
 800355a:	b087      	sub	sp, #28
 800355c:	af00      	add	r7, sp, #0
 800355e:	60b9      	str	r1, [r7, #8]
 8003560:	607a      	str	r2, [r7, #4]
 8003562:	603b      	str	r3, [r7, #0]
 8003564:	4603      	mov	r3, r0
 8003566:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003568:	7bfb      	ldrb	r3, [r7, #15]
 800356a:	4a0a      	ldr	r2, [pc, #40]	; (8003594 <disk_read+0x3c>)
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4413      	add	r3, r2
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	689c      	ldr	r4, [r3, #8]
 8003574:	7bfb      	ldrb	r3, [r7, #15]
 8003576:	4a07      	ldr	r2, [pc, #28]	; (8003594 <disk_read+0x3c>)
 8003578:	4413      	add	r3, r2
 800357a:	7a18      	ldrb	r0, [r3, #8]
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	68b9      	ldr	r1, [r7, #8]
 8003582:	47a0      	blx	r4
 8003584:	4603      	mov	r3, r0
 8003586:	75fb      	strb	r3, [r7, #23]
  return res;
 8003588:	7dfb      	ldrb	r3, [r7, #23]
}
 800358a:	4618      	mov	r0, r3
 800358c:	371c      	adds	r7, #28
 800358e:	46bd      	mov	sp, r7
 8003590:	bd90      	pop	{r4, r7, pc}
 8003592:	bf00      	nop
 8003594:	20002380 	.word	0x20002380

08003598 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003598:	b590      	push	{r4, r7, lr}
 800359a:	b087      	sub	sp, #28
 800359c:	af00      	add	r7, sp, #0
 800359e:	60b9      	str	r1, [r7, #8]
 80035a0:	607a      	str	r2, [r7, #4]
 80035a2:	603b      	str	r3, [r7, #0]
 80035a4:	4603      	mov	r3, r0
 80035a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80035a8:	7bfb      	ldrb	r3, [r7, #15]
 80035aa:	4a0a      	ldr	r2, [pc, #40]	; (80035d4 <disk_write+0x3c>)
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4413      	add	r3, r2
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	68dc      	ldr	r4, [r3, #12]
 80035b4:	7bfb      	ldrb	r3, [r7, #15]
 80035b6:	4a07      	ldr	r2, [pc, #28]	; (80035d4 <disk_write+0x3c>)
 80035b8:	4413      	add	r3, r2
 80035ba:	7a18      	ldrb	r0, [r3, #8]
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	68b9      	ldr	r1, [r7, #8]
 80035c2:	47a0      	blx	r4
 80035c4:	4603      	mov	r3, r0
 80035c6:	75fb      	strb	r3, [r7, #23]
  return res;
 80035c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	371c      	adds	r7, #28
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd90      	pop	{r4, r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20002380 	.word	0x20002380

080035d8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	4603      	mov	r3, r0
 80035e0:	603a      	str	r2, [r7, #0]
 80035e2:	71fb      	strb	r3, [r7, #7]
 80035e4:	460b      	mov	r3, r1
 80035e6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80035e8:	79fb      	ldrb	r3, [r7, #7]
 80035ea:	4a09      	ldr	r2, [pc, #36]	; (8003610 <disk_ioctl+0x38>)
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	4413      	add	r3, r2
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	79fa      	ldrb	r2, [r7, #7]
 80035f6:	4906      	ldr	r1, [pc, #24]	; (8003610 <disk_ioctl+0x38>)
 80035f8:	440a      	add	r2, r1
 80035fa:	7a10      	ldrb	r0, [r2, #8]
 80035fc:	79b9      	ldrb	r1, [r7, #6]
 80035fe:	683a      	ldr	r2, [r7, #0]
 8003600:	4798      	blx	r3
 8003602:	4603      	mov	r3, r0
 8003604:	73fb      	strb	r3, [r7, #15]
  return res;
 8003606:	7bfb      	ldrb	r3, [r7, #15]
}
 8003608:	4618      	mov	r0, r3
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	20002380 	.word	0x20002380

08003614 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3301      	adds	r3, #1
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003624:	89fb      	ldrh	r3, [r7, #14]
 8003626:	021b      	lsls	r3, r3, #8
 8003628:	b21a      	sxth	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	b21b      	sxth	r3, r3
 8003630:	4313      	orrs	r3, r2
 8003632:	b21b      	sxth	r3, r3
 8003634:	81fb      	strh	r3, [r7, #14]
	return rv;
 8003636:	89fb      	ldrh	r3, [r7, #14]
}
 8003638:	4618      	mov	r0, r3
 800363a:	3714      	adds	r7, #20
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	3303      	adds	r3, #3
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	021b      	lsls	r3, r3, #8
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	3202      	adds	r2, #2
 800365c:	7812      	ldrb	r2, [r2, #0]
 800365e:	4313      	orrs	r3, r2
 8003660:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	021b      	lsls	r3, r3, #8
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	3201      	adds	r2, #1
 800366a:	7812      	ldrb	r2, [r2, #0]
 800366c:	4313      	orrs	r3, r2
 800366e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	021b      	lsls	r3, r3, #8
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	7812      	ldrb	r2, [r2, #0]
 8003678:	4313      	orrs	r3, r2
 800367a:	60fb      	str	r3, [r7, #12]
	return rv;
 800367c:	68fb      	ldr	r3, [r7, #12]
}
 800367e:	4618      	mov	r0, r3
 8003680:	3714      	adds	r7, #20
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr

0800368a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800368a:	b480      	push	{r7}
 800368c:	b083      	sub	sp, #12
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
 8003692:	460b      	mov	r3, r1
 8003694:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	1c5a      	adds	r2, r3, #1
 800369a:	607a      	str	r2, [r7, #4]
 800369c:	887a      	ldrh	r2, [r7, #2]
 800369e:	b2d2      	uxtb	r2, r2
 80036a0:	701a      	strb	r2, [r3, #0]
 80036a2:	887b      	ldrh	r3, [r7, #2]
 80036a4:	0a1b      	lsrs	r3, r3, #8
 80036a6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	1c5a      	adds	r2, r3, #1
 80036ac:	607a      	str	r2, [r7, #4]
 80036ae:	887a      	ldrh	r2, [r7, #2]
 80036b0:	b2d2      	uxtb	r2, r2
 80036b2:	701a      	strb	r2, [r3, #0]
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	1c5a      	adds	r2, r3, #1
 80036ce:	607a      	str	r2, [r7, #4]
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	b2d2      	uxtb	r2, r2
 80036d4:	701a      	strb	r2, [r3, #0]
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	0a1b      	lsrs	r3, r3, #8
 80036da:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	1c5a      	adds	r2, r3, #1
 80036e0:	607a      	str	r2, [r7, #4]
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	b2d2      	uxtb	r2, r2
 80036e6:	701a      	strb	r2, [r3, #0]
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	0a1b      	lsrs	r3, r3, #8
 80036ec:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	1c5a      	adds	r2, r3, #1
 80036f2:	607a      	str	r2, [r7, #4]
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	b2d2      	uxtb	r2, r2
 80036f8:	701a      	strb	r2, [r3, #0]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	0a1b      	lsrs	r3, r3, #8
 80036fe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	1c5a      	adds	r2, r3, #1
 8003704:	607a      	str	r2, [r7, #4]
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	b2d2      	uxtb	r2, r2
 800370a:	701a      	strb	r2, [r3, #0]
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003718:	b480      	push	{r7}
 800371a:	b087      	sub	sp, #28
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00d      	beq.n	800374e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8003732:	693a      	ldr	r2, [r7, #16]
 8003734:	1c53      	adds	r3, r2, #1
 8003736:	613b      	str	r3, [r7, #16]
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	1c59      	adds	r1, r3, #1
 800373c:	6179      	str	r1, [r7, #20]
 800373e:	7812      	ldrb	r2, [r2, #0]
 8003740:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	3b01      	subs	r3, #1
 8003746:	607b      	str	r3, [r7, #4]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1f1      	bne.n	8003732 <mem_cpy+0x1a>
	}
}
 800374e:	bf00      	nop
 8003750:	371c      	adds	r7, #28
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr

0800375a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800375a:	b480      	push	{r7}
 800375c:	b087      	sub	sp, #28
 800375e:	af00      	add	r7, sp, #0
 8003760:	60f8      	str	r0, [r7, #12]
 8003762:	60b9      	str	r1, [r7, #8]
 8003764:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	1c5a      	adds	r2, r3, #1
 800376e:	617a      	str	r2, [r7, #20]
 8003770:	68ba      	ldr	r2, [r7, #8]
 8003772:	b2d2      	uxtb	r2, r2
 8003774:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	3b01      	subs	r3, #1
 800377a:	607b      	str	r3, [r7, #4]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1f3      	bne.n	800376a <mem_set+0x10>
}
 8003782:	bf00      	nop
 8003784:	bf00      	nop
 8003786:	371c      	adds	r7, #28
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003790:	b480      	push	{r7}
 8003792:	b089      	sub	sp, #36	; 0x24
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	61fb      	str	r3, [r7, #28]
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80037a4:	2300      	movs	r3, #0
 80037a6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	1c5a      	adds	r2, r3, #1
 80037ac:	61fa      	str	r2, [r7, #28]
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	4619      	mov	r1, r3
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	1c5a      	adds	r2, r3, #1
 80037b6:	61ba      	str	r2, [r7, #24]
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	1acb      	subs	r3, r1, r3
 80037bc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	3b01      	subs	r3, #1
 80037c2:	607b      	str	r3, [r7, #4]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d002      	beq.n	80037d0 <mem_cmp+0x40>
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d0eb      	beq.n	80037a8 <mem_cmp+0x18>

	return r;
 80037d0:	697b      	ldr	r3, [r7, #20]
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3724      	adds	r7, #36	; 0x24
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80037de:	b480      	push	{r7}
 80037e0:	b083      	sub	sp, #12
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
 80037e6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80037e8:	e002      	b.n	80037f0 <chk_chr+0x12>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	3301      	adds	r3, #1
 80037ee:	607b      	str	r3, [r7, #4]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d005      	beq.n	8003804 <chk_chr+0x26>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	461a      	mov	r2, r3
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	4293      	cmp	r3, r2
 8003802:	d1f2      	bne.n	80037ea <chk_chr+0xc>
	return *str;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	781b      	ldrb	r3, [r3, #0]
}
 8003808:	4618      	mov	r0, r3
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800381e:	2300      	movs	r3, #0
 8003820:	60bb      	str	r3, [r7, #8]
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	60fb      	str	r3, [r7, #12]
 8003826:	e029      	b.n	800387c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8003828:	4a27      	ldr	r2, [pc, #156]	; (80038c8 <chk_lock+0xb4>)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	011b      	lsls	r3, r3, #4
 800382e:	4413      	add	r3, r2
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d01d      	beq.n	8003872 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003836:	4a24      	ldr	r2, [pc, #144]	; (80038c8 <chk_lock+0xb4>)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	011b      	lsls	r3, r3, #4
 800383c:	4413      	add	r3, r2
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	429a      	cmp	r2, r3
 8003846:	d116      	bne.n	8003876 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8003848:	4a1f      	ldr	r2, [pc, #124]	; (80038c8 <chk_lock+0xb4>)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	011b      	lsls	r3, r3, #4
 800384e:	4413      	add	r3, r2
 8003850:	3304      	adds	r3, #4
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003858:	429a      	cmp	r2, r3
 800385a:	d10c      	bne.n	8003876 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800385c:	4a1a      	ldr	r2, [pc, #104]	; (80038c8 <chk_lock+0xb4>)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	011b      	lsls	r3, r3, #4
 8003862:	4413      	add	r3, r2
 8003864:	3308      	adds	r3, #8
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800386c:	429a      	cmp	r2, r3
 800386e:	d102      	bne.n	8003876 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003870:	e007      	b.n	8003882 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8003872:	2301      	movs	r3, #1
 8003874:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	3301      	adds	r3, #1
 800387a:	60fb      	str	r3, [r7, #12]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d9d2      	bls.n	8003828 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2b02      	cmp	r3, #2
 8003886:	d109      	bne.n	800389c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d102      	bne.n	8003894 <chk_lock+0x80>
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	2b02      	cmp	r3, #2
 8003892:	d101      	bne.n	8003898 <chk_lock+0x84>
 8003894:	2300      	movs	r3, #0
 8003896:	e010      	b.n	80038ba <chk_lock+0xa6>
 8003898:	2312      	movs	r3, #18
 800389a:	e00e      	b.n	80038ba <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d108      	bne.n	80038b4 <chk_lock+0xa0>
 80038a2:	4a09      	ldr	r2, [pc, #36]	; (80038c8 <chk_lock+0xb4>)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	011b      	lsls	r3, r3, #4
 80038a8:	4413      	add	r3, r2
 80038aa:	330c      	adds	r3, #12
 80038ac:	881b      	ldrh	r3, [r3, #0]
 80038ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038b2:	d101      	bne.n	80038b8 <chk_lock+0xa4>
 80038b4:	2310      	movs	r3, #16
 80038b6:	e000      	b.n	80038ba <chk_lock+0xa6>
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	20002160 	.word	0x20002160

080038cc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80038d2:	2300      	movs	r3, #0
 80038d4:	607b      	str	r3, [r7, #4]
 80038d6:	e002      	b.n	80038de <enq_lock+0x12>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	3301      	adds	r3, #1
 80038dc:	607b      	str	r3, [r7, #4]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d806      	bhi.n	80038f2 <enq_lock+0x26>
 80038e4:	4a09      	ldr	r2, [pc, #36]	; (800390c <enq_lock+0x40>)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	011b      	lsls	r3, r3, #4
 80038ea:	4413      	add	r3, r2
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1f2      	bne.n	80038d8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	bf14      	ite	ne
 80038f8:	2301      	movne	r3, #1
 80038fa:	2300      	moveq	r3, #0
 80038fc:	b2db      	uxtb	r3, r3
}
 80038fe:	4618      	mov	r0, r3
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	20002160 	.word	0x20002160

08003910 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800391a:	2300      	movs	r3, #0
 800391c:	60fb      	str	r3, [r7, #12]
 800391e:	e01f      	b.n	8003960 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8003920:	4a41      	ldr	r2, [pc, #260]	; (8003a28 <inc_lock+0x118>)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	011b      	lsls	r3, r3, #4
 8003926:	4413      	add	r3, r2
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	429a      	cmp	r2, r3
 8003930:	d113      	bne.n	800395a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8003932:	4a3d      	ldr	r2, [pc, #244]	; (8003a28 <inc_lock+0x118>)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	011b      	lsls	r3, r3, #4
 8003938:	4413      	add	r3, r2
 800393a:	3304      	adds	r3, #4
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8003942:	429a      	cmp	r2, r3
 8003944:	d109      	bne.n	800395a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8003946:	4a38      	ldr	r2, [pc, #224]	; (8003a28 <inc_lock+0x118>)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	011b      	lsls	r3, r3, #4
 800394c:	4413      	add	r3, r2
 800394e:	3308      	adds	r3, #8
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8003956:	429a      	cmp	r2, r3
 8003958:	d006      	beq.n	8003968 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	3301      	adds	r3, #1
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d9dc      	bls.n	8003920 <inc_lock+0x10>
 8003966:	e000      	b.n	800396a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8003968:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2b02      	cmp	r3, #2
 800396e:	d132      	bne.n	80039d6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003970:	2300      	movs	r3, #0
 8003972:	60fb      	str	r3, [r7, #12]
 8003974:	e002      	b.n	800397c <inc_lock+0x6c>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	3301      	adds	r3, #1
 800397a:	60fb      	str	r3, [r7, #12]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d806      	bhi.n	8003990 <inc_lock+0x80>
 8003982:	4a29      	ldr	r2, [pc, #164]	; (8003a28 <inc_lock+0x118>)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	4413      	add	r3, r2
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1f2      	bne.n	8003976 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2b02      	cmp	r3, #2
 8003994:	d101      	bne.n	800399a <inc_lock+0x8a>
 8003996:	2300      	movs	r3, #0
 8003998:	e040      	b.n	8003a1c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	4922      	ldr	r1, [pc, #136]	; (8003a28 <inc_lock+0x118>)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	011b      	lsls	r3, r3, #4
 80039a4:	440b      	add	r3, r1
 80039a6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689a      	ldr	r2, [r3, #8]
 80039ac:	491e      	ldr	r1, [pc, #120]	; (8003a28 <inc_lock+0x118>)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	011b      	lsls	r3, r3, #4
 80039b2:	440b      	add	r3, r1
 80039b4:	3304      	adds	r3, #4
 80039b6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	695a      	ldr	r2, [r3, #20]
 80039bc:	491a      	ldr	r1, [pc, #104]	; (8003a28 <inc_lock+0x118>)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	011b      	lsls	r3, r3, #4
 80039c2:	440b      	add	r3, r1
 80039c4:	3308      	adds	r3, #8
 80039c6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80039c8:	4a17      	ldr	r2, [pc, #92]	; (8003a28 <inc_lock+0x118>)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	011b      	lsls	r3, r3, #4
 80039ce:	4413      	add	r3, r2
 80039d0:	330c      	adds	r3, #12
 80039d2:	2200      	movs	r2, #0
 80039d4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d009      	beq.n	80039f0 <inc_lock+0xe0>
 80039dc:	4a12      	ldr	r2, [pc, #72]	; (8003a28 <inc_lock+0x118>)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	011b      	lsls	r3, r3, #4
 80039e2:	4413      	add	r3, r2
 80039e4:	330c      	adds	r3, #12
 80039e6:	881b      	ldrh	r3, [r3, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <inc_lock+0xe0>
 80039ec:	2300      	movs	r3, #0
 80039ee:	e015      	b.n	8003a1c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d108      	bne.n	8003a08 <inc_lock+0xf8>
 80039f6:	4a0c      	ldr	r2, [pc, #48]	; (8003a28 <inc_lock+0x118>)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	011b      	lsls	r3, r3, #4
 80039fc:	4413      	add	r3, r2
 80039fe:	330c      	adds	r3, #12
 8003a00:	881b      	ldrh	r3, [r3, #0]
 8003a02:	3301      	adds	r3, #1
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	e001      	b.n	8003a0c <inc_lock+0xfc>
 8003a08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a0c:	4906      	ldr	r1, [pc, #24]	; (8003a28 <inc_lock+0x118>)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	011b      	lsls	r3, r3, #4
 8003a12:	440b      	add	r3, r1
 8003a14:	330c      	adds	r3, #12
 8003a16:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	3301      	adds	r3, #1
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3714      	adds	r7, #20
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	20002160 	.word	0x20002160

08003a2c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	3b01      	subs	r3, #1
 8003a38:	607b      	str	r3, [r7, #4]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d825      	bhi.n	8003a8c <dec_lock+0x60>
		n = Files[i].ctr;
 8003a40:	4a17      	ldr	r2, [pc, #92]	; (8003aa0 <dec_lock+0x74>)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	011b      	lsls	r3, r3, #4
 8003a46:	4413      	add	r3, r2
 8003a48:	330c      	adds	r3, #12
 8003a4a:	881b      	ldrh	r3, [r3, #0]
 8003a4c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003a4e:	89fb      	ldrh	r3, [r7, #14]
 8003a50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a54:	d101      	bne.n	8003a5a <dec_lock+0x2e>
 8003a56:	2300      	movs	r3, #0
 8003a58:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8003a5a:	89fb      	ldrh	r3, [r7, #14]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d002      	beq.n	8003a66 <dec_lock+0x3a>
 8003a60:	89fb      	ldrh	r3, [r7, #14]
 8003a62:	3b01      	subs	r3, #1
 8003a64:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8003a66:	4a0e      	ldr	r2, [pc, #56]	; (8003aa0 <dec_lock+0x74>)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	011b      	lsls	r3, r3, #4
 8003a6c:	4413      	add	r3, r2
 8003a6e:	330c      	adds	r3, #12
 8003a70:	89fa      	ldrh	r2, [r7, #14]
 8003a72:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003a74:	89fb      	ldrh	r3, [r7, #14]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d105      	bne.n	8003a86 <dec_lock+0x5a>
 8003a7a:	4a09      	ldr	r2, [pc, #36]	; (8003aa0 <dec_lock+0x74>)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	011b      	lsls	r3, r3, #4
 8003a80:	4413      	add	r3, r2
 8003a82:	2200      	movs	r2, #0
 8003a84:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003a86:	2300      	movs	r3, #0
 8003a88:	737b      	strb	r3, [r7, #13]
 8003a8a:	e001      	b.n	8003a90 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003a90:	7b7b      	ldrb	r3, [r7, #13]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3714      	adds	r7, #20
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	20002160 	.word	0x20002160

08003aa4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003aac:	2300      	movs	r3, #0
 8003aae:	60fb      	str	r3, [r7, #12]
 8003ab0:	e010      	b.n	8003ad4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003ab2:	4a0d      	ldr	r2, [pc, #52]	; (8003ae8 <clear_lock+0x44>)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	011b      	lsls	r3, r3, #4
 8003ab8:	4413      	add	r3, r2
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d105      	bne.n	8003ace <clear_lock+0x2a>
 8003ac2:	4a09      	ldr	r2, [pc, #36]	; (8003ae8 <clear_lock+0x44>)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	011b      	lsls	r3, r3, #4
 8003ac8:	4413      	add	r3, r2
 8003aca:	2200      	movs	r2, #0
 8003acc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	60fb      	str	r3, [r7, #12]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d9eb      	bls.n	8003ab2 <clear_lock+0xe>
	}
}
 8003ada:	bf00      	nop
 8003adc:	bf00      	nop
 8003ade:	3714      	adds	r7, #20
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr
 8003ae8:	20002160 	.word	0x20002160

08003aec <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003af4:	2300      	movs	r3, #0
 8003af6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	78db      	ldrb	r3, [r3, #3]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d034      	beq.n	8003b6a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b04:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	7858      	ldrb	r0, [r3, #1]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003b10:	2301      	movs	r3, #1
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	f7ff fd40 	bl	8003598 <disk_write>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d002      	beq.n	8003b24 <sync_window+0x38>
			res = FR_DISK_ERR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	73fb      	strb	r3, [r7, #15]
 8003b22:	e022      	b.n	8003b6a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	1ad2      	subs	r2, r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d217      	bcs.n	8003b6a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	789b      	ldrb	r3, [r3, #2]
 8003b3e:	613b      	str	r3, [r7, #16]
 8003b40:	e010      	b.n	8003b64 <sync_window+0x78>
					wsect += fs->fsize;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	4413      	add	r3, r2
 8003b4a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	7858      	ldrb	r0, [r3, #1]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003b56:	2301      	movs	r3, #1
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	f7ff fd1d 	bl	8003598 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	3b01      	subs	r3, #1
 8003b62:	613b      	str	r3, [r7, #16]
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d8eb      	bhi.n	8003b42 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8003b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3718      	adds	r7, #24
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d01b      	beq.n	8003bc4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f7ff ffad 	bl	8003aec <sync_window>
 8003b92:	4603      	mov	r3, r0
 8003b94:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003b96:	7bfb      	ldrb	r3, [r7, #15]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d113      	bne.n	8003bc4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	7858      	ldrb	r0, [r3, #1]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	683a      	ldr	r2, [r7, #0]
 8003baa:	f7ff fcd5 	bl	8003558 <disk_read>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d004      	beq.n	8003bbe <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003bb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bb8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8003bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
	...

08003bd0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f7ff ff87 	bl	8003aec <sync_window>
 8003bde:	4603      	mov	r3, r0
 8003be0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003be2:	7bfb      	ldrb	r3, [r7, #15]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d159      	bne.n	8003c9c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	2b03      	cmp	r3, #3
 8003bee:	d149      	bne.n	8003c84 <sync_fs+0xb4>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	791b      	ldrb	r3, [r3, #4]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d145      	bne.n	8003c84 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	899b      	ldrh	r3, [r3, #12]
 8003c02:	461a      	mov	r2, r3
 8003c04:	2100      	movs	r1, #0
 8003c06:	f7ff fda8 	bl	800375a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	3338      	adds	r3, #56	; 0x38
 8003c0e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003c12:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7ff fd37 	bl	800368a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	3338      	adds	r3, #56	; 0x38
 8003c20:	4921      	ldr	r1, [pc, #132]	; (8003ca8 <sync_fs+0xd8>)
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7ff fd4c 	bl	80036c0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	3338      	adds	r3, #56	; 0x38
 8003c2c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003c30:	491e      	ldr	r1, [pc, #120]	; (8003cac <sync_fs+0xdc>)
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7ff fd44 	bl	80036c0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	3338      	adds	r3, #56	; 0x38
 8003c3c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	4619      	mov	r1, r3
 8003c46:	4610      	mov	r0, r2
 8003c48:	f7ff fd3a 	bl	80036c0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3338      	adds	r3, #56	; 0x38
 8003c50:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	4619      	mov	r1, r3
 8003c5a:	4610      	mov	r0, r2
 8003c5c:	f7ff fd30 	bl	80036c0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	1c5a      	adds	r2, r3, #1
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	7858      	ldrb	r0, [r3, #1]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c78:	2301      	movs	r3, #1
 8003c7a:	f7ff fc8d 	bl	8003598 <disk_write>
			fs->fsi_flag = 0;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	785b      	ldrb	r3, [r3, #1]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7ff fca3 	bl	80035d8 <disk_ioctl>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <sync_fs+0xcc>
 8003c98:	2301      	movs	r3, #1
 8003c9a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	41615252 	.word	0x41615252
 8003cac:	61417272 	.word	0x61417272

08003cb0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	3b02      	subs	r3, #2
 8003cbe:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	69db      	ldr	r3, [r3, #28]
 8003cc4:	3b02      	subs	r3, #2
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d301      	bcc.n	8003cd0 <clust2sect+0x20>
 8003ccc:	2300      	movs	r3, #0
 8003cce:	e008      	b.n	8003ce2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	895b      	ldrh	r3, [r3, #10]
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	fb03 f202 	mul.w	r2, r3, r2
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce0:	4413      	add	r3, r2
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b086      	sub	sp, #24
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
 8003cf6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d904      	bls.n	8003d0e <get_fat+0x20>
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	69db      	ldr	r3, [r3, #28]
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d302      	bcc.n	8003d14 <get_fat+0x26>
		val = 1;	/* Internal error */
 8003d0e:	2301      	movs	r3, #1
 8003d10:	617b      	str	r3, [r7, #20]
 8003d12:	e0bb      	b.n	8003e8c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003d14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d18:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	2b03      	cmp	r3, #3
 8003d20:	f000 8083 	beq.w	8003e2a <get_fat+0x13c>
 8003d24:	2b03      	cmp	r3, #3
 8003d26:	f300 80a7 	bgt.w	8003e78 <get_fat+0x18a>
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d002      	beq.n	8003d34 <get_fat+0x46>
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d056      	beq.n	8003de0 <get_fat+0xf2>
 8003d32:	e0a1      	b.n	8003e78 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	60fb      	str	r3, [r7, #12]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	085b      	lsrs	r3, r3, #1
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	4413      	add	r3, r2
 8003d40:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	899b      	ldrh	r3, [r3, #12]
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d52:	4413      	add	r3, r2
 8003d54:	4619      	mov	r1, r3
 8003d56:	6938      	ldr	r0, [r7, #16]
 8003d58:	f7ff ff0c 	bl	8003b74 <move_window>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f040 808d 	bne.w	8003e7e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	1c5a      	adds	r2, r3, #1
 8003d68:	60fa      	str	r2, [r7, #12]
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	8992      	ldrh	r2, [r2, #12]
 8003d6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d72:	fb01 f202 	mul.w	r2, r1, r2
 8003d76:	1a9b      	subs	r3, r3, r2
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d80:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	899b      	ldrh	r3, [r3, #12]
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d92:	4413      	add	r3, r2
 8003d94:	4619      	mov	r1, r3
 8003d96:	6938      	ldr	r0, [r7, #16]
 8003d98:	f7ff feec 	bl	8003b74 <move_window>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d16f      	bne.n	8003e82 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	899b      	ldrh	r3, [r3, #12]
 8003da6:	461a      	mov	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	fbb3 f1f2 	udiv	r1, r3, r2
 8003dae:	fb01 f202 	mul.w	r2, r1, r2
 8003db2:	1a9b      	subs	r3, r3, r2
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	4413      	add	r3, r2
 8003db8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003dbc:	021b      	lsls	r3, r3, #8
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d002      	beq.n	8003dd6 <get_fat+0xe8>
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	091b      	lsrs	r3, r3, #4
 8003dd4:	e002      	b.n	8003ddc <get_fat+0xee>
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ddc:	617b      	str	r3, [r7, #20]
			break;
 8003dde:	e055      	b.n	8003e8c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	899b      	ldrh	r3, [r3, #12]
 8003de8:	085b      	lsrs	r3, r3, #1
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	4619      	mov	r1, r3
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	fbb3 f3f1 	udiv	r3, r3, r1
 8003df4:	4413      	add	r3, r2
 8003df6:	4619      	mov	r1, r3
 8003df8:	6938      	ldr	r0, [r7, #16]
 8003dfa:	f7ff febb 	bl	8003b74 <move_window>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d140      	bne.n	8003e86 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	8992      	ldrh	r2, [r2, #12]
 8003e12:	fbb3 f0f2 	udiv	r0, r3, r2
 8003e16:	fb00 f202 	mul.w	r2, r0, r2
 8003e1a:	1a9b      	subs	r3, r3, r2
 8003e1c:	440b      	add	r3, r1
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7ff fbf8 	bl	8003614 <ld_word>
 8003e24:	4603      	mov	r3, r0
 8003e26:	617b      	str	r3, [r7, #20]
			break;
 8003e28:	e030      	b.n	8003e8c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	899b      	ldrh	r3, [r3, #12]
 8003e32:	089b      	lsrs	r3, r3, #2
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	4619      	mov	r1, r3
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e3e:	4413      	add	r3, r2
 8003e40:	4619      	mov	r1, r3
 8003e42:	6938      	ldr	r0, [r7, #16]
 8003e44:	f7ff fe96 	bl	8003b74 <move_window>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d11d      	bne.n	8003e8a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	8992      	ldrh	r2, [r2, #12]
 8003e5c:	fbb3 f0f2 	udiv	r0, r3, r2
 8003e60:	fb00 f202 	mul.w	r2, r0, r2
 8003e64:	1a9b      	subs	r3, r3, r2
 8003e66:	440b      	add	r3, r1
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7ff fbeb 	bl	8003644 <ld_dword>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003e74:	617b      	str	r3, [r7, #20]
			break;
 8003e76:	e009      	b.n	8003e8c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8003e78:	2301      	movs	r3, #1
 8003e7a:	617b      	str	r3, [r7, #20]
 8003e7c:	e006      	b.n	8003e8c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003e7e:	bf00      	nop
 8003e80:	e004      	b.n	8003e8c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003e82:	bf00      	nop
 8003e84:	e002      	b.n	8003e8c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003e86:	bf00      	nop
 8003e88:	e000      	b.n	8003e8c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003e8a:	bf00      	nop
		}
	}

	return val;
 8003e8c:	697b      	ldr	r3, [r7, #20]
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3718      	adds	r7, #24
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8003e96:	b590      	push	{r4, r7, lr}
 8003e98:	b089      	sub	sp, #36	; 0x24
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	60f8      	str	r0, [r7, #12]
 8003e9e:	60b9      	str	r1, [r7, #8]
 8003ea0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	f240 8109 	bls.w	80040c0 <put_fat+0x22a>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	69db      	ldr	r3, [r3, #28]
 8003eb2:	68ba      	ldr	r2, [r7, #8]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	f080 8103 	bcs.w	80040c0 <put_fat+0x22a>
		switch (fs->fs_type) {
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	2b03      	cmp	r3, #3
 8003ec0:	f000 80b6 	beq.w	8004030 <put_fat+0x19a>
 8003ec4:	2b03      	cmp	r3, #3
 8003ec6:	f300 80fb 	bgt.w	80040c0 <put_fat+0x22a>
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d003      	beq.n	8003ed6 <put_fat+0x40>
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	f000 8083 	beq.w	8003fda <put_fat+0x144>
 8003ed4:	e0f4      	b.n	80040c0 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	61bb      	str	r3, [r7, #24]
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	085b      	lsrs	r3, r3, #1
 8003ede:	69ba      	ldr	r2, [r7, #24]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	899b      	ldrh	r3, [r3, #12]
 8003eec:	4619      	mov	r1, r3
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ef4:	4413      	add	r3, r2
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f7ff fe3b 	bl	8003b74 <move_window>
 8003efe:	4603      	mov	r3, r0
 8003f00:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003f02:	7ffb      	ldrb	r3, [r7, #31]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f040 80d4 	bne.w	80040b2 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	1c5a      	adds	r2, r3, #1
 8003f14:	61ba      	str	r2, [r7, #24]
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	8992      	ldrh	r2, [r2, #12]
 8003f1a:	fbb3 f0f2 	udiv	r0, r3, r2
 8003f1e:	fb00 f202 	mul.w	r2, r0, r2
 8003f22:	1a9b      	subs	r3, r3, r2
 8003f24:	440b      	add	r3, r1
 8003f26:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00d      	beq.n	8003f4e <put_fat+0xb8>
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	b25b      	sxtb	r3, r3
 8003f38:	f003 030f 	and.w	r3, r3, #15
 8003f3c:	b25a      	sxtb	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	011b      	lsls	r3, r3, #4
 8003f44:	b25b      	sxtb	r3, r3
 8003f46:	4313      	orrs	r3, r2
 8003f48:	b25b      	sxtb	r3, r3
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	e001      	b.n	8003f52 <put_fat+0xbc>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	899b      	ldrh	r3, [r3, #12]
 8003f64:	4619      	mov	r1, r3
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f6c:	4413      	add	r3, r2
 8003f6e:	4619      	mov	r1, r3
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f7ff fdff 	bl	8003b74 <move_window>
 8003f76:	4603      	mov	r3, r0
 8003f78:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003f7a:	7ffb      	ldrb	r3, [r7, #31]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f040 809a 	bne.w	80040b6 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	899b      	ldrh	r3, [r3, #12]
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	fbb3 f0f2 	udiv	r0, r3, r2
 8003f94:	fb00 f202 	mul.w	r2, r0, r2
 8003f98:	1a9b      	subs	r3, r3, r2
 8003f9a:	440b      	add	r3, r1
 8003f9c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d003      	beq.n	8003fb0 <put_fat+0x11a>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	091b      	lsrs	r3, r3, #4
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	e00e      	b.n	8003fce <put_fat+0x138>
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	b25b      	sxtb	r3, r3
 8003fb6:	f023 030f 	bic.w	r3, r3, #15
 8003fba:	b25a      	sxtb	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	0a1b      	lsrs	r3, r3, #8
 8003fc0:	b25b      	sxtb	r3, r3
 8003fc2:	f003 030f 	and.w	r3, r3, #15
 8003fc6:	b25b      	sxtb	r3, r3
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	b25b      	sxtb	r3, r3
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	70da      	strb	r2, [r3, #3]
			break;
 8003fd8:	e072      	b.n	80040c0 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	899b      	ldrh	r3, [r3, #12]
 8003fe2:	085b      	lsrs	r3, r3, #1
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fee:	4413      	add	r3, r2
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	68f8      	ldr	r0, [r7, #12]
 8003ff4:	f7ff fdbe 	bl	8003b74 <move_window>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003ffc:	7ffb      	ldrb	r3, [r7, #31]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d15b      	bne.n	80040ba <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	005b      	lsls	r3, r3, #1
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	8992      	ldrh	r2, [r2, #12]
 8004010:	fbb3 f0f2 	udiv	r0, r3, r2
 8004014:	fb00 f202 	mul.w	r2, r0, r2
 8004018:	1a9b      	subs	r3, r3, r2
 800401a:	440b      	add	r3, r1
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	b292      	uxth	r2, r2
 8004020:	4611      	mov	r1, r2
 8004022:	4618      	mov	r0, r3
 8004024:	f7ff fb31 	bl	800368a <st_word>
			fs->wflag = 1;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2201      	movs	r2, #1
 800402c:	70da      	strb	r2, [r3, #3]
			break;
 800402e:	e047      	b.n	80040c0 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	899b      	ldrh	r3, [r3, #12]
 8004038:	089b      	lsrs	r3, r3, #2
 800403a:	b29b      	uxth	r3, r3
 800403c:	4619      	mov	r1, r3
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	fbb3 f3f1 	udiv	r3, r3, r1
 8004044:	4413      	add	r3, r2
 8004046:	4619      	mov	r1, r3
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f7ff fd93 	bl	8003b74 <move_window>
 800404e:	4603      	mov	r3, r0
 8004050:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004052:	7ffb      	ldrb	r3, [r7, #31]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d132      	bne.n	80040be <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	8992      	ldrh	r2, [r2, #12]
 800406c:	fbb3 f0f2 	udiv	r0, r3, r2
 8004070:	fb00 f202 	mul.w	r2, r0, r2
 8004074:	1a9b      	subs	r3, r3, r2
 8004076:	440b      	add	r3, r1
 8004078:	4618      	mov	r0, r3
 800407a:	f7ff fae3 	bl	8003644 <ld_dword>
 800407e:	4603      	mov	r3, r0
 8004080:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004084:	4323      	orrs	r3, r4
 8004086:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	8992      	ldrh	r2, [r2, #12]
 8004096:	fbb3 f0f2 	udiv	r0, r3, r2
 800409a:	fb00 f202 	mul.w	r2, r0, r2
 800409e:	1a9b      	subs	r3, r3, r2
 80040a0:	440b      	add	r3, r1
 80040a2:	6879      	ldr	r1, [r7, #4]
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7ff fb0b 	bl	80036c0 <st_dword>
			fs->wflag = 1;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2201      	movs	r2, #1
 80040ae:	70da      	strb	r2, [r3, #3]
			break;
 80040b0:	e006      	b.n	80040c0 <put_fat+0x22a>
			if (res != FR_OK) break;
 80040b2:	bf00      	nop
 80040b4:	e004      	b.n	80040c0 <put_fat+0x22a>
			if (res != FR_OK) break;
 80040b6:	bf00      	nop
 80040b8:	e002      	b.n	80040c0 <put_fat+0x22a>
			if (res != FR_OK) break;
 80040ba:	bf00      	nop
 80040bc:	e000      	b.n	80040c0 <put_fat+0x22a>
			if (res != FR_OK) break;
 80040be:	bf00      	nop
		}
	}
	return res;
 80040c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3724      	adds	r7, #36	; 0x24
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd90      	pop	{r4, r7, pc}

080040ca <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b088      	sub	sp, #32
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	60f8      	str	r0, [r7, #12]
 80040d2:	60b9      	str	r1, [r7, #8]
 80040d4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80040d6:	2300      	movs	r3, #0
 80040d8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d904      	bls.n	80040f0 <remove_chain+0x26>
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	68ba      	ldr	r2, [r7, #8]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d301      	bcc.n	80040f4 <remove_chain+0x2a>
 80040f0:	2302      	movs	r3, #2
 80040f2:	e04b      	b.n	800418c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00c      	beq.n	8004114 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80040fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040fe:	6879      	ldr	r1, [r7, #4]
 8004100:	69b8      	ldr	r0, [r7, #24]
 8004102:	f7ff fec8 	bl	8003e96 <put_fat>
 8004106:	4603      	mov	r3, r0
 8004108:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800410a:	7ffb      	ldrb	r3, [r7, #31]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <remove_chain+0x4a>
 8004110:	7ffb      	ldrb	r3, [r7, #31]
 8004112:	e03b      	b.n	800418c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004114:	68b9      	ldr	r1, [r7, #8]
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f7ff fde9 	bl	8003cee <get_fat>
 800411c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d031      	beq.n	8004188 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d101      	bne.n	800412e <remove_chain+0x64>
 800412a:	2302      	movs	r3, #2
 800412c:	e02e      	b.n	800418c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004134:	d101      	bne.n	800413a <remove_chain+0x70>
 8004136:	2301      	movs	r3, #1
 8004138:	e028      	b.n	800418c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800413a:	2200      	movs	r2, #0
 800413c:	68b9      	ldr	r1, [r7, #8]
 800413e:	69b8      	ldr	r0, [r7, #24]
 8004140:	f7ff fea9 	bl	8003e96 <put_fat>
 8004144:	4603      	mov	r3, r0
 8004146:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004148:	7ffb      	ldrb	r3, [r7, #31]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <remove_chain+0x88>
 800414e:	7ffb      	ldrb	r3, [r7, #31]
 8004150:	e01c      	b.n	800418c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	699a      	ldr	r2, [r3, #24]
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	69db      	ldr	r3, [r3, #28]
 800415a:	3b02      	subs	r3, #2
 800415c:	429a      	cmp	r2, r3
 800415e:	d20b      	bcs.n	8004178 <remove_chain+0xae>
			fs->free_clst++;
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	1c5a      	adds	r2, r3, #1
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	791b      	ldrb	r3, [r3, #4]
 800416e:	f043 0301 	orr.w	r3, r3, #1
 8004172:	b2da      	uxtb	r2, r3
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	69db      	ldr	r3, [r3, #28]
 8004180:	68ba      	ldr	r2, [r7, #8]
 8004182:	429a      	cmp	r2, r3
 8004184:	d3c6      	bcc.n	8004114 <remove_chain+0x4a>
 8004186:	e000      	b.n	800418a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004188:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3720      	adds	r7, #32
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b088      	sub	sp, #32
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10d      	bne.n	80041c6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d004      	beq.n	80041c0 <create_chain+0x2c>
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	69db      	ldr	r3, [r3, #28]
 80041ba:	69ba      	ldr	r2, [r7, #24]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d31b      	bcc.n	80041f8 <create_chain+0x64>
 80041c0:	2301      	movs	r3, #1
 80041c2:	61bb      	str	r3, [r7, #24]
 80041c4:	e018      	b.n	80041f8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80041c6:	6839      	ldr	r1, [r7, #0]
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f7ff fd90 	bl	8003cee <get_fat>
 80041ce:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d801      	bhi.n	80041da <create_chain+0x46>
 80041d6:	2301      	movs	r3, #1
 80041d8:	e070      	b.n	80042bc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041e0:	d101      	bne.n	80041e6 <create_chain+0x52>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	e06a      	b.n	80042bc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	69db      	ldr	r3, [r3, #28]
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d201      	bcs.n	80041f4 <create_chain+0x60>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	e063      	b.n	80042bc <create_chain+0x128>
		scl = clst;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	3301      	adds	r3, #1
 8004200:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	69db      	ldr	r3, [r3, #28]
 8004206:	69fa      	ldr	r2, [r7, #28]
 8004208:	429a      	cmp	r2, r3
 800420a:	d307      	bcc.n	800421c <create_chain+0x88>
				ncl = 2;
 800420c:	2302      	movs	r3, #2
 800420e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004210:	69fa      	ldr	r2, [r7, #28]
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	429a      	cmp	r2, r3
 8004216:	d901      	bls.n	800421c <create_chain+0x88>
 8004218:	2300      	movs	r3, #0
 800421a:	e04f      	b.n	80042bc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800421c:	69f9      	ldr	r1, [r7, #28]
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7ff fd65 	bl	8003cee <get_fat>
 8004224:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00e      	beq.n	800424a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d003      	beq.n	800423a <create_chain+0xa6>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004238:	d101      	bne.n	800423e <create_chain+0xaa>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	e03e      	b.n	80042bc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800423e:	69fa      	ldr	r2, [r7, #28]
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	429a      	cmp	r2, r3
 8004244:	d1da      	bne.n	80041fc <create_chain+0x68>
 8004246:	2300      	movs	r3, #0
 8004248:	e038      	b.n	80042bc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800424a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800424c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004250:	69f9      	ldr	r1, [r7, #28]
 8004252:	6938      	ldr	r0, [r7, #16]
 8004254:	f7ff fe1f 	bl	8003e96 <put_fat>
 8004258:	4603      	mov	r3, r0
 800425a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800425c:	7dfb      	ldrb	r3, [r7, #23]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d109      	bne.n	8004276 <create_chain+0xe2>
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d006      	beq.n	8004276 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004268:	69fa      	ldr	r2, [r7, #28]
 800426a:	6839      	ldr	r1, [r7, #0]
 800426c:	6938      	ldr	r0, [r7, #16]
 800426e:	f7ff fe12 	bl	8003e96 <put_fat>
 8004272:	4603      	mov	r3, r0
 8004274:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004276:	7dfb      	ldrb	r3, [r7, #23]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d116      	bne.n	80042aa <create_chain+0x116>
		fs->last_clst = ncl;
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	69fa      	ldr	r2, [r7, #28]
 8004280:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	699a      	ldr	r2, [r3, #24]
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	3b02      	subs	r3, #2
 800428c:	429a      	cmp	r2, r3
 800428e:	d804      	bhi.n	800429a <create_chain+0x106>
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	1e5a      	subs	r2, r3, #1
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	791b      	ldrb	r3, [r3, #4]
 800429e:	f043 0301 	orr.w	r3, r3, #1
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	711a      	strb	r2, [r3, #4]
 80042a8:	e007      	b.n	80042ba <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80042aa:	7dfb      	ldrb	r3, [r7, #23]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d102      	bne.n	80042b6 <create_chain+0x122>
 80042b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042b4:	e000      	b.n	80042b8 <create_chain+0x124>
 80042b6:	2301      	movs	r3, #1
 80042b8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80042ba:	69fb      	ldr	r3, [r7, #28]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3720      	adds	r7, #32
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b087      	sub	sp, #28
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d8:	3304      	adds	r3, #4
 80042da:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	899b      	ldrh	r3, [r3, #12]
 80042e0:	461a      	mov	r2, r3
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	8952      	ldrh	r2, [r2, #10]
 80042ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80042f0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	1d1a      	adds	r2, r3, #4
 80042f6:	613a      	str	r2, [r7, #16]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <clmt_clust+0x42>
 8004302:	2300      	movs	r3, #0
 8004304:	e010      	b.n	8004328 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	429a      	cmp	r2, r3
 800430c:	d307      	bcc.n	800431e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	617b      	str	r3, [r7, #20]
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	3304      	adds	r3, #4
 800431a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800431c:	e7e9      	b.n	80042f2 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800431e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	4413      	add	r3, r2
}
 8004328:	4618      	mov	r0, r3
 800432a:	371c      	adds	r7, #28
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800434a:	d204      	bcs.n	8004356 <dir_sdi+0x22>
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	f003 031f 	and.w	r3, r3, #31
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <dir_sdi+0x26>
		return FR_INT_ERR;
 8004356:	2302      	movs	r3, #2
 8004358:	e071      	b.n	800443e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	683a      	ldr	r2, [r7, #0]
 800435e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d106      	bne.n	800437a <dir_sdi+0x46>
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	2b02      	cmp	r3, #2
 8004372:	d902      	bls.n	800437a <dir_sdi+0x46>
		clst = fs->dirbase;
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004378:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10c      	bne.n	800439a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	095b      	lsrs	r3, r3, #5
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	8912      	ldrh	r2, [r2, #8]
 8004388:	4293      	cmp	r3, r2
 800438a:	d301      	bcc.n	8004390 <dir_sdi+0x5c>
 800438c:	2302      	movs	r3, #2
 800438e:	e056      	b.n	800443e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	61da      	str	r2, [r3, #28]
 8004398:	e02d      	b.n	80043f6 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	895b      	ldrh	r3, [r3, #10]
 800439e:	461a      	mov	r2, r3
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	899b      	ldrh	r3, [r3, #12]
 80043a4:	fb02 f303 	mul.w	r3, r2, r3
 80043a8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80043aa:	e019      	b.n	80043e0 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6979      	ldr	r1, [r7, #20]
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7ff fc9c 	bl	8003cee <get_fat>
 80043b6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043be:	d101      	bne.n	80043c4 <dir_sdi+0x90>
 80043c0:	2301      	movs	r3, #1
 80043c2:	e03c      	b.n	800443e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d904      	bls.n	80043d4 <dir_sdi+0xa0>
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d301      	bcc.n	80043d8 <dir_sdi+0xa4>
 80043d4:	2302      	movs	r3, #2
 80043d6:	e032      	b.n	800443e <dir_sdi+0x10a>
			ofs -= csz;
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d2e1      	bcs.n	80043ac <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80043e8:	6979      	ldr	r1, [r7, #20]
 80043ea:	6938      	ldr	r0, [r7, #16]
 80043ec:	f7ff fc60 	bl	8003cb0 <clust2sect>
 80043f0:	4602      	mov	r2, r0
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	697a      	ldr	r2, [r7, #20]
 80043fa:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	69db      	ldr	r3, [r3, #28]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d101      	bne.n	8004408 <dir_sdi+0xd4>
 8004404:	2302      	movs	r3, #2
 8004406:	e01a      	b.n	800443e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	69da      	ldr	r2, [r3, #28]
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	899b      	ldrh	r3, [r3, #12]
 8004410:	4619      	mov	r1, r3
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	fbb3 f3f1 	udiv	r3, r3, r1
 8004418:	441a      	add	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	899b      	ldrh	r3, [r3, #12]
 8004428:	461a      	mov	r2, r3
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	fbb3 f0f2 	udiv	r0, r3, r2
 8004430:	fb00 f202 	mul.w	r2, r0, r2
 8004434:	1a9b      	subs	r3, r3, r2
 8004436:	18ca      	adds	r2, r1, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3718      	adds	r7, #24
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b086      	sub	sp, #24
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
 800444e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	3320      	adds	r3, #32
 800445c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	69db      	ldr	r3, [r3, #28]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d003      	beq.n	800446e <dir_next+0x28>
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800446c:	d301      	bcc.n	8004472 <dir_next+0x2c>
 800446e:	2304      	movs	r3, #4
 8004470:	e0bb      	b.n	80045ea <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	899b      	ldrh	r3, [r3, #12]
 8004476:	461a      	mov	r2, r3
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	fbb3 f1f2 	udiv	r1, r3, r2
 800447e:	fb01 f202 	mul.w	r2, r1, r2
 8004482:	1a9b      	subs	r3, r3, r2
 8004484:	2b00      	cmp	r3, #0
 8004486:	f040 809d 	bne.w	80045c4 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	69db      	ldr	r3, [r3, #28]
 800448e:	1c5a      	adds	r2, r3, #1
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d10b      	bne.n	80044b4 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	095b      	lsrs	r3, r3, #5
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	8912      	ldrh	r2, [r2, #8]
 80044a4:	4293      	cmp	r3, r2
 80044a6:	f0c0 808d 	bcc.w	80045c4 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	61da      	str	r2, [r3, #28]
 80044b0:	2304      	movs	r3, #4
 80044b2:	e09a      	b.n	80045ea <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	899b      	ldrh	r3, [r3, #12]
 80044b8:	461a      	mov	r2, r3
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	8952      	ldrh	r2, [r2, #10]
 80044c4:	3a01      	subs	r2, #1
 80044c6:	4013      	ands	r3, r2
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d17b      	bne.n	80045c4 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	4619      	mov	r1, r3
 80044d4:	4610      	mov	r0, r2
 80044d6:	f7ff fc0a 	bl	8003cee <get_fat>
 80044da:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d801      	bhi.n	80044e6 <dir_next+0xa0>
 80044e2:	2302      	movs	r3, #2
 80044e4:	e081      	b.n	80045ea <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044ec:	d101      	bne.n	80044f2 <dir_next+0xac>
 80044ee:	2301      	movs	r3, #1
 80044f0:	e07b      	b.n	80045ea <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	69db      	ldr	r3, [r3, #28]
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d359      	bcc.n	80045b0 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d104      	bne.n	800450c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	61da      	str	r2, [r3, #28]
 8004508:	2304      	movs	r3, #4
 800450a:	e06e      	b.n	80045ea <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	4619      	mov	r1, r3
 8004514:	4610      	mov	r0, r2
 8004516:	f7ff fe3d 	bl	8004194 <create_chain>
 800451a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <dir_next+0xe0>
 8004522:	2307      	movs	r3, #7
 8004524:	e061      	b.n	80045ea <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d101      	bne.n	8004530 <dir_next+0xea>
 800452c:	2302      	movs	r3, #2
 800452e:	e05c      	b.n	80045ea <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004536:	d101      	bne.n	800453c <dir_next+0xf6>
 8004538:	2301      	movs	r3, #1
 800453a:	e056      	b.n	80045ea <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	f7ff fad5 	bl	8003aec <sync_window>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d001      	beq.n	800454c <dir_next+0x106>
 8004548:	2301      	movs	r3, #1
 800454a:	e04e      	b.n	80045ea <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	899b      	ldrh	r3, [r3, #12]
 8004556:	461a      	mov	r2, r3
 8004558:	2100      	movs	r1, #0
 800455a:	f7ff f8fe 	bl	800375a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800455e:	2300      	movs	r3, #0
 8004560:	613b      	str	r3, [r7, #16]
 8004562:	6979      	ldr	r1, [r7, #20]
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f7ff fba3 	bl	8003cb0 <clust2sect>
 800456a:	4602      	mov	r2, r0
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	635a      	str	r2, [r3, #52]	; 0x34
 8004570:	e012      	b.n	8004598 <dir_next+0x152>
						fs->wflag = 1;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2201      	movs	r2, #1
 8004576:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	f7ff fab7 	bl	8003aec <sync_window>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d001      	beq.n	8004588 <dir_next+0x142>
 8004584:	2301      	movs	r3, #1
 8004586:	e030      	b.n	80045ea <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	3301      	adds	r3, #1
 800458c:	613b      	str	r3, [r7, #16]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004592:	1c5a      	adds	r2, r3, #1
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	635a      	str	r2, [r3, #52]	; 0x34
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	895b      	ldrh	r3, [r3, #10]
 800459c:	461a      	mov	r2, r3
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d3e6      	bcc.n	8004572 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	1ad2      	subs	r2, r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80045b6:	6979      	ldr	r1, [r7, #20]
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f7ff fb79 	bl	8003cb0 <clust2sect>
 80045be:	4602      	mov	r2, r0
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68ba      	ldr	r2, [r7, #8]
 80045c8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	899b      	ldrh	r3, [r3, #12]
 80045d4:	461a      	mov	r2, r3
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	fbb3 f0f2 	udiv	r0, r3, r2
 80045dc:	fb00 f202 	mul.w	r2, r0, r2
 80045e0:	1a9b      	subs	r3, r3, r2
 80045e2:	18ca      	adds	r2, r1, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3718      	adds	r7, #24
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b086      	sub	sp, #24
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
 80045fa:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004602:	2100      	movs	r1, #0
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f7ff fe95 	bl	8004334 <dir_sdi>
 800460a:	4603      	mov	r3, r0
 800460c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800460e:	7dfb      	ldrb	r3, [r7, #23]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d12b      	bne.n	800466c <dir_alloc+0x7a>
		n = 0;
 8004614:	2300      	movs	r3, #0
 8004616:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	69db      	ldr	r3, [r3, #28]
 800461c:	4619      	mov	r1, r3
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f7ff faa8 	bl	8003b74 <move_window>
 8004624:	4603      	mov	r3, r0
 8004626:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004628:	7dfb      	ldrb	r3, [r7, #23]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d11d      	bne.n	800466a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	2be5      	cmp	r3, #229	; 0xe5
 8004636:	d004      	beq.n	8004642 <dir_alloc+0x50>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d107      	bne.n	8004652 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	3301      	adds	r3, #1
 8004646:	613b      	str	r3, [r7, #16]
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	429a      	cmp	r2, r3
 800464e:	d102      	bne.n	8004656 <dir_alloc+0x64>
 8004650:	e00c      	b.n	800466c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004652:	2300      	movs	r3, #0
 8004654:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8004656:	2101      	movs	r1, #1
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f7ff fef4 	bl	8004446 <dir_next>
 800465e:	4603      	mov	r3, r0
 8004660:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004662:	7dfb      	ldrb	r3, [r7, #23]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d0d7      	beq.n	8004618 <dir_alloc+0x26>
 8004668:	e000      	b.n	800466c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800466a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800466c:	7dfb      	ldrb	r3, [r7, #23]
 800466e:	2b04      	cmp	r3, #4
 8004670:	d101      	bne.n	8004676 <dir_alloc+0x84>
 8004672:	2307      	movs	r3, #7
 8004674:	75fb      	strb	r3, [r7, #23]
	return res;
 8004676:	7dfb      	ldrb	r3, [r7, #23]
}
 8004678:	4618      	mov	r0, r3
 800467a:	3718      	adds	r7, #24
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	331a      	adds	r3, #26
 800468e:	4618      	mov	r0, r3
 8004690:	f7fe ffc0 	bl	8003614 <ld_word>
 8004694:	4603      	mov	r3, r0
 8004696:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	2b03      	cmp	r3, #3
 800469e:	d109      	bne.n	80046b4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	3314      	adds	r3, #20
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7fe ffb5 	bl	8003614 <ld_word>
 80046aa:	4603      	mov	r3, r0
 80046ac:	041b      	lsls	r3, r3, #16
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80046b4:	68fb      	ldr	r3, [r7, #12]
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b084      	sub	sp, #16
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	60f8      	str	r0, [r7, #12]
 80046c6:	60b9      	str	r1, [r7, #8]
 80046c8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	331a      	adds	r3, #26
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	b292      	uxth	r2, r2
 80046d2:	4611      	mov	r1, r2
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7fe ffd8 	bl	800368a <st_word>
	if (fs->fs_type == FS_FAT32) {
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	2b03      	cmp	r3, #3
 80046e0:	d109      	bne.n	80046f6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	f103 0214 	add.w	r2, r3, #20
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	0c1b      	lsrs	r3, r3, #16
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	4619      	mov	r1, r3
 80046f0:	4610      	mov	r0, r2
 80046f2:	f7fe ffca 	bl	800368a <st_word>
	}
}
 80046f6:	bf00      	nop
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
	...

08004700 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8004700:	b590      	push	{r4, r7, lr}
 8004702:	b087      	sub	sp, #28
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	331a      	adds	r3, #26
 800470e:	4618      	mov	r0, r3
 8004710:	f7fe ff80 	bl	8003614 <ld_word>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <cmp_lfn+0x1e>
 800471a:	2300      	movs	r3, #0
 800471c:	e059      	b.n	80047d2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004726:	1e5a      	subs	r2, r3, #1
 8004728:	4613      	mov	r3, r2
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	4413      	add	r3, r2
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	4413      	add	r3, r2
 8004732:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004734:	2301      	movs	r3, #1
 8004736:	81fb      	strh	r3, [r7, #14]
 8004738:	2300      	movs	r3, #0
 800473a:	613b      	str	r3, [r7, #16]
 800473c:	e033      	b.n	80047a6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800473e:	4a27      	ldr	r2, [pc, #156]	; (80047dc <cmp_lfn+0xdc>)
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	4413      	add	r3, r2
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	461a      	mov	r2, r3
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	4413      	add	r3, r2
 800474c:	4618      	mov	r0, r3
 800474e:	f7fe ff61 	bl	8003614 <ld_word>
 8004752:	4603      	mov	r3, r0
 8004754:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8004756:	89fb      	ldrh	r3, [r7, #14]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d01a      	beq.n	8004792 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	2bfe      	cmp	r3, #254	; 0xfe
 8004760:	d812      	bhi.n	8004788 <cmp_lfn+0x88>
 8004762:	89bb      	ldrh	r3, [r7, #12]
 8004764:	4618      	mov	r0, r3
 8004766:	f002 f835 	bl	80067d4 <ff_wtoupper>
 800476a:	4603      	mov	r3, r0
 800476c:	461c      	mov	r4, r3
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	1c5a      	adds	r2, r3, #1
 8004772:	617a      	str	r2, [r7, #20]
 8004774:	005b      	lsls	r3, r3, #1
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	4413      	add	r3, r2
 800477a:	881b      	ldrh	r3, [r3, #0]
 800477c:	4618      	mov	r0, r3
 800477e:	f002 f829 	bl	80067d4 <ff_wtoupper>
 8004782:	4603      	mov	r3, r0
 8004784:	429c      	cmp	r4, r3
 8004786:	d001      	beq.n	800478c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8004788:	2300      	movs	r3, #0
 800478a:	e022      	b.n	80047d2 <cmp_lfn+0xd2>
			}
			wc = uc;
 800478c:	89bb      	ldrh	r3, [r7, #12]
 800478e:	81fb      	strh	r3, [r7, #14]
 8004790:	e006      	b.n	80047a0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8004792:	89bb      	ldrh	r3, [r7, #12]
 8004794:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004798:	4293      	cmp	r3, r2
 800479a:	d001      	beq.n	80047a0 <cmp_lfn+0xa0>
 800479c:	2300      	movs	r3, #0
 800479e:	e018      	b.n	80047d2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	3301      	adds	r3, #1
 80047a4:	613b      	str	r3, [r7, #16]
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	2b0c      	cmp	r3, #12
 80047aa:	d9c8      	bls.n	800473e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00b      	beq.n	80047d0 <cmp_lfn+0xd0>
 80047b8:	89fb      	ldrh	r3, [r7, #14]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d008      	beq.n	80047d0 <cmp_lfn+0xd0>
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	005b      	lsls	r3, r3, #1
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	4413      	add	r3, r2
 80047c6:	881b      	ldrh	r3, [r3, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d001      	beq.n	80047d0 <cmp_lfn+0xd0>
 80047cc:	2300      	movs	r3, #0
 80047ce:	e000      	b.n	80047d2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80047d0:	2301      	movs	r3, #1
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	371c      	adds	r7, #28
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd90      	pop	{r4, r7, pc}
 80047da:	bf00      	nop
 80047dc:	08006a70 	.word	0x08006a70

080047e0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b088      	sub	sp, #32
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	4611      	mov	r1, r2
 80047ec:	461a      	mov	r2, r3
 80047ee:	460b      	mov	r3, r1
 80047f0:	71fb      	strb	r3, [r7, #7]
 80047f2:	4613      	mov	r3, r2
 80047f4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	330d      	adds	r3, #13
 80047fa:	79ba      	ldrb	r2, [r7, #6]
 80047fc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	330b      	adds	r3, #11
 8004802:	220f      	movs	r2, #15
 8004804:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	330c      	adds	r3, #12
 800480a:	2200      	movs	r2, #0
 800480c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	331a      	adds	r3, #26
 8004812:	2100      	movs	r1, #0
 8004814:	4618      	mov	r0, r3
 8004816:	f7fe ff38 	bl	800368a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800481a:	79fb      	ldrb	r3, [r7, #7]
 800481c:	1e5a      	subs	r2, r3, #1
 800481e:	4613      	mov	r3, r2
 8004820:	005b      	lsls	r3, r3, #1
 8004822:	4413      	add	r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	4413      	add	r3, r2
 8004828:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800482a:	2300      	movs	r3, #0
 800482c:	82fb      	strh	r3, [r7, #22]
 800482e:	2300      	movs	r3, #0
 8004830:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8004832:	8afb      	ldrh	r3, [r7, #22]
 8004834:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004838:	4293      	cmp	r3, r2
 800483a:	d007      	beq.n	800484c <put_lfn+0x6c>
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	1c5a      	adds	r2, r3, #1
 8004840:	61fa      	str	r2, [r7, #28]
 8004842:	005b      	lsls	r3, r3, #1
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	4413      	add	r3, r2
 8004848:	881b      	ldrh	r3, [r3, #0]
 800484a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800484c:	4a17      	ldr	r2, [pc, #92]	; (80048ac <put_lfn+0xcc>)
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	4413      	add	r3, r2
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	461a      	mov	r2, r3
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	4413      	add	r3, r2
 800485a:	8afa      	ldrh	r2, [r7, #22]
 800485c:	4611      	mov	r1, r2
 800485e:	4618      	mov	r0, r3
 8004860:	f7fe ff13 	bl	800368a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8004864:	8afb      	ldrh	r3, [r7, #22]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d102      	bne.n	8004870 <put_lfn+0x90>
 800486a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800486e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	3301      	adds	r3, #1
 8004874:	61bb      	str	r3, [r7, #24]
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	2b0c      	cmp	r3, #12
 800487a:	d9da      	bls.n	8004832 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800487c:	8afb      	ldrh	r3, [r7, #22]
 800487e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004882:	4293      	cmp	r3, r2
 8004884:	d006      	beq.n	8004894 <put_lfn+0xb4>
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	005b      	lsls	r3, r3, #1
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	4413      	add	r3, r2
 800488e:	881b      	ldrh	r3, [r3, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d103      	bne.n	800489c <put_lfn+0xbc>
 8004894:	79fb      	ldrb	r3, [r7, #7]
 8004896:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800489a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	79fa      	ldrb	r2, [r7, #7]
 80048a0:	701a      	strb	r2, [r3, #0]
}
 80048a2:	bf00      	nop
 80048a4:	3720      	adds	r7, #32
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	08006a70 	.word	0x08006a70

080048b0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b08c      	sub	sp, #48	; 0x30
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
 80048bc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80048be:	220b      	movs	r2, #11
 80048c0:	68b9      	ldr	r1, [r7, #8]
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f7fe ff28 	bl	8003718 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	2b05      	cmp	r3, #5
 80048cc:	d92b      	bls.n	8004926 <gen_numname+0x76>
		sr = seq;
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80048d2:	e022      	b.n	800491a <gen_numname+0x6a>
			wc = *lfn++;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	1c9a      	adds	r2, r3, #2
 80048d8:	607a      	str	r2, [r7, #4]
 80048da:	881b      	ldrh	r3, [r3, #0]
 80048dc:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80048de:	2300      	movs	r3, #0
 80048e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80048e2:	e017      	b.n	8004914 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	005a      	lsls	r2, r3, #1
 80048e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	4413      	add	r3, r2
 80048f0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80048f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80048f4:	085b      	lsrs	r3, r3, #1
 80048f6:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d005      	beq.n	800490e <gen_numname+0x5e>
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8004908:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800490c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800490e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004910:	3301      	adds	r3, #1
 8004912:	62bb      	str	r3, [r7, #40]	; 0x28
 8004914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004916:	2b0f      	cmp	r3, #15
 8004918:	d9e4      	bls.n	80048e4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	881b      	ldrh	r3, [r3, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1d8      	bne.n	80048d4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8004926:	2307      	movs	r3, #7
 8004928:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	b2db      	uxtb	r3, r3
 800492e:	f003 030f 	and.w	r3, r3, #15
 8004932:	b2db      	uxtb	r3, r3
 8004934:	3330      	adds	r3, #48	; 0x30
 8004936:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800493a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800493e:	2b39      	cmp	r3, #57	; 0x39
 8004940:	d904      	bls.n	800494c <gen_numname+0x9c>
 8004942:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004946:	3307      	adds	r3, #7
 8004948:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800494c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494e:	1e5a      	subs	r2, r3, #1
 8004950:	62ba      	str	r2, [r7, #40]	; 0x28
 8004952:	3330      	adds	r3, #48	; 0x30
 8004954:	443b      	add	r3, r7
 8004956:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800495a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	091b      	lsrs	r3, r3, #4
 8004962:	603b      	str	r3, [r7, #0]
	} while (seq);
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1df      	bne.n	800492a <gen_numname+0x7a>
	ns[i] = '~';
 800496a:	f107 0214 	add.w	r2, r7, #20
 800496e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004970:	4413      	add	r3, r2
 8004972:	227e      	movs	r2, #126	; 0x7e
 8004974:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8004976:	2300      	movs	r3, #0
 8004978:	627b      	str	r3, [r7, #36]	; 0x24
 800497a:	e002      	b.n	8004982 <gen_numname+0xd2>
 800497c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497e:	3301      	adds	r3, #1
 8004980:	627b      	str	r3, [r7, #36]	; 0x24
 8004982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004986:	429a      	cmp	r2, r3
 8004988:	d205      	bcs.n	8004996 <gen_numname+0xe6>
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498e:	4413      	add	r3, r2
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	2b20      	cmp	r3, #32
 8004994:	d1f2      	bne.n	800497c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8004996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004998:	2b07      	cmp	r3, #7
 800499a:	d807      	bhi.n	80049ac <gen_numname+0xfc>
 800499c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499e:	1c5a      	adds	r2, r3, #1
 80049a0:	62ba      	str	r2, [r7, #40]	; 0x28
 80049a2:	3330      	adds	r3, #48	; 0x30
 80049a4:	443b      	add	r3, r7
 80049a6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80049aa:	e000      	b.n	80049ae <gen_numname+0xfe>
 80049ac:	2120      	movs	r1, #32
 80049ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b0:	1c5a      	adds	r2, r3, #1
 80049b2:	627a      	str	r2, [r7, #36]	; 0x24
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	4413      	add	r3, r2
 80049b8:	460a      	mov	r2, r1
 80049ba:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80049bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049be:	2b07      	cmp	r3, #7
 80049c0:	d9e9      	bls.n	8004996 <gen_numname+0xe6>
}
 80049c2:	bf00      	nop
 80049c4:	bf00      	nop
 80049c6:	3730      	adds	r7, #48	; 0x30
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80049d4:	2300      	movs	r3, #0
 80049d6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80049d8:	230b      	movs	r3, #11
 80049da:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80049dc:	7bfb      	ldrb	r3, [r7, #15]
 80049de:	b2da      	uxtb	r2, r3
 80049e0:	0852      	lsrs	r2, r2, #1
 80049e2:	01db      	lsls	r3, r3, #7
 80049e4:	4313      	orrs	r3, r2
 80049e6:	b2da      	uxtb	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	1c59      	adds	r1, r3, #1
 80049ec:	6079      	str	r1, [r7, #4]
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	4413      	add	r3, r2
 80049f2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	3b01      	subs	r3, #1
 80049f8:	60bb      	str	r3, [r7, #8]
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1ed      	bne.n	80049dc <sum_sfn+0x10>
	return sum;
 8004a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3714      	adds	r7, #20
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b086      	sub	sp, #24
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004a1c:	2100      	movs	r1, #0
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f7ff fc88 	bl	8004334 <dir_sdi>
 8004a24:	4603      	mov	r3, r0
 8004a26:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004a28:	7dfb      	ldrb	r3, [r7, #23]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d001      	beq.n	8004a32 <dir_find+0x24>
 8004a2e:	7dfb      	ldrb	r3, [r7, #23]
 8004a30:	e0a9      	b.n	8004b86 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8004a32:	23ff      	movs	r3, #255	; 0xff
 8004a34:	753b      	strb	r3, [r7, #20]
 8004a36:	7d3b      	ldrb	r3, [r7, #20]
 8004a38:	757b      	strb	r3, [r7, #21]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a40:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	4619      	mov	r1, r3
 8004a48:	6938      	ldr	r0, [r7, #16]
 8004a4a:	f7ff f893 	bl	8003b74 <move_window>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004a52:	7dfb      	ldrb	r3, [r7, #23]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f040 8090 	bne.w	8004b7a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004a62:	7dbb      	ldrb	r3, [r7, #22]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d102      	bne.n	8004a6e <dir_find+0x60>
 8004a68:	2304      	movs	r3, #4
 8004a6a:	75fb      	strb	r3, [r7, #23]
 8004a6c:	e08a      	b.n	8004b84 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	330b      	adds	r3, #11
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a7a:	73fb      	strb	r3, [r7, #15]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	7bfa      	ldrb	r2, [r7, #15]
 8004a80:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8004a82:	7dbb      	ldrb	r3, [r7, #22]
 8004a84:	2be5      	cmp	r3, #229	; 0xe5
 8004a86:	d007      	beq.n	8004a98 <dir_find+0x8a>
 8004a88:	7bfb      	ldrb	r3, [r7, #15]
 8004a8a:	f003 0308 	and.w	r3, r3, #8
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d009      	beq.n	8004aa6 <dir_find+0x98>
 8004a92:	7bfb      	ldrb	r3, [r7, #15]
 8004a94:	2b0f      	cmp	r3, #15
 8004a96:	d006      	beq.n	8004aa6 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8004a98:	23ff      	movs	r3, #255	; 0xff
 8004a9a:	757b      	strb	r3, [r7, #21]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004aa2:	631a      	str	r2, [r3, #48]	; 0x30
 8004aa4:	e05e      	b.n	8004b64 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8004aa6:	7bfb      	ldrb	r3, [r7, #15]
 8004aa8:	2b0f      	cmp	r3, #15
 8004aaa:	d136      	bne.n	8004b1a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d154      	bne.n	8004b64 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8004aba:	7dbb      	ldrb	r3, [r7, #22]
 8004abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00d      	beq.n	8004ae0 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a1b      	ldr	r3, [r3, #32]
 8004ac8:	7b5b      	ldrb	r3, [r3, #13]
 8004aca:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8004acc:	7dbb      	ldrb	r3, [r7, #22]
 8004ace:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ad2:	75bb      	strb	r3, [r7, #22]
 8004ad4:	7dbb      	ldrb	r3, [r7, #22]
 8004ad6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	695a      	ldr	r2, [r3, #20]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8004ae0:	7dba      	ldrb	r2, [r7, #22]
 8004ae2:	7d7b      	ldrb	r3, [r7, #21]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d115      	bne.n	8004b14 <dir_find+0x106>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a1b      	ldr	r3, [r3, #32]
 8004aec:	330d      	adds	r3, #13
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	7d3a      	ldrb	r2, [r7, #20]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d10e      	bne.n	8004b14 <dir_find+0x106>
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	691a      	ldr	r2, [r3, #16]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	4619      	mov	r1, r3
 8004b00:	4610      	mov	r0, r2
 8004b02:	f7ff fdfd 	bl	8004700 <cmp_lfn>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d003      	beq.n	8004b14 <dir_find+0x106>
 8004b0c:	7d7b      	ldrb	r3, [r7, #21]
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	e000      	b.n	8004b16 <dir_find+0x108>
 8004b14:	23ff      	movs	r3, #255	; 0xff
 8004b16:	757b      	strb	r3, [r7, #21]
 8004b18:	e024      	b.n	8004b64 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8004b1a:	7d7b      	ldrb	r3, [r7, #21]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d109      	bne.n	8004b34 <dir_find+0x126>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a1b      	ldr	r3, [r3, #32]
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7ff ff51 	bl	80049cc <sum_sfn>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	7d3b      	ldrb	r3, [r7, #20]
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d024      	beq.n	8004b7e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10a      	bne.n	8004b58 <dir_find+0x14a>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a18      	ldr	r0, [r3, #32]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	3324      	adds	r3, #36	; 0x24
 8004b4a:	220b      	movs	r2, #11
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	f7fe fe1f 	bl	8003790 <mem_cmp>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d014      	beq.n	8004b82 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8004b58:	23ff      	movs	r3, #255	; 0xff
 8004b5a:	757b      	strb	r3, [r7, #21]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b62:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8004b64:	2100      	movs	r1, #0
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7ff fc6d 	bl	8004446 <dir_next>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004b70:	7dfb      	ldrb	r3, [r7, #23]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f43f af65 	beq.w	8004a42 <dir_find+0x34>
 8004b78:	e004      	b.n	8004b84 <dir_find+0x176>
		if (res != FR_OK) break;
 8004b7a:	bf00      	nop
 8004b7c:	e002      	b.n	8004b84 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8004b7e:	bf00      	nop
 8004b80:	e000      	b.n	8004b84 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8004b82:	bf00      	nop

	return res;
 8004b84:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3718      	adds	r7, #24
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
	...

08004b90 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b08c      	sub	sp, #48	; 0x30
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004ba4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d001      	beq.n	8004bb0 <dir_register+0x20>
 8004bac:	2306      	movs	r3, #6
 8004bae:	e0e0      	b.n	8004d72 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8004bb4:	e002      	b.n	8004bbc <dir_register+0x2c>
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb8:	3301      	adds	r3, #1
 8004bba:	627b      	str	r3, [r7, #36]	; 0x24
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	691a      	ldr	r2, [r3, #16]
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc2:	005b      	lsls	r3, r3, #1
 8004bc4:	4413      	add	r3, r2
 8004bc6:	881b      	ldrh	r3, [r3, #0]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1f4      	bne.n	8004bb6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8004bd2:	f107 030c 	add.w	r3, r7, #12
 8004bd6:	220c      	movs	r2, #12
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7fe fd9d 	bl	8003718 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8004bde:	7dfb      	ldrb	r3, [r7, #23]
 8004be0:	f003 0301 	and.w	r3, r3, #1
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d032      	beq.n	8004c4e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2240      	movs	r2, #64	; 0x40
 8004bec:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bf4:	e016      	b.n	8004c24 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	691a      	ldr	r2, [r3, #16]
 8004c00:	f107 010c 	add.w	r1, r7, #12
 8004c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c06:	f7ff fe53 	bl	80048b0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f7ff feff 	bl	8004a0e <dir_find>
 8004c10:	4603      	mov	r3, r0
 8004c12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8004c16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d106      	bne.n	8004c2c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8004c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c20:	3301      	adds	r3, #1
 8004c22:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c26:	2b63      	cmp	r3, #99	; 0x63
 8004c28:	d9e5      	bls.n	8004bf6 <dir_register+0x66>
 8004c2a:	e000      	b.n	8004c2e <dir_register+0x9e>
			if (res != FR_OK) break;
 8004c2c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8004c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c30:	2b64      	cmp	r3, #100	; 0x64
 8004c32:	d101      	bne.n	8004c38 <dir_register+0xa8>
 8004c34:	2307      	movs	r3, #7
 8004c36:	e09c      	b.n	8004d72 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8004c38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004c3c:	2b04      	cmp	r3, #4
 8004c3e:	d002      	beq.n	8004c46 <dir_register+0xb6>
 8004c40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004c44:	e095      	b.n	8004d72 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8004c46:	7dfa      	ldrb	r2, [r7, #23]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8004c4e:	7dfb      	ldrb	r3, [r7, #23]
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d007      	beq.n	8004c68 <dir_register+0xd8>
 8004c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5a:	330c      	adds	r3, #12
 8004c5c:	4a47      	ldr	r2, [pc, #284]	; (8004d7c <dir_register+0x1ec>)
 8004c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c62:	089b      	lsrs	r3, r3, #2
 8004c64:	3301      	adds	r3, #1
 8004c66:	e000      	b.n	8004c6a <dir_register+0xda>
 8004c68:	2301      	movs	r3, #1
 8004c6a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8004c6c:	6a39      	ldr	r1, [r7, #32]
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7ff fcbf 	bl	80045f2 <dir_alloc>
 8004c74:	4603      	mov	r3, r0
 8004c76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8004c7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d148      	bne.n	8004d14 <dir_register+0x184>
 8004c82:	6a3b      	ldr	r3, [r7, #32]
 8004c84:	3b01      	subs	r3, #1
 8004c86:	623b      	str	r3, [r7, #32]
 8004c88:	6a3b      	ldr	r3, [r7, #32]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d042      	beq.n	8004d14 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	695a      	ldr	r2, [r3, #20]
 8004c92:	6a3b      	ldr	r3, [r7, #32]
 8004c94:	015b      	lsls	r3, r3, #5
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	4619      	mov	r1, r3
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f7ff fb4a 	bl	8004334 <dir_sdi>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8004ca6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d132      	bne.n	8004d14 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	3324      	adds	r3, #36	; 0x24
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7ff fe8a 	bl	80049cc <sum_sfn>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	69db      	ldr	r3, [r3, #28]
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	69f8      	ldr	r0, [r7, #28]
 8004cc4:	f7fe ff56 	bl	8003b74 <move_window>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8004cce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d11d      	bne.n	8004d12 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	6918      	ldr	r0, [r3, #16]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a19      	ldr	r1, [r3, #32]
 8004cde:	6a3b      	ldr	r3, [r7, #32]
 8004ce0:	b2da      	uxtb	r2, r3
 8004ce2:	7efb      	ldrb	r3, [r7, #27]
 8004ce4:	f7ff fd7c 	bl	80047e0 <put_lfn>
				fs->wflag = 1;
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	2201      	movs	r2, #1
 8004cec:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8004cee:	2100      	movs	r1, #0
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f7ff fba8 	bl	8004446 <dir_next>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8004cfc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d107      	bne.n	8004d14 <dir_register+0x184>
 8004d04:	6a3b      	ldr	r3, [r7, #32]
 8004d06:	3b01      	subs	r3, #1
 8004d08:	623b      	str	r3, [r7, #32]
 8004d0a:	6a3b      	ldr	r3, [r7, #32]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1d5      	bne.n	8004cbc <dir_register+0x12c>
 8004d10:	e000      	b.n	8004d14 <dir_register+0x184>
				if (res != FR_OK) break;
 8004d12:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8004d14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d128      	bne.n	8004d6e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	69db      	ldr	r3, [r3, #28]
 8004d20:	4619      	mov	r1, r3
 8004d22:	69f8      	ldr	r0, [r7, #28]
 8004d24:	f7fe ff26 	bl	8003b74 <move_window>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8004d2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d11b      	bne.n	8004d6e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	2100      	movs	r1, #0
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7fe fd0b 	bl	800375a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a18      	ldr	r0, [r3, #32]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	3324      	adds	r3, #36	; 0x24
 8004d4c:	220b      	movs	r2, #11
 8004d4e:	4619      	mov	r1, r3
 8004d50:	f7fe fce2 	bl	8003718 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
 8004d5e:	330c      	adds	r3, #12
 8004d60:	f002 0218 	and.w	r2, r2, #24
 8004d64:	b2d2      	uxtb	r2, r2
 8004d66:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8004d6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3730      	adds	r7, #48	; 0x30
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	4ec4ec4f 	.word	0x4ec4ec4f

08004d80 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b08a      	sub	sp, #40	; 0x28
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	613b      	str	r3, [r7, #16]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	60fb      	str	r3, [r7, #12]
 8004d98:	2300      	movs	r3, #0
 8004d9a:	617b      	str	r3, [r7, #20]
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	1c5a      	adds	r2, r3, #1
 8004da4:	61ba      	str	r2, [r7, #24]
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	4413      	add	r3, r2
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8004dae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004db0:	2b1f      	cmp	r3, #31
 8004db2:	d940      	bls.n	8004e36 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8004db4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004db6:	2b2f      	cmp	r3, #47	; 0x2f
 8004db8:	d006      	beq.n	8004dc8 <create_name+0x48>
 8004dba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004dbc:	2b5c      	cmp	r3, #92	; 0x5c
 8004dbe:	d110      	bne.n	8004de2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8004dc0:	e002      	b.n	8004dc8 <create_name+0x48>
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	61bb      	str	r3, [r7, #24]
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	4413      	add	r3, r2
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	2b2f      	cmp	r3, #47	; 0x2f
 8004dd2:	d0f6      	beq.n	8004dc2 <create_name+0x42>
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	4413      	add	r3, r2
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	2b5c      	cmp	r3, #92	; 0x5c
 8004dde:	d0f0      	beq.n	8004dc2 <create_name+0x42>
			break;
 8004de0:	e02a      	b.n	8004e38 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	2bfe      	cmp	r3, #254	; 0xfe
 8004de6:	d901      	bls.n	8004dec <create_name+0x6c>
 8004de8:	2306      	movs	r3, #6
 8004dea:	e17d      	b.n	80050e8 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8004dec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8004df2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004df4:	2101      	movs	r1, #1
 8004df6:	4618      	mov	r0, r3
 8004df8:	f001 fcb0 	bl	800675c <ff_convert>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8004e00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <create_name+0x8a>
 8004e06:	2306      	movs	r3, #6
 8004e08:	e16e      	b.n	80050e8 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8004e0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e0c:	2b7f      	cmp	r3, #127	; 0x7f
 8004e0e:	d809      	bhi.n	8004e24 <create_name+0xa4>
 8004e10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e12:	4619      	mov	r1, r3
 8004e14:	488d      	ldr	r0, [pc, #564]	; (800504c <create_name+0x2cc>)
 8004e16:	f7fe fce2 	bl	80037de <chk_chr>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d001      	beq.n	8004e24 <create_name+0xa4>
 8004e20:	2306      	movs	r3, #6
 8004e22:	e161      	b.n	80050e8 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	1c5a      	adds	r2, r3, #1
 8004e28:	617a      	str	r2, [r7, #20]
 8004e2a:	005b      	lsls	r3, r3, #1
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	4413      	add	r3, r2
 8004e30:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004e32:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8004e34:	e7b4      	b.n	8004da0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8004e36:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	441a      	add	r2, r3
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8004e42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e44:	2b1f      	cmp	r3, #31
 8004e46:	d801      	bhi.n	8004e4c <create_name+0xcc>
 8004e48:	2304      	movs	r3, #4
 8004e4a:	e000      	b.n	8004e4e <create_name+0xce>
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8004e52:	e011      	b.n	8004e78 <create_name+0xf8>
		w = lfn[di - 1];
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	005b      	lsls	r3, r3, #1
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	4413      	add	r3, r2
 8004e62:	881b      	ldrh	r3, [r3, #0]
 8004e64:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8004e66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e68:	2b20      	cmp	r3, #32
 8004e6a:	d002      	beq.n	8004e72 <create_name+0xf2>
 8004e6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e6e:	2b2e      	cmp	r3, #46	; 0x2e
 8004e70:	d106      	bne.n	8004e80 <create_name+0x100>
		di--;
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	3b01      	subs	r3, #1
 8004e76:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1ea      	bne.n	8004e54 <create_name+0xd4>
 8004e7e:	e000      	b.n	8004e82 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8004e80:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	005b      	lsls	r3, r3, #1
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	4413      	add	r3, r2
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d101      	bne.n	8004e98 <create_name+0x118>
 8004e94:	2306      	movs	r3, #6
 8004e96:	e127      	b.n	80050e8 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	3324      	adds	r3, #36	; 0x24
 8004e9c:	220b      	movs	r2, #11
 8004e9e:	2120      	movs	r1, #32
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7fe fc5a 	bl	800375a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	61bb      	str	r3, [r7, #24]
 8004eaa:	e002      	b.n	8004eb2 <create_name+0x132>
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	3301      	adds	r3, #1
 8004eb0:	61bb      	str	r3, [r7, #24]
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	005b      	lsls	r3, r3, #1
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	4413      	add	r3, r2
 8004eba:	881b      	ldrh	r3, [r3, #0]
 8004ebc:	2b20      	cmp	r3, #32
 8004ebe:	d0f5      	beq.n	8004eac <create_name+0x12c>
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	005b      	lsls	r3, r3, #1
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	881b      	ldrh	r3, [r3, #0]
 8004eca:	2b2e      	cmp	r3, #46	; 0x2e
 8004ecc:	d0ee      	beq.n	8004eac <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d009      	beq.n	8004ee8 <create_name+0x168>
 8004ed4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ed8:	f043 0303 	orr.w	r3, r3, #3
 8004edc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8004ee0:	e002      	b.n	8004ee8 <create_name+0x168>
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	617b      	str	r3, [r7, #20]
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d009      	beq.n	8004f02 <create_name+0x182>
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	005b      	lsls	r3, r3, #1
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	4413      	add	r3, r2
 8004efc:	881b      	ldrh	r3, [r3, #0]
 8004efe:	2b2e      	cmp	r3, #46	; 0x2e
 8004f00:	d1ef      	bne.n	8004ee2 <create_name+0x162>

	i = b = 0; ni = 8;
 8004f02:	2300      	movs	r3, #0
 8004f04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004f08:	2300      	movs	r3, #0
 8004f0a:	623b      	str	r3, [r7, #32]
 8004f0c:	2308      	movs	r3, #8
 8004f0e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	1c5a      	adds	r2, r3, #1
 8004f14:	61ba      	str	r2, [r7, #24]
 8004f16:	005b      	lsls	r3, r3, #1
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	881b      	ldrh	r3, [r3, #0]
 8004f1e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8004f20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	f000 8090 	beq.w	8005048 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8004f28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f2a:	2b20      	cmp	r3, #32
 8004f2c:	d006      	beq.n	8004f3c <create_name+0x1bc>
 8004f2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f30:	2b2e      	cmp	r3, #46	; 0x2e
 8004f32:	d10a      	bne.n	8004f4a <create_name+0x1ca>
 8004f34:	69ba      	ldr	r2, [r7, #24]
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d006      	beq.n	8004f4a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8004f3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f40:	f043 0303 	orr.w	r3, r3, #3
 8004f44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004f48:	e07d      	b.n	8005046 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8004f4a:	6a3a      	ldr	r2, [r7, #32]
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d203      	bcs.n	8004f5a <create_name+0x1da>
 8004f52:	69ba      	ldr	r2, [r7, #24]
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d123      	bne.n	8004fa2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	2b0b      	cmp	r3, #11
 8004f5e:	d106      	bne.n	8004f6e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8004f60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f64:	f043 0303 	orr.w	r3, r3, #3
 8004f68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004f6c:	e075      	b.n	800505a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8004f6e:	69ba      	ldr	r2, [r7, #24]
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d005      	beq.n	8004f82 <create_name+0x202>
 8004f76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f7a:	f043 0303 	orr.w	r3, r3, #3
 8004f7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8004f82:	69ba      	ldr	r2, [r7, #24]
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d866      	bhi.n	8005058 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	61bb      	str	r3, [r7, #24]
 8004f8e:	2308      	movs	r3, #8
 8004f90:	623b      	str	r3, [r7, #32]
 8004f92:	230b      	movs	r3, #11
 8004f94:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8004f96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004fa0:	e051      	b.n	8005046 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8004fa2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004fa4:	2b7f      	cmp	r3, #127	; 0x7f
 8004fa6:	d914      	bls.n	8004fd2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8004fa8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004faa:	2100      	movs	r1, #0
 8004fac:	4618      	mov	r0, r3
 8004fae:	f001 fbd5 	bl	800675c <ff_convert>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8004fb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d004      	beq.n	8004fc6 <create_name+0x246>
 8004fbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004fbe:	3b80      	subs	r3, #128	; 0x80
 8004fc0:	4a23      	ldr	r2, [pc, #140]	; (8005050 <create_name+0x2d0>)
 8004fc2:	5cd3      	ldrb	r3, [r2, r3]
 8004fc4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8004fc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004fca:	f043 0302 	orr.w	r3, r3, #2
 8004fce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8004fd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d007      	beq.n	8004fe8 <create_name+0x268>
 8004fd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004fda:	4619      	mov	r1, r3
 8004fdc:	481d      	ldr	r0, [pc, #116]	; (8005054 <create_name+0x2d4>)
 8004fde:	f7fe fbfe 	bl	80037de <chk_chr>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d008      	beq.n	8004ffa <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8004fe8:	235f      	movs	r3, #95	; 0x5f
 8004fea:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004fec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ff0:	f043 0303 	orr.w	r3, r3, #3
 8004ff4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004ff8:	e01b      	b.n	8005032 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8004ffa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ffc:	2b40      	cmp	r3, #64	; 0x40
 8004ffe:	d909      	bls.n	8005014 <create_name+0x294>
 8005000:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005002:	2b5a      	cmp	r3, #90	; 0x5a
 8005004:	d806      	bhi.n	8005014 <create_name+0x294>
					b |= 2;
 8005006:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800500a:	f043 0302 	orr.w	r3, r3, #2
 800500e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005012:	e00e      	b.n	8005032 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8005014:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005016:	2b60      	cmp	r3, #96	; 0x60
 8005018:	d90b      	bls.n	8005032 <create_name+0x2b2>
 800501a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800501c:	2b7a      	cmp	r3, #122	; 0x7a
 800501e:	d808      	bhi.n	8005032 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8005020:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005024:	f043 0301 	orr.w	r3, r3, #1
 8005028:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800502c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800502e:	3b20      	subs	r3, #32
 8005030:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8005032:	6a3b      	ldr	r3, [r7, #32]
 8005034:	1c5a      	adds	r2, r3, #1
 8005036:	623a      	str	r2, [r7, #32]
 8005038:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800503a:	b2d1      	uxtb	r1, r2
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	4413      	add	r3, r2
 8005040:	460a      	mov	r2, r1
 8005042:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8005046:	e763      	b.n	8004f10 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8005048:	bf00      	nop
 800504a:	e006      	b.n	800505a <create_name+0x2da>
 800504c:	08006990 	.word	0x08006990
 8005050:	080069f0 	.word	0x080069f0
 8005054:	0800699c 	.word	0x0800699c
			if (si > di) break;			/* No extension */
 8005058:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005060:	2be5      	cmp	r3, #229	; 0xe5
 8005062:	d103      	bne.n	800506c <create_name+0x2ec>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2205      	movs	r2, #5
 8005068:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	2b08      	cmp	r3, #8
 8005070:	d104      	bne.n	800507c <create_name+0x2fc>
 8005072:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800507c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005080:	f003 030c 	and.w	r3, r3, #12
 8005084:	2b0c      	cmp	r3, #12
 8005086:	d005      	beq.n	8005094 <create_name+0x314>
 8005088:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800508c:	f003 0303 	and.w	r3, r3, #3
 8005090:	2b03      	cmp	r3, #3
 8005092:	d105      	bne.n	80050a0 <create_name+0x320>
 8005094:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005098:	f043 0302 	orr.w	r3, r3, #2
 800509c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80050a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050a4:	f003 0302 	and.w	r3, r3, #2
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d117      	bne.n	80050dc <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80050ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80050b0:	f003 0303 	and.w	r3, r3, #3
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d105      	bne.n	80050c4 <create_name+0x344>
 80050b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050bc:	f043 0310 	orr.w	r3, r3, #16
 80050c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80050c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80050c8:	f003 030c 	and.w	r3, r3, #12
 80050cc:	2b04      	cmp	r3, #4
 80050ce:	d105      	bne.n	80050dc <create_name+0x35c>
 80050d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050d4:	f043 0308 	orr.w	r3, r3, #8
 80050d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80050e2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80050e6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3728      	adds	r7, #40	; 0x28
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005104:	e002      	b.n	800510c <follow_path+0x1c>
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	3301      	adds	r3, #1
 800510a:	603b      	str	r3, [r7, #0]
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	2b2f      	cmp	r3, #47	; 0x2f
 8005112:	d0f8      	beq.n	8005106 <follow_path+0x16>
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	2b5c      	cmp	r3, #92	; 0x5c
 800511a:	d0f4      	beq.n	8005106 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	2200      	movs	r2, #0
 8005120:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	2b1f      	cmp	r3, #31
 8005128:	d80a      	bhi.n	8005140 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2280      	movs	r2, #128	; 0x80
 800512e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8005132:	2100      	movs	r1, #0
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f7ff f8fd 	bl	8004334 <dir_sdi>
 800513a:	4603      	mov	r3, r0
 800513c:	75fb      	strb	r3, [r7, #23]
 800513e:	e048      	b.n	80051d2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005140:	463b      	mov	r3, r7
 8005142:	4619      	mov	r1, r3
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f7ff fe1b 	bl	8004d80 <create_name>
 800514a:	4603      	mov	r3, r0
 800514c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800514e:	7dfb      	ldrb	r3, [r7, #23]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d139      	bne.n	80051c8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f7ff fc5a 	bl	8004a0e <dir_find>
 800515a:	4603      	mov	r3, r0
 800515c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005164:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005166:	7dfb      	ldrb	r3, [r7, #23]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00a      	beq.n	8005182 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800516c:	7dfb      	ldrb	r3, [r7, #23]
 800516e:	2b04      	cmp	r3, #4
 8005170:	d12c      	bne.n	80051cc <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005172:	7afb      	ldrb	r3, [r7, #11]
 8005174:	f003 0304 	and.w	r3, r3, #4
 8005178:	2b00      	cmp	r3, #0
 800517a:	d127      	bne.n	80051cc <follow_path+0xdc>
 800517c:	2305      	movs	r3, #5
 800517e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005180:	e024      	b.n	80051cc <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005182:	7afb      	ldrb	r3, [r7, #11]
 8005184:	f003 0304 	and.w	r3, r3, #4
 8005188:	2b00      	cmp	r3, #0
 800518a:	d121      	bne.n	80051d0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	799b      	ldrb	r3, [r3, #6]
 8005190:	f003 0310 	and.w	r3, r3, #16
 8005194:	2b00      	cmp	r3, #0
 8005196:	d102      	bne.n	800519e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005198:	2305      	movs	r3, #5
 800519a:	75fb      	strb	r3, [r7, #23]
 800519c:	e019      	b.n	80051d2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	695b      	ldr	r3, [r3, #20]
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	8992      	ldrh	r2, [r2, #12]
 80051ac:	fbb3 f0f2 	udiv	r0, r3, r2
 80051b0:	fb00 f202 	mul.w	r2, r0, r2
 80051b4:	1a9b      	subs	r3, r3, r2
 80051b6:	440b      	add	r3, r1
 80051b8:	4619      	mov	r1, r3
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	f7ff fa60 	bl	8004680 <ld_clust>
 80051c0:	4602      	mov	r2, r0
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80051c6:	e7bb      	b.n	8005140 <follow_path+0x50>
			if (res != FR_OK) break;
 80051c8:	bf00      	nop
 80051ca:	e002      	b.n	80051d2 <follow_path+0xe2>
				break;
 80051cc:	bf00      	nop
 80051ce:	e000      	b.n	80051d2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80051d0:	bf00      	nop
			}
		}
	}

	return res;
 80051d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3718      	adds	r7, #24
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80051dc:	b480      	push	{r7}
 80051de:	b087      	sub	sp, #28
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80051e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051e8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d031      	beq.n	8005256 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	617b      	str	r3, [r7, #20]
 80051f8:	e002      	b.n	8005200 <get_ldnumber+0x24>
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	3301      	adds	r3, #1
 80051fe:	617b      	str	r3, [r7, #20]
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	2b1f      	cmp	r3, #31
 8005206:	d903      	bls.n	8005210 <get_ldnumber+0x34>
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	2b3a      	cmp	r3, #58	; 0x3a
 800520e:	d1f4      	bne.n	80051fa <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	2b3a      	cmp	r3, #58	; 0x3a
 8005216:	d11c      	bne.n	8005252 <get_ldnumber+0x76>
			tp = *path;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	1c5a      	adds	r2, r3, #1
 8005222:	60fa      	str	r2, [r7, #12]
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	3b30      	subs	r3, #48	; 0x30
 8005228:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	2b09      	cmp	r3, #9
 800522e:	d80e      	bhi.n	800524e <get_ldnumber+0x72>
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	429a      	cmp	r2, r3
 8005236:	d10a      	bne.n	800524e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d107      	bne.n	800524e <get_ldnumber+0x72>
					vol = (int)i;
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	3301      	adds	r3, #1
 8005246:	617b      	str	r3, [r7, #20]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	e002      	b.n	8005258 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005252:	2300      	movs	r3, #0
 8005254:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005256:	693b      	ldr	r3, [r7, #16]
}
 8005258:	4618      	mov	r0, r3
 800525a:	371c      	adds	r7, #28
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	70da      	strb	r2, [r3, #3]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800527a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800527c:	6839      	ldr	r1, [r7, #0]
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f7fe fc78 	bl	8003b74 <move_window>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d001      	beq.n	800528e <check_fs+0x2a>
 800528a:	2304      	movs	r3, #4
 800528c:	e038      	b.n	8005300 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	3338      	adds	r3, #56	; 0x38
 8005292:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005296:	4618      	mov	r0, r3
 8005298:	f7fe f9bc 	bl	8003614 <ld_word>
 800529c:	4603      	mov	r3, r0
 800529e:	461a      	mov	r2, r3
 80052a0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d001      	beq.n	80052ac <check_fs+0x48>
 80052a8:	2303      	movs	r3, #3
 80052aa:	e029      	b.n	8005300 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80052b2:	2be9      	cmp	r3, #233	; 0xe9
 80052b4:	d009      	beq.n	80052ca <check_fs+0x66>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80052bc:	2beb      	cmp	r3, #235	; 0xeb
 80052be:	d11e      	bne.n	80052fe <check_fs+0x9a>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80052c6:	2b90      	cmp	r3, #144	; 0x90
 80052c8:	d119      	bne.n	80052fe <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	3338      	adds	r3, #56	; 0x38
 80052ce:	3336      	adds	r3, #54	; 0x36
 80052d0:	4618      	mov	r0, r3
 80052d2:	f7fe f9b7 	bl	8003644 <ld_dword>
 80052d6:	4603      	mov	r3, r0
 80052d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80052dc:	4a0a      	ldr	r2, [pc, #40]	; (8005308 <check_fs+0xa4>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d101      	bne.n	80052e6 <check_fs+0x82>
 80052e2:	2300      	movs	r3, #0
 80052e4:	e00c      	b.n	8005300 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	3338      	adds	r3, #56	; 0x38
 80052ea:	3352      	adds	r3, #82	; 0x52
 80052ec:	4618      	mov	r0, r3
 80052ee:	f7fe f9a9 	bl	8003644 <ld_dword>
 80052f2:	4603      	mov	r3, r0
 80052f4:	4a05      	ldr	r2, [pc, #20]	; (800530c <check_fs+0xa8>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d101      	bne.n	80052fe <check_fs+0x9a>
 80052fa:	2300      	movs	r3, #0
 80052fc:	e000      	b.n	8005300 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80052fe:	2302      	movs	r3, #2
}
 8005300:	4618      	mov	r0, r3
 8005302:	3708      	adds	r7, #8
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	00544146 	.word	0x00544146
 800530c:	33544146 	.word	0x33544146

08005310 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b096      	sub	sp, #88	; 0x58
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	4613      	mov	r3, r2
 800531c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	2200      	movs	r2, #0
 8005322:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005324:	68f8      	ldr	r0, [r7, #12]
 8005326:	f7ff ff59 	bl	80051dc <get_ldnumber>
 800532a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800532c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800532e:	2b00      	cmp	r3, #0
 8005330:	da01      	bge.n	8005336 <find_volume+0x26>
 8005332:	230b      	movs	r3, #11
 8005334:	e265      	b.n	8005802 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005336:	4a9f      	ldr	r2, [pc, #636]	; (80055b4 <find_volume+0x2a4>)
 8005338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800533a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800533e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005342:	2b00      	cmp	r3, #0
 8005344:	d101      	bne.n	800534a <find_volume+0x3a>
 8005346:	230c      	movs	r3, #12
 8005348:	e25b      	b.n	8005802 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800534e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005350:	79fb      	ldrb	r3, [r7, #7]
 8005352:	f023 0301 	bic.w	r3, r3, #1
 8005356:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d01a      	beq.n	8005396 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005362:	785b      	ldrb	r3, [r3, #1]
 8005364:	4618      	mov	r0, r3
 8005366:	f7fe f8b7 	bl	80034d8 <disk_status>
 800536a:	4603      	mov	r3, r0
 800536c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005370:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b00      	cmp	r3, #0
 800537a:	d10c      	bne.n	8005396 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800537c:	79fb      	ldrb	r3, [r7, #7]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d007      	beq.n	8005392 <find_volume+0x82>
 8005382:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005386:	f003 0304 	and.w	r3, r3, #4
 800538a:	2b00      	cmp	r3, #0
 800538c:	d001      	beq.n	8005392 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800538e:	230a      	movs	r3, #10
 8005390:	e237      	b.n	8005802 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8005392:	2300      	movs	r3, #0
 8005394:	e235      	b.n	8005802 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005398:	2200      	movs	r2, #0
 800539a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800539c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800539e:	b2da      	uxtb	r2, r3
 80053a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80053a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a6:	785b      	ldrb	r3, [r3, #1]
 80053a8:	4618      	mov	r0, r3
 80053aa:	f7fe f8af 	bl	800350c <disk_initialize>
 80053ae:	4603      	mov	r3, r0
 80053b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80053b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80053b8:	f003 0301 	and.w	r3, r3, #1
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d001      	beq.n	80053c4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80053c0:	2303      	movs	r3, #3
 80053c2:	e21e      	b.n	8005802 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80053c4:	79fb      	ldrb	r3, [r7, #7]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d007      	beq.n	80053da <find_volume+0xca>
 80053ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80053ce:	f003 0304 	and.w	r3, r3, #4
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d001      	beq.n	80053da <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80053d6:	230a      	movs	r3, #10
 80053d8:	e213      	b.n	8005802 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80053da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053dc:	7858      	ldrb	r0, [r3, #1]
 80053de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e0:	330c      	adds	r3, #12
 80053e2:	461a      	mov	r2, r3
 80053e4:	2102      	movs	r1, #2
 80053e6:	f7fe f8f7 	bl	80035d8 <disk_ioctl>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d001      	beq.n	80053f4 <find_volume+0xe4>
 80053f0:	2301      	movs	r3, #1
 80053f2:	e206      	b.n	8005802 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80053f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f6:	899b      	ldrh	r3, [r3, #12]
 80053f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053fc:	d80d      	bhi.n	800541a <find_volume+0x10a>
 80053fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005400:	899b      	ldrh	r3, [r3, #12]
 8005402:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005406:	d308      	bcc.n	800541a <find_volume+0x10a>
 8005408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800540a:	899b      	ldrh	r3, [r3, #12]
 800540c:	461a      	mov	r2, r3
 800540e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005410:	899b      	ldrh	r3, [r3, #12]
 8005412:	3b01      	subs	r3, #1
 8005414:	4013      	ands	r3, r2
 8005416:	2b00      	cmp	r3, #0
 8005418:	d001      	beq.n	800541e <find_volume+0x10e>
 800541a:	2301      	movs	r3, #1
 800541c:	e1f1      	b.n	8005802 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800541e:	2300      	movs	r3, #0
 8005420:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005422:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005424:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005426:	f7ff ff1d 	bl	8005264 <check_fs>
 800542a:	4603      	mov	r3, r0
 800542c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005430:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005434:	2b02      	cmp	r3, #2
 8005436:	d149      	bne.n	80054cc <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005438:	2300      	movs	r3, #0
 800543a:	643b      	str	r3, [r7, #64]	; 0x40
 800543c:	e01e      	b.n	800547c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800543e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005440:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005446:	011b      	lsls	r3, r3, #4
 8005448:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800544c:	4413      	add	r3, r2
 800544e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005452:	3304      	adds	r3, #4
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d006      	beq.n	8005468 <find_volume+0x158>
 800545a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545c:	3308      	adds	r3, #8
 800545e:	4618      	mov	r0, r3
 8005460:	f7fe f8f0 	bl	8003644 <ld_dword>
 8005464:	4602      	mov	r2, r0
 8005466:	e000      	b.n	800546a <find_volume+0x15a>
 8005468:	2200      	movs	r2, #0
 800546a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	3358      	adds	r3, #88	; 0x58
 8005470:	443b      	add	r3, r7
 8005472:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005476:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005478:	3301      	adds	r3, #1
 800547a:	643b      	str	r3, [r7, #64]	; 0x40
 800547c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800547e:	2b03      	cmp	r3, #3
 8005480:	d9dd      	bls.n	800543e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005482:	2300      	movs	r3, #0
 8005484:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005486:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005488:	2b00      	cmp	r3, #0
 800548a:	d002      	beq.n	8005492 <find_volume+0x182>
 800548c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800548e:	3b01      	subs	r3, #1
 8005490:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005492:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	3358      	adds	r3, #88	; 0x58
 8005498:	443b      	add	r3, r7
 800549a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800549e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80054a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d005      	beq.n	80054b2 <find_volume+0x1a2>
 80054a6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80054a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80054aa:	f7ff fedb 	bl	8005264 <check_fs>
 80054ae:	4603      	mov	r3, r0
 80054b0:	e000      	b.n	80054b4 <find_volume+0x1a4>
 80054b2:	2303      	movs	r3, #3
 80054b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80054b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d905      	bls.n	80054cc <find_volume+0x1bc>
 80054c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054c2:	3301      	adds	r3, #1
 80054c4:	643b      	str	r3, [r7, #64]	; 0x40
 80054c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054c8:	2b03      	cmp	r3, #3
 80054ca:	d9e2      	bls.n	8005492 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80054cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80054d0:	2b04      	cmp	r3, #4
 80054d2:	d101      	bne.n	80054d8 <find_volume+0x1c8>
 80054d4:	2301      	movs	r3, #1
 80054d6:	e194      	b.n	8005802 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80054d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d901      	bls.n	80054e4 <find_volume+0x1d4>
 80054e0:	230d      	movs	r3, #13
 80054e2:	e18e      	b.n	8005802 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80054e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e6:	3338      	adds	r3, #56	; 0x38
 80054e8:	330b      	adds	r3, #11
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7fe f892 	bl	8003614 <ld_word>
 80054f0:	4603      	mov	r3, r0
 80054f2:	461a      	mov	r2, r3
 80054f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f6:	899b      	ldrh	r3, [r3, #12]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d001      	beq.n	8005500 <find_volume+0x1f0>
 80054fc:	230d      	movs	r3, #13
 80054fe:	e180      	b.n	8005802 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005502:	3338      	adds	r3, #56	; 0x38
 8005504:	3316      	adds	r3, #22
 8005506:	4618      	mov	r0, r3
 8005508:	f7fe f884 	bl	8003614 <ld_word>
 800550c:	4603      	mov	r3, r0
 800550e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005510:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005512:	2b00      	cmp	r3, #0
 8005514:	d106      	bne.n	8005524 <find_volume+0x214>
 8005516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005518:	3338      	adds	r3, #56	; 0x38
 800551a:	3324      	adds	r3, #36	; 0x24
 800551c:	4618      	mov	r0, r3
 800551e:	f7fe f891 	bl	8003644 <ld_dword>
 8005522:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005526:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005528:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800552a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800552c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8005530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005532:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005536:	789b      	ldrb	r3, [r3, #2]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d005      	beq.n	8005548 <find_volume+0x238>
 800553c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800553e:	789b      	ldrb	r3, [r3, #2]
 8005540:	2b02      	cmp	r3, #2
 8005542:	d001      	beq.n	8005548 <find_volume+0x238>
 8005544:	230d      	movs	r3, #13
 8005546:	e15c      	b.n	8005802 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800554a:	789b      	ldrb	r3, [r3, #2]
 800554c:	461a      	mov	r2, r3
 800554e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005550:	fb02 f303 	mul.w	r3, r2, r3
 8005554:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005558:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800555c:	b29a      	uxth	r2, r3
 800555e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005560:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005564:	895b      	ldrh	r3, [r3, #10]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d008      	beq.n	800557c <find_volume+0x26c>
 800556a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556c:	895b      	ldrh	r3, [r3, #10]
 800556e:	461a      	mov	r2, r3
 8005570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005572:	895b      	ldrh	r3, [r3, #10]
 8005574:	3b01      	subs	r3, #1
 8005576:	4013      	ands	r3, r2
 8005578:	2b00      	cmp	r3, #0
 800557a:	d001      	beq.n	8005580 <find_volume+0x270>
 800557c:	230d      	movs	r3, #13
 800557e:	e140      	b.n	8005802 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005582:	3338      	adds	r3, #56	; 0x38
 8005584:	3311      	adds	r3, #17
 8005586:	4618      	mov	r0, r3
 8005588:	f7fe f844 	bl	8003614 <ld_word>
 800558c:	4603      	mov	r3, r0
 800558e:	461a      	mov	r2, r3
 8005590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005592:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005596:	891b      	ldrh	r3, [r3, #8]
 8005598:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800559a:	8992      	ldrh	r2, [r2, #12]
 800559c:	0952      	lsrs	r2, r2, #5
 800559e:	b292      	uxth	r2, r2
 80055a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80055a4:	fb01 f202 	mul.w	r2, r1, r2
 80055a8:	1a9b      	subs	r3, r3, r2
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d003      	beq.n	80055b8 <find_volume+0x2a8>
 80055b0:	230d      	movs	r3, #13
 80055b2:	e126      	b.n	8005802 <find_volume+0x4f2>
 80055b4:	20002158 	.word	0x20002158

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80055b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ba:	3338      	adds	r3, #56	; 0x38
 80055bc:	3313      	adds	r3, #19
 80055be:	4618      	mov	r0, r3
 80055c0:	f7fe f828 	bl	8003614 <ld_word>
 80055c4:	4603      	mov	r3, r0
 80055c6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80055c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d106      	bne.n	80055dc <find_volume+0x2cc>
 80055ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d0:	3338      	adds	r3, #56	; 0x38
 80055d2:	3320      	adds	r3, #32
 80055d4:	4618      	mov	r0, r3
 80055d6:	f7fe f835 	bl	8003644 <ld_dword>
 80055da:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80055dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055de:	3338      	adds	r3, #56	; 0x38
 80055e0:	330e      	adds	r3, #14
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7fe f816 	bl	8003614 <ld_word>
 80055e8:	4603      	mov	r3, r0
 80055ea:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80055ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <find_volume+0x2e6>
 80055f2:	230d      	movs	r3, #13
 80055f4:	e105      	b.n	8005802 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80055f6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80055f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055fa:	4413      	add	r3, r2
 80055fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055fe:	8911      	ldrh	r1, [r2, #8]
 8005600:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005602:	8992      	ldrh	r2, [r2, #12]
 8005604:	0952      	lsrs	r2, r2, #5
 8005606:	b292      	uxth	r2, r2
 8005608:	fbb1 f2f2 	udiv	r2, r1, r2
 800560c:	b292      	uxth	r2, r2
 800560e:	4413      	add	r3, r2
 8005610:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005612:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005616:	429a      	cmp	r2, r3
 8005618:	d201      	bcs.n	800561e <find_volume+0x30e>
 800561a:	230d      	movs	r3, #13
 800561c:	e0f1      	b.n	8005802 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800561e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005626:	8952      	ldrh	r2, [r2, #10]
 8005628:	fbb3 f3f2 	udiv	r3, r3, r2
 800562c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800562e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005630:	2b00      	cmp	r3, #0
 8005632:	d101      	bne.n	8005638 <find_volume+0x328>
 8005634:	230d      	movs	r3, #13
 8005636:	e0e4      	b.n	8005802 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8005638:	2303      	movs	r3, #3
 800563a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800563e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005640:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005644:	4293      	cmp	r3, r2
 8005646:	d802      	bhi.n	800564e <find_volume+0x33e>
 8005648:	2302      	movs	r3, #2
 800564a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800564e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005650:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005654:	4293      	cmp	r3, r2
 8005656:	d802      	bhi.n	800565e <find_volume+0x34e>
 8005658:	2301      	movs	r3, #1
 800565a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800565e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005660:	1c9a      	adds	r2, r3, #2
 8005662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005664:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8005666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005668:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800566a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800566c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800566e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005670:	441a      	add	r2, r3
 8005672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005674:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8005676:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567a:	441a      	add	r2, r3
 800567c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567e:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8005680:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005684:	2b03      	cmp	r3, #3
 8005686:	d11e      	bne.n	80056c6 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800568a:	3338      	adds	r3, #56	; 0x38
 800568c:	332a      	adds	r3, #42	; 0x2a
 800568e:	4618      	mov	r0, r3
 8005690:	f7fd ffc0 	bl	8003614 <ld_word>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d001      	beq.n	800569e <find_volume+0x38e>
 800569a:	230d      	movs	r3, #13
 800569c:	e0b1      	b.n	8005802 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800569e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a0:	891b      	ldrh	r3, [r3, #8]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d001      	beq.n	80056aa <find_volume+0x39a>
 80056a6:	230d      	movs	r3, #13
 80056a8:	e0ab      	b.n	8005802 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80056aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ac:	3338      	adds	r3, #56	; 0x38
 80056ae:	332c      	adds	r3, #44	; 0x2c
 80056b0:	4618      	mov	r0, r3
 80056b2:	f7fd ffc7 	bl	8003644 <ld_dword>
 80056b6:	4602      	mov	r2, r0
 80056b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ba:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80056bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056be:	69db      	ldr	r3, [r3, #28]
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	647b      	str	r3, [r7, #68]	; 0x44
 80056c4:	e01f      	b.n	8005706 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80056c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c8:	891b      	ldrh	r3, [r3, #8]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d101      	bne.n	80056d2 <find_volume+0x3c2>
 80056ce:	230d      	movs	r3, #13
 80056d0:	e097      	b.n	8005802 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80056d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056d8:	441a      	add	r2, r3
 80056da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056dc:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80056de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d103      	bne.n	80056ee <find_volume+0x3de>
 80056e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e8:	69db      	ldr	r3, [r3, #28]
 80056ea:	005b      	lsls	r3, r3, #1
 80056ec:	e00a      	b.n	8005704 <find_volume+0x3f4>
 80056ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f0:	69da      	ldr	r2, [r3, #28]
 80056f2:	4613      	mov	r3, r2
 80056f4:	005b      	lsls	r3, r3, #1
 80056f6:	4413      	add	r3, r2
 80056f8:	085a      	lsrs	r2, r3, #1
 80056fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056fc:	69db      	ldr	r3, [r3, #28]
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005704:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005708:	6a1a      	ldr	r2, [r3, #32]
 800570a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800570c:	899b      	ldrh	r3, [r3, #12]
 800570e:	4619      	mov	r1, r3
 8005710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005712:	440b      	add	r3, r1
 8005714:	3b01      	subs	r3, #1
 8005716:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005718:	8989      	ldrh	r1, [r1, #12]
 800571a:	fbb3 f3f1 	udiv	r3, r3, r1
 800571e:	429a      	cmp	r2, r3
 8005720:	d201      	bcs.n	8005726 <find_volume+0x416>
 8005722:	230d      	movs	r3, #13
 8005724:	e06d      	b.n	8005802 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005728:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800572c:	619a      	str	r2, [r3, #24]
 800572e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005730:	699a      	ldr	r2, [r3, #24]
 8005732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005734:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8005736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005738:	2280      	movs	r2, #128	; 0x80
 800573a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800573c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005740:	2b03      	cmp	r3, #3
 8005742:	d149      	bne.n	80057d8 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005746:	3338      	adds	r3, #56	; 0x38
 8005748:	3330      	adds	r3, #48	; 0x30
 800574a:	4618      	mov	r0, r3
 800574c:	f7fd ff62 	bl	8003614 <ld_word>
 8005750:	4603      	mov	r3, r0
 8005752:	2b01      	cmp	r3, #1
 8005754:	d140      	bne.n	80057d8 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005758:	3301      	adds	r3, #1
 800575a:	4619      	mov	r1, r3
 800575c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800575e:	f7fe fa09 	bl	8003b74 <move_window>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d137      	bne.n	80057d8 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8005768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800576a:	2200      	movs	r2, #0
 800576c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800576e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005770:	3338      	adds	r3, #56	; 0x38
 8005772:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005776:	4618      	mov	r0, r3
 8005778:	f7fd ff4c 	bl	8003614 <ld_word>
 800577c:	4603      	mov	r3, r0
 800577e:	461a      	mov	r2, r3
 8005780:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005784:	429a      	cmp	r2, r3
 8005786:	d127      	bne.n	80057d8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800578a:	3338      	adds	r3, #56	; 0x38
 800578c:	4618      	mov	r0, r3
 800578e:	f7fd ff59 	bl	8003644 <ld_dword>
 8005792:	4603      	mov	r3, r0
 8005794:	4a1d      	ldr	r2, [pc, #116]	; (800580c <find_volume+0x4fc>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d11e      	bne.n	80057d8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800579a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800579c:	3338      	adds	r3, #56	; 0x38
 800579e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80057a2:	4618      	mov	r0, r3
 80057a4:	f7fd ff4e 	bl	8003644 <ld_dword>
 80057a8:	4603      	mov	r3, r0
 80057aa:	4a19      	ldr	r2, [pc, #100]	; (8005810 <find_volume+0x500>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d113      	bne.n	80057d8 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80057b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b2:	3338      	adds	r3, #56	; 0x38
 80057b4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80057b8:	4618      	mov	r0, r3
 80057ba:	f7fd ff43 	bl	8003644 <ld_dword>
 80057be:	4602      	mov	r2, r0
 80057c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c2:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80057c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c6:	3338      	adds	r3, #56	; 0x38
 80057c8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80057cc:	4618      	mov	r0, r3
 80057ce:	f7fd ff39 	bl	8003644 <ld_dword>
 80057d2:	4602      	mov	r2, r0
 80057d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d6:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80057d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057da:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80057de:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80057e0:	4b0c      	ldr	r3, [pc, #48]	; (8005814 <find_volume+0x504>)
 80057e2:	881b      	ldrh	r3, [r3, #0]
 80057e4:	3301      	adds	r3, #1
 80057e6:	b29a      	uxth	r2, r3
 80057e8:	4b0a      	ldr	r3, [pc, #40]	; (8005814 <find_volume+0x504>)
 80057ea:	801a      	strh	r2, [r3, #0]
 80057ec:	4b09      	ldr	r3, [pc, #36]	; (8005814 <find_volume+0x504>)
 80057ee:	881a      	ldrh	r2, [r3, #0]
 80057f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f2:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80057f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f6:	4a08      	ldr	r2, [pc, #32]	; (8005818 <find_volume+0x508>)
 80057f8:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80057fa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80057fc:	f7fe f952 	bl	8003aa4 <clear_lock>
#endif
	return FR_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3758      	adds	r7, #88	; 0x58
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	41615252 	.word	0x41615252
 8005810:	61417272 	.word	0x61417272
 8005814:	2000215c 	.word	0x2000215c
 8005818:	20002180 	.word	0x20002180

0800581c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005826:	2309      	movs	r3, #9
 8005828:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d01c      	beq.n	800586a <validate+0x4e>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d018      	beq.n	800586a <validate+0x4e>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d013      	beq.n	800586a <validate+0x4e>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	889a      	ldrh	r2, [r3, #4]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	88db      	ldrh	r3, [r3, #6]
 800584c:	429a      	cmp	r2, r3
 800584e:	d10c      	bne.n	800586a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	785b      	ldrb	r3, [r3, #1]
 8005856:	4618      	mov	r0, r3
 8005858:	f7fd fe3e 	bl	80034d8 <disk_status>
 800585c:	4603      	mov	r3, r0
 800585e:	f003 0301 	and.w	r3, r3, #1
 8005862:	2b00      	cmp	r3, #0
 8005864:	d101      	bne.n	800586a <validate+0x4e>
			res = FR_OK;
 8005866:	2300      	movs	r3, #0
 8005868:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800586a:	7bfb      	ldrb	r3, [r7, #15]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d102      	bne.n	8005876 <validate+0x5a>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	e000      	b.n	8005878 <validate+0x5c>
 8005876:	2300      	movs	r3, #0
 8005878:	683a      	ldr	r2, [r7, #0]
 800587a:	6013      	str	r3, [r2, #0]
	return res;
 800587c:	7bfb      	ldrb	r3, [r7, #15]
}
 800587e:	4618      	mov	r0, r3
 8005880:	3710      	adds	r7, #16
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
	...

08005888 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b088      	sub	sp, #32
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	4613      	mov	r3, r2
 8005894:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800589a:	f107 0310 	add.w	r3, r7, #16
 800589e:	4618      	mov	r0, r3
 80058a0:	f7ff fc9c 	bl	80051dc <get_ldnumber>
 80058a4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	da01      	bge.n	80058b0 <f_mount+0x28>
 80058ac:	230b      	movs	r3, #11
 80058ae:	e02b      	b.n	8005908 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80058b0:	4a17      	ldr	r2, [pc, #92]	; (8005910 <f_mount+0x88>)
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058b8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d005      	beq.n	80058cc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80058c0:	69b8      	ldr	r0, [r7, #24]
 80058c2:	f7fe f8ef 	bl	8003aa4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	2200      	movs	r2, #0
 80058ca:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d002      	beq.n	80058d8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	490d      	ldr	r1, [pc, #52]	; (8005910 <f_mount+0x88>)
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d002      	beq.n	80058ee <f_mount+0x66>
 80058e8:	79fb      	ldrb	r3, [r7, #7]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d001      	beq.n	80058f2 <f_mount+0x6a>
 80058ee:	2300      	movs	r3, #0
 80058f0:	e00a      	b.n	8005908 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80058f2:	f107 010c 	add.w	r1, r7, #12
 80058f6:	f107 0308 	add.w	r3, r7, #8
 80058fa:	2200      	movs	r2, #0
 80058fc:	4618      	mov	r0, r3
 80058fe:	f7ff fd07 	bl	8005310 <find_volume>
 8005902:	4603      	mov	r3, r0
 8005904:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005906:	7dfb      	ldrb	r3, [r7, #23]
}
 8005908:	4618      	mov	r0, r3
 800590a:	3720      	adds	r7, #32
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}
 8005910:	20002158 	.word	0x20002158

08005914 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b09a      	sub	sp, #104	; 0x68
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	4613      	mov	r3, r2
 8005920:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d101      	bne.n	800592c <f_open+0x18>
 8005928:	2309      	movs	r3, #9
 800592a:	e1bb      	b.n	8005ca4 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800592c:	79fb      	ldrb	r3, [r7, #7]
 800592e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005932:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8005934:	79fa      	ldrb	r2, [r7, #7]
 8005936:	f107 0114 	add.w	r1, r7, #20
 800593a:	f107 0308 	add.w	r3, r7, #8
 800593e:	4618      	mov	r0, r3
 8005940:	f7ff fce6 	bl	8005310 <find_volume>
 8005944:	4603      	mov	r3, r0
 8005946:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800594a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800594e:	2b00      	cmp	r3, #0
 8005950:	f040 819f 	bne.w	8005c92 <f_open+0x37e>
		dj.obj.fs = fs;
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8005958:	68ba      	ldr	r2, [r7, #8]
 800595a:	f107 0318 	add.w	r3, r7, #24
 800595e:	4611      	mov	r1, r2
 8005960:	4618      	mov	r0, r3
 8005962:	f7ff fbc5 	bl	80050f0 <follow_path>
 8005966:	4603      	mov	r3, r0
 8005968:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800596c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005970:	2b00      	cmp	r3, #0
 8005972:	d11a      	bne.n	80059aa <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005974:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005978:	b25b      	sxtb	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	da03      	bge.n	8005986 <f_open+0x72>
				res = FR_INVALID_NAME;
 800597e:	2306      	movs	r3, #6
 8005980:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005984:	e011      	b.n	80059aa <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005986:	79fb      	ldrb	r3, [r7, #7]
 8005988:	f023 0301 	bic.w	r3, r3, #1
 800598c:	2b00      	cmp	r3, #0
 800598e:	bf14      	ite	ne
 8005990:	2301      	movne	r3, #1
 8005992:	2300      	moveq	r3, #0
 8005994:	b2db      	uxtb	r3, r3
 8005996:	461a      	mov	r2, r3
 8005998:	f107 0318 	add.w	r3, r7, #24
 800599c:	4611      	mov	r1, r2
 800599e:	4618      	mov	r0, r3
 80059a0:	f7fd ff38 	bl	8003814 <chk_lock>
 80059a4:	4603      	mov	r3, r0
 80059a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80059aa:	79fb      	ldrb	r3, [r7, #7]
 80059ac:	f003 031c 	and.w	r3, r3, #28
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d07f      	beq.n	8005ab4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80059b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d017      	beq.n	80059ec <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80059bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80059c0:	2b04      	cmp	r3, #4
 80059c2:	d10e      	bne.n	80059e2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80059c4:	f7fd ff82 	bl	80038cc <enq_lock>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d006      	beq.n	80059dc <f_open+0xc8>
 80059ce:	f107 0318 	add.w	r3, r7, #24
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7ff f8dc 	bl	8004b90 <dir_register>
 80059d8:	4603      	mov	r3, r0
 80059da:	e000      	b.n	80059de <f_open+0xca>
 80059dc:	2312      	movs	r3, #18
 80059de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80059e2:	79fb      	ldrb	r3, [r7, #7]
 80059e4:	f043 0308 	orr.w	r3, r3, #8
 80059e8:	71fb      	strb	r3, [r7, #7]
 80059ea:	e010      	b.n	8005a0e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80059ec:	7fbb      	ldrb	r3, [r7, #30]
 80059ee:	f003 0311 	and.w	r3, r3, #17
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d003      	beq.n	80059fe <f_open+0xea>
					res = FR_DENIED;
 80059f6:	2307      	movs	r3, #7
 80059f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80059fc:	e007      	b.n	8005a0e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80059fe:	79fb      	ldrb	r3, [r7, #7]
 8005a00:	f003 0304 	and.w	r3, r3, #4
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d002      	beq.n	8005a0e <f_open+0xfa>
 8005a08:	2308      	movs	r3, #8
 8005a0a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005a0e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d168      	bne.n	8005ae8 <f_open+0x1d4>
 8005a16:	79fb      	ldrb	r3, [r7, #7]
 8005a18:	f003 0308 	and.w	r3, r3, #8
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d063      	beq.n	8005ae8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8005a20:	f7fd fcfc 	bl	800341c <get_fattime>
 8005a24:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8005a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a28:	330e      	adds	r3, #14
 8005a2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7fd fe47 	bl	80036c0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8005a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a34:	3316      	adds	r3, #22
 8005a36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7fd fe41 	bl	80036c0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a40:	330b      	adds	r3, #11
 8005a42:	2220      	movs	r2, #32
 8005a44:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a4a:	4611      	mov	r1, r2
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f7fe fe17 	bl	8004680 <ld_clust>
 8005a52:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005a58:	2200      	movs	r2, #0
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7fe fe2f 	bl	80046be <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a62:	331c      	adds	r3, #28
 8005a64:	2100      	movs	r1, #0
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7fd fe2a 	bl	80036c0 <st_dword>
					fs->wflag = 1;
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8005a72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d037      	beq.n	8005ae8 <f_open+0x1d4>
						dw = fs->winsect;
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a7c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8005a7e:	f107 0318 	add.w	r3, r7, #24
 8005a82:	2200      	movs	r2, #0
 8005a84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7fe fb1f 	bl	80040ca <remove_chain>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8005a92:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d126      	bne.n	8005ae8 <f_open+0x1d4>
							res = move_window(fs, dw);
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7fe f868 	bl	8003b74 <move_window>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005aae:	3a01      	subs	r2, #1
 8005ab0:	615a      	str	r2, [r3, #20]
 8005ab2:	e019      	b.n	8005ae8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8005ab4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d115      	bne.n	8005ae8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005abc:	7fbb      	ldrb	r3, [r7, #30]
 8005abe:	f003 0310 	and.w	r3, r3, #16
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d003      	beq.n	8005ace <f_open+0x1ba>
					res = FR_NO_FILE;
 8005ac6:	2304      	movs	r3, #4
 8005ac8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005acc:	e00c      	b.n	8005ae8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005ace:	79fb      	ldrb	r3, [r7, #7]
 8005ad0:	f003 0302 	and.w	r3, r3, #2
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d007      	beq.n	8005ae8 <f_open+0x1d4>
 8005ad8:	7fbb      	ldrb	r3, [r7, #30]
 8005ada:	f003 0301 	and.w	r3, r3, #1
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d002      	beq.n	8005ae8 <f_open+0x1d4>
						res = FR_DENIED;
 8005ae2:	2307      	movs	r3, #7
 8005ae4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8005ae8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d128      	bne.n	8005b42 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005af0:	79fb      	ldrb	r3, [r7, #7]
 8005af2:	f003 0308 	and.w	r3, r3, #8
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d003      	beq.n	8005b02 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8005afa:	79fb      	ldrb	r3, [r7, #7]
 8005afc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b00:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8005b0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005b10:	79fb      	ldrb	r3, [r7, #7]
 8005b12:	f023 0301 	bic.w	r3, r3, #1
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	bf14      	ite	ne
 8005b1a:	2301      	movne	r3, #1
 8005b1c:	2300      	moveq	r3, #0
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	461a      	mov	r2, r3
 8005b22:	f107 0318 	add.w	r3, r7, #24
 8005b26:	4611      	mov	r1, r2
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f7fd fef1 	bl	8003910 <inc_lock>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d102      	bne.n	8005b42 <f_open+0x22e>
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8005b42:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f040 80a3 	bne.w	8005c92 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b50:	4611      	mov	r1, r2
 8005b52:	4618      	mov	r0, r3
 8005b54:	f7fe fd94 	bl	8004680 <ld_clust>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b60:	331c      	adds	r3, #28
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7fd fd6e 	bl	8003644 <ld_dword>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	88da      	ldrh	r2, [r3, #6]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	79fa      	ldrb	r2, [r7, #7]
 8005b86:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	3330      	adds	r3, #48	; 0x30
 8005b9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005ba2:	2100      	movs	r1, #0
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7fd fdd8 	bl	800375a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8005baa:	79fb      	ldrb	r3, [r7, #7]
 8005bac:	f003 0320 	and.w	r3, r3, #32
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d06e      	beq.n	8005c92 <f_open+0x37e>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d06a      	beq.n	8005c92 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	68da      	ldr	r2, [r3, #12]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	895b      	ldrh	r3, [r3, #10]
 8005bc8:	461a      	mov	r2, r3
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	899b      	ldrh	r3, [r3, #12]
 8005bce:	fb02 f303 	mul.w	r3, r2, r3
 8005bd2:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005be0:	e016      	b.n	8005c10 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005be6:	4618      	mov	r0, r3
 8005be8:	f7fe f881 	bl	8003cee <get_fat>
 8005bec:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8005bee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d802      	bhi.n	8005bfa <f_open+0x2e6>
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005bfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c00:	d102      	bne.n	8005c08 <f_open+0x2f4>
 8005c02:	2301      	movs	r3, #1
 8005c04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005c08:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005c0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c10:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d103      	bne.n	8005c20 <f_open+0x30c>
 8005c18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005c1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d8e0      	bhi.n	8005be2 <f_open+0x2ce>
				}
				fp->clust = clst;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c24:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005c26:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d131      	bne.n	8005c92 <f_open+0x37e>
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	899b      	ldrh	r3, [r3, #12]
 8005c32:	461a      	mov	r2, r3
 8005c34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c36:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c3a:	fb01 f202 	mul.w	r2, r1, r2
 8005c3e:	1a9b      	subs	r3, r3, r2
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d026      	beq.n	8005c92 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f7fe f831 	bl	8003cb0 <clust2sect>
 8005c4e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8005c50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d103      	bne.n	8005c5e <f_open+0x34a>
						res = FR_INT_ERR;
 8005c56:	2302      	movs	r3, #2
 8005c58:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005c5c:	e019      	b.n	8005c92 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	899b      	ldrh	r3, [r3, #12]
 8005c62:	461a      	mov	r2, r3
 8005c64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c66:	fbb3 f2f2 	udiv	r2, r3, r2
 8005c6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c6c:	441a      	add	r2, r3
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	7858      	ldrb	r0, [r3, #1]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6a1a      	ldr	r2, [r3, #32]
 8005c80:	2301      	movs	r3, #1
 8005c82:	f7fd fc69 	bl	8003558 <disk_read>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d002      	beq.n	8005c92 <f_open+0x37e>
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8005c92:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d002      	beq.n	8005ca0 <f_open+0x38c>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005ca0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3768      	adds	r7, #104	; 0x68
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b08c      	sub	sp, #48	; 0x30
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	607a      	str	r2, [r7, #4]
 8005cb8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f107 0210 	add.w	r2, r7, #16
 8005cca:	4611      	mov	r1, r2
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f7ff fda5 	bl	800581c <validate>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005cd8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d107      	bne.n	8005cf0 <f_write+0x44>
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	7d5b      	ldrb	r3, [r3, #21]
 8005ce4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005ce8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d002      	beq.n	8005cf6 <f_write+0x4a>
 8005cf0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005cf4:	e16a      	b.n	8005fcc <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	7d1b      	ldrb	r3, [r3, #20]
 8005cfa:	f003 0302 	and.w	r3, r3, #2
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d101      	bne.n	8005d06 <f_write+0x5a>
 8005d02:	2307      	movs	r3, #7
 8005d04:	e162      	b.n	8005fcc <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	699a      	ldr	r2, [r3, #24]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	441a      	add	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	f080 814c 	bcs.w	8005fb0 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	699b      	ldr	r3, [r3, #24]
 8005d1c:	43db      	mvns	r3, r3
 8005d1e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8005d20:	e146      	b.n	8005fb0 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	8992      	ldrh	r2, [r2, #12]
 8005d2a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d2e:	fb01 f202 	mul.w	r2, r1, r2
 8005d32:	1a9b      	subs	r3, r3, r2
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f040 80f1 	bne.w	8005f1c <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	693a      	ldr	r2, [r7, #16]
 8005d40:	8992      	ldrh	r2, [r2, #12]
 8005d42:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d46:	693a      	ldr	r2, [r7, #16]
 8005d48:	8952      	ldrh	r2, [r2, #10]
 8005d4a:	3a01      	subs	r2, #1
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d143      	bne.n	8005dde <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10c      	bne.n	8005d78 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8005d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d11a      	bne.n	8005da0 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2100      	movs	r1, #0
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7fe fa10 	bl	8004194 <create_chain>
 8005d74:	62b8      	str	r0, [r7, #40]	; 0x28
 8005d76:	e013      	b.n	8005da0 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d007      	beq.n	8005d90 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	699b      	ldr	r3, [r3, #24]
 8005d84:	4619      	mov	r1, r3
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f7fe fa9c 	bl	80042c4 <clmt_clust>
 8005d8c:	62b8      	str	r0, [r7, #40]	; 0x28
 8005d8e:	e007      	b.n	8005da0 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	69db      	ldr	r3, [r3, #28]
 8005d96:	4619      	mov	r1, r3
 8005d98:	4610      	mov	r0, r2
 8005d9a:	f7fe f9fb 	bl	8004194 <create_chain>
 8005d9e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	f000 8109 	beq.w	8005fba <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8005da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d104      	bne.n	8005db8 <f_write+0x10c>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2202      	movs	r2, #2
 8005db2:	755a      	strb	r2, [r3, #21]
 8005db4:	2302      	movs	r3, #2
 8005db6:	e109      	b.n	8005fcc <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dbe:	d104      	bne.n	8005dca <f_write+0x11e>
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	755a      	strb	r2, [r3, #21]
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e100      	b.n	8005fcc <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dce:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d102      	bne.n	8005dde <f_write+0x132>
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ddc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	7d1b      	ldrb	r3, [r3, #20]
 8005de2:	b25b      	sxtb	r3, r3
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	da18      	bge.n	8005e1a <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	7858      	ldrb	r0, [r3, #1]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6a1a      	ldr	r2, [r3, #32]
 8005df6:	2301      	movs	r3, #1
 8005df8:	f7fd fbce 	bl	8003598 <disk_write>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d004      	beq.n	8005e0c <f_write+0x160>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2201      	movs	r2, #1
 8005e06:	755a      	strb	r2, [r3, #21]
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e0df      	b.n	8005fcc <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	7d1b      	ldrb	r3, [r3, #20]
 8005e10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e14:	b2da      	uxtb	r2, r3
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005e1a:	693a      	ldr	r2, [r7, #16]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	69db      	ldr	r3, [r3, #28]
 8005e20:	4619      	mov	r1, r3
 8005e22:	4610      	mov	r0, r2
 8005e24:	f7fd ff44 	bl	8003cb0 <clust2sect>
 8005e28:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d104      	bne.n	8005e3a <f_write+0x18e>
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2202      	movs	r2, #2
 8005e34:	755a      	strb	r2, [r3, #21]
 8005e36:	2302      	movs	r3, #2
 8005e38:	e0c8      	b.n	8005fcc <f_write+0x320>
			sect += csect;
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	4413      	add	r3, r2
 8005e40:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	899b      	ldrh	r3, [r3, #12]
 8005e46:	461a      	mov	r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e4e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005e50:	6a3b      	ldr	r3, [r7, #32]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d043      	beq.n	8005ede <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005e56:	69ba      	ldr	r2, [r7, #24]
 8005e58:	6a3b      	ldr	r3, [r7, #32]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	8952      	ldrh	r2, [r2, #10]
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d905      	bls.n	8005e70 <f_write+0x1c4>
					cc = fs->csize - csect;
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	895b      	ldrh	r3, [r3, #10]
 8005e68:	461a      	mov	r2, r3
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	7858      	ldrb	r0, [r3, #1]
 8005e74:	6a3b      	ldr	r3, [r7, #32]
 8005e76:	697a      	ldr	r2, [r7, #20]
 8005e78:	69f9      	ldr	r1, [r7, #28]
 8005e7a:	f7fd fb8d 	bl	8003598 <disk_write>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d004      	beq.n	8005e8e <f_write+0x1e2>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2201      	movs	r2, #1
 8005e88:	755a      	strb	r2, [r3, #21]
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e09e      	b.n	8005fcc <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6a1a      	ldr	r2, [r3, #32]
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	6a3a      	ldr	r2, [r7, #32]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d918      	bls.n	8005ece <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6a1a      	ldr	r2, [r3, #32]
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	8992      	ldrh	r2, [r2, #12]
 8005eae:	fb02 f303 	mul.w	r3, r2, r3
 8005eb2:	69fa      	ldr	r2, [r7, #28]
 8005eb4:	18d1      	adds	r1, r2, r3
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	899b      	ldrh	r3, [r3, #12]
 8005eba:	461a      	mov	r2, r3
 8005ebc:	f7fd fc2c 	bl	8003718 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	7d1b      	ldrb	r3, [r3, #20]
 8005ec4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ec8:	b2da      	uxtb	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	899b      	ldrh	r3, [r3, #12]
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	6a3b      	ldr	r3, [r7, #32]
 8005ed6:	fb02 f303 	mul.w	r3, r2, r3
 8005eda:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8005edc:	e04b      	b.n	8005f76 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	697a      	ldr	r2, [r7, #20]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d016      	beq.n	8005f16 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	699a      	ldr	r2, [r3, #24]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d210      	bcs.n	8005f16 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	7858      	ldrb	r0, [r3, #1]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005efe:	2301      	movs	r3, #1
 8005f00:	697a      	ldr	r2, [r7, #20]
 8005f02:	f7fd fb29 	bl	8003558 <disk_read>
 8005f06:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d004      	beq.n	8005f16 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	755a      	strb	r2, [r3, #21]
 8005f12:	2301      	movs	r3, #1
 8005f14:	e05a      	b.n	8005fcc <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	697a      	ldr	r2, [r7, #20]
 8005f1a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	899b      	ldrh	r3, [r3, #12]
 8005f20:	4618      	mov	r0, r3
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	699b      	ldr	r3, [r3, #24]
 8005f26:	693a      	ldr	r2, [r7, #16]
 8005f28:	8992      	ldrh	r2, [r2, #12]
 8005f2a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f2e:	fb01 f202 	mul.w	r2, r1, r2
 8005f32:	1a9b      	subs	r3, r3, r2
 8005f34:	1ac3      	subs	r3, r0, r3
 8005f36:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8005f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d901      	bls.n	8005f44 <f_write+0x298>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	693a      	ldr	r2, [r7, #16]
 8005f50:	8992      	ldrh	r2, [r2, #12]
 8005f52:	fbb3 f0f2 	udiv	r0, r3, r2
 8005f56:	fb00 f202 	mul.w	r2, r0, r2
 8005f5a:	1a9b      	subs	r3, r3, r2
 8005f5c:	440b      	add	r3, r1
 8005f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f60:	69f9      	ldr	r1, [r7, #28]
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7fd fbd8 	bl	8003718 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	7d1b      	ldrb	r3, [r3, #20]
 8005f6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f70:	b2da      	uxtb	r2, r3
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8005f76:	69fa      	ldr	r2, [r7, #28]
 8005f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7a:	4413      	add	r3, r2
 8005f7c:	61fb      	str	r3, [r7, #28]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	699a      	ldr	r2, [r3, #24]
 8005f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f84:	441a      	add	r2, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	619a      	str	r2, [r3, #24]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	68da      	ldr	r2, [r3, #12]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	699b      	ldr	r3, [r3, #24]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	bf38      	it	cc
 8005f96:	461a      	movcc	r2, r3
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	60da      	str	r2, [r3, #12]
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa2:	441a      	add	r2, r3
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	601a      	str	r2, [r3, #0]
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	f47f aeb5 	bne.w	8005d22 <f_write+0x76>
 8005fb8:	e000      	b.n	8005fbc <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005fba:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	7d1b      	ldrb	r3, [r3, #20]
 8005fc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fc4:	b2da      	uxtb	r2, r3
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8005fca:	2300      	movs	r3, #0
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3730      	adds	r7, #48	; 0x30
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b086      	sub	sp, #24
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f107 0208 	add.w	r2, r7, #8
 8005fe2:	4611      	mov	r1, r2
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f7ff fc19 	bl	800581c <validate>
 8005fea:	4603      	mov	r3, r0
 8005fec:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005fee:	7dfb      	ldrb	r3, [r7, #23]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d168      	bne.n	80060c6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	7d1b      	ldrb	r3, [r3, #20]
 8005ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d062      	beq.n	80060c6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	7d1b      	ldrb	r3, [r3, #20]
 8006004:	b25b      	sxtb	r3, r3
 8006006:	2b00      	cmp	r3, #0
 8006008:	da15      	bge.n	8006036 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	7858      	ldrb	r0, [r3, #1]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a1a      	ldr	r2, [r3, #32]
 8006018:	2301      	movs	r3, #1
 800601a:	f7fd fabd 	bl	8003598 <disk_write>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d001      	beq.n	8006028 <f_sync+0x54>
 8006024:	2301      	movs	r3, #1
 8006026:	e04f      	b.n	80060c8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	7d1b      	ldrb	r3, [r3, #20]
 800602c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006030:	b2da      	uxtb	r2, r3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006036:	f7fd f9f1 	bl	800341c <get_fattime>
 800603a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800603c:	68ba      	ldr	r2, [r7, #8]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006042:	4619      	mov	r1, r3
 8006044:	4610      	mov	r0, r2
 8006046:	f7fd fd95 	bl	8003b74 <move_window>
 800604a:	4603      	mov	r3, r0
 800604c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800604e:	7dfb      	ldrb	r3, [r7, #23]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d138      	bne.n	80060c6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006058:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	330b      	adds	r3, #11
 800605e:	781a      	ldrb	r2, [r3, #0]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	330b      	adds	r3, #11
 8006064:	f042 0220 	orr.w	r2, r2, #32
 8006068:	b2d2      	uxtb	r2, r2
 800606a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6818      	ldr	r0, [r3, #0]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	461a      	mov	r2, r3
 8006076:	68f9      	ldr	r1, [r7, #12]
 8006078:	f7fe fb21 	bl	80046be <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f103 021c 	add.w	r2, r3, #28
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	4619      	mov	r1, r3
 8006088:	4610      	mov	r0, r2
 800608a:	f7fd fb19 	bl	80036c0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	3316      	adds	r3, #22
 8006092:	6939      	ldr	r1, [r7, #16]
 8006094:	4618      	mov	r0, r3
 8006096:	f7fd fb13 	bl	80036c0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	3312      	adds	r3, #18
 800609e:	2100      	movs	r1, #0
 80060a0:	4618      	mov	r0, r3
 80060a2:	f7fd faf2 	bl	800368a <st_word>
					fs->wflag = 1;
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	2201      	movs	r2, #1
 80060aa:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7fd fd8e 	bl	8003bd0 <sync_fs>
 80060b4:	4603      	mov	r3, r0
 80060b6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	7d1b      	ldrb	r3, [r3, #20]
 80060bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060c0:	b2da      	uxtb	r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80060c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3718      	adds	r7, #24
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f7ff ff7b 	bl	8005fd4 <f_sync>
 80060de:	4603      	mov	r3, r0
 80060e0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80060e2:	7bfb      	ldrb	r3, [r7, #15]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d118      	bne.n	800611a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f107 0208 	add.w	r2, r7, #8
 80060ee:	4611      	mov	r1, r2
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7ff fb93 	bl	800581c <validate>
 80060f6:	4603      	mov	r3, r0
 80060f8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80060fa:	7bfb      	ldrb	r3, [r7, #15]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d10c      	bne.n	800611a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	4618      	mov	r0, r3
 8006106:	f7fd fc91 	bl	8003a2c <dec_lock>
 800610a:	4603      	mov	r3, r0
 800610c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800610e:	7bfb      	ldrb	r3, [r7, #15]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d102      	bne.n	800611a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800611a:	7bfb      	ldrb	r3, [r7, #15]
}
 800611c:	4618      	mov	r0, r3
 800611e:	3710      	adds	r7, #16
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b090      	sub	sp, #64	; 0x40
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f107 0208 	add.w	r2, r7, #8
 8006134:	4611      	mov	r1, r2
 8006136:	4618      	mov	r0, r3
 8006138:	f7ff fb70 	bl	800581c <validate>
 800613c:	4603      	mov	r3, r0
 800613e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8006142:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006146:	2b00      	cmp	r3, #0
 8006148:	d103      	bne.n	8006152 <f_lseek+0x2e>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	7d5b      	ldrb	r3, [r3, #21]
 800614e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8006152:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006156:	2b00      	cmp	r3, #0
 8006158:	d002      	beq.n	8006160 <f_lseek+0x3c>
 800615a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800615e:	e201      	b.n	8006564 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006164:	2b00      	cmp	r3, #0
 8006166:	f000 80d9 	beq.w	800631c <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006170:	d15a      	bne.n	8006228 <f_lseek+0x104>
			tbl = fp->cltbl;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006176:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8006178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617a:	1d1a      	adds	r2, r3, #4
 800617c:	627a      	str	r2, [r7, #36]	; 0x24
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	617b      	str	r3, [r7, #20]
 8006182:	2302      	movs	r3, #2
 8006184:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800618c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618e:	2b00      	cmp	r3, #0
 8006190:	d03a      	beq.n	8006208 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8006192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006194:	613b      	str	r3, [r7, #16]
 8006196:	2300      	movs	r3, #0
 8006198:	62fb      	str	r3, [r7, #44]	; 0x2c
 800619a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619c:	3302      	adds	r3, #2
 800619e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80061a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a2:	60fb      	str	r3, [r7, #12]
 80061a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a6:	3301      	adds	r3, #1
 80061a8:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7fd fd9d 	bl	8003cee <get_fat>
 80061b4:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80061b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d804      	bhi.n	80061c6 <f_lseek+0xa2>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2202      	movs	r2, #2
 80061c0:	755a      	strb	r2, [r3, #21]
 80061c2:	2302      	movs	r3, #2
 80061c4:	e1ce      	b.n	8006564 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80061c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061cc:	d104      	bne.n	80061d8 <f_lseek+0xb4>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2201      	movs	r2, #1
 80061d2:	755a      	strb	r2, [r3, #21]
 80061d4:	2301      	movs	r3, #1
 80061d6:	e1c5      	b.n	8006564 <f_lseek+0x440>
					} while (cl == pcl + 1);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	3301      	adds	r3, #1
 80061dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061de:	429a      	cmp	r2, r3
 80061e0:	d0de      	beq.n	80061a0 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80061e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d809      	bhi.n	80061fe <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80061ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ec:	1d1a      	adds	r2, r3, #4
 80061ee:	627a      	str	r2, [r7, #36]	; 0x24
 80061f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061f2:	601a      	str	r2, [r3, #0]
 80061f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f6:	1d1a      	adds	r2, r3, #4
 80061f8:	627a      	str	r2, [r7, #36]	; 0x24
 80061fa:	693a      	ldr	r2, [r7, #16]
 80061fc:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	69db      	ldr	r3, [r3, #28]
 8006202:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006204:	429a      	cmp	r2, r3
 8006206:	d3c4      	bcc.n	8006192 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800620e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8006210:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	429a      	cmp	r2, r3
 8006216:	d803      	bhi.n	8006220 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8006218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621a:	2200      	movs	r2, #0
 800621c:	601a      	str	r2, [r3, #0]
 800621e:	e19f      	b.n	8006560 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8006220:	2311      	movs	r3, #17
 8006222:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8006226:	e19b      	b.n	8006560 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	683a      	ldr	r2, [r7, #0]
 800622e:	429a      	cmp	r2, r3
 8006230:	d902      	bls.n	8006238 <f_lseek+0x114>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	683a      	ldr	r2, [r7, #0]
 800623c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	2b00      	cmp	r3, #0
 8006242:	f000 818d 	beq.w	8006560 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	3b01      	subs	r3, #1
 800624a:	4619      	mov	r1, r3
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f7fe f839 	bl	80042c4 <clmt_clust>
 8006252:	4602      	mov	r2, r0
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	69db      	ldr	r3, [r3, #28]
 800625e:	4619      	mov	r1, r3
 8006260:	4610      	mov	r0, r2
 8006262:	f7fd fd25 	bl	8003cb0 <clust2sect>
 8006266:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d104      	bne.n	8006278 <f_lseek+0x154>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2202      	movs	r2, #2
 8006272:	755a      	strb	r2, [r3, #21]
 8006274:	2302      	movs	r3, #2
 8006276:	e175      	b.n	8006564 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	3b01      	subs	r3, #1
 800627c:	68ba      	ldr	r2, [r7, #8]
 800627e:	8992      	ldrh	r2, [r2, #12]
 8006280:	fbb3 f3f2 	udiv	r3, r3, r2
 8006284:	68ba      	ldr	r2, [r7, #8]
 8006286:	8952      	ldrh	r2, [r2, #10]
 8006288:	3a01      	subs	r2, #1
 800628a:	4013      	ands	r3, r2
 800628c:	69ba      	ldr	r2, [r7, #24]
 800628e:	4413      	add	r3, r2
 8006290:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	699b      	ldr	r3, [r3, #24]
 8006296:	68ba      	ldr	r2, [r7, #8]
 8006298:	8992      	ldrh	r2, [r2, #12]
 800629a:	fbb3 f1f2 	udiv	r1, r3, r2
 800629e:	fb01 f202 	mul.w	r2, r1, r2
 80062a2:	1a9b      	subs	r3, r3, r2
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	f000 815b 	beq.w	8006560 <f_lseek+0x43c>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a1b      	ldr	r3, [r3, #32]
 80062ae:	69ba      	ldr	r2, [r7, #24]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	f000 8155 	beq.w	8006560 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	7d1b      	ldrb	r3, [r3, #20]
 80062ba:	b25b      	sxtb	r3, r3
 80062bc:	2b00      	cmp	r3, #0
 80062be:	da18      	bge.n	80062f2 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	7858      	ldrb	r0, [r3, #1]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a1a      	ldr	r2, [r3, #32]
 80062ce:	2301      	movs	r3, #1
 80062d0:	f7fd f962 	bl	8003598 <disk_write>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d004      	beq.n	80062e4 <f_lseek+0x1c0>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2201      	movs	r2, #1
 80062de:	755a      	strb	r2, [r3, #21]
 80062e0:	2301      	movs	r3, #1
 80062e2:	e13f      	b.n	8006564 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	7d1b      	ldrb	r3, [r3, #20]
 80062e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062ec:	b2da      	uxtb	r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	7858      	ldrb	r0, [r3, #1]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80062fc:	2301      	movs	r3, #1
 80062fe:	69ba      	ldr	r2, [r7, #24]
 8006300:	f7fd f92a 	bl	8003558 <disk_read>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d004      	beq.n	8006314 <f_lseek+0x1f0>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2201      	movs	r2, #1
 800630e:	755a      	strb	r2, [r3, #21]
 8006310:	2301      	movs	r3, #1
 8006312:	e127      	b.n	8006564 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	69ba      	ldr	r2, [r7, #24]
 8006318:	621a      	str	r2, [r3, #32]
 800631a:	e121      	b.n	8006560 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	683a      	ldr	r2, [r7, #0]
 8006322:	429a      	cmp	r2, r3
 8006324:	d908      	bls.n	8006338 <f_lseek+0x214>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	7d1b      	ldrb	r3, [r3, #20]
 800632a:	f003 0302 	and.w	r3, r3, #2
 800632e:	2b00      	cmp	r3, #0
 8006330:	d102      	bne.n	8006338 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	699b      	ldr	r3, [r3, #24]
 800633c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800633e:	2300      	movs	r3, #0
 8006340:	637b      	str	r3, [r7, #52]	; 0x34
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006346:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	2b00      	cmp	r3, #0
 800634c:	f000 80b5 	beq.w	80064ba <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	895b      	ldrh	r3, [r3, #10]
 8006354:	461a      	mov	r2, r3
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	899b      	ldrh	r3, [r3, #12]
 800635a:	fb02 f303 	mul.w	r3, r2, r3
 800635e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8006360:	6a3b      	ldr	r3, [r7, #32]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d01b      	beq.n	800639e <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	1e5a      	subs	r2, r3, #1
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006370:	6a3b      	ldr	r3, [r7, #32]
 8006372:	1e59      	subs	r1, r3, #1
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800637a:	429a      	cmp	r2, r3
 800637c:	d30f      	bcc.n	800639e <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800637e:	6a3b      	ldr	r3, [r7, #32]
 8006380:	1e5a      	subs	r2, r3, #1
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	425b      	negs	r3, r3
 8006386:	401a      	ands	r2, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	683a      	ldr	r2, [r7, #0]
 8006392:	1ad3      	subs	r3, r2, r3
 8006394:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	69db      	ldr	r3, [r3, #28]
 800639a:	63bb      	str	r3, [r7, #56]	; 0x38
 800639c:	e022      	b.n	80063e4 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80063a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d119      	bne.n	80063de <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2100      	movs	r1, #0
 80063ae:	4618      	mov	r0, r3
 80063b0:	f7fd fef0 	bl	8004194 <create_chain>
 80063b4:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80063b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d104      	bne.n	80063c6 <f_lseek+0x2a2>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2202      	movs	r2, #2
 80063c0:	755a      	strb	r2, [r3, #21]
 80063c2:	2302      	movs	r3, #2
 80063c4:	e0ce      	b.n	8006564 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80063c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063cc:	d104      	bne.n	80063d8 <f_lseek+0x2b4>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2201      	movs	r2, #1
 80063d2:	755a      	strb	r2, [r3, #21]
 80063d4:	2301      	movs	r3, #1
 80063d6:	e0c5      	b.n	8006564 <f_lseek+0x440>
					fp->obj.sclust = clst;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063dc:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063e2:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80063e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d067      	beq.n	80064ba <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 80063ea:	e03a      	b.n	8006462 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 80063ec:	683a      	ldr	r2, [r7, #0]
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	603b      	str	r3, [r7, #0]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	699a      	ldr	r2, [r3, #24]
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	441a      	add	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	7d1b      	ldrb	r3, [r3, #20]
 8006404:	f003 0302 	and.w	r3, r3, #2
 8006408:	2b00      	cmp	r3, #0
 800640a:	d00b      	beq.n	8006424 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006410:	4618      	mov	r0, r3
 8006412:	f7fd febf 	bl	8004194 <create_chain>
 8006416:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8006418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800641a:	2b00      	cmp	r3, #0
 800641c:	d108      	bne.n	8006430 <f_lseek+0x30c>
							ofs = 0; break;
 800641e:	2300      	movs	r3, #0
 8006420:	603b      	str	r3, [r7, #0]
 8006422:	e022      	b.n	800646a <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006428:	4618      	mov	r0, r3
 800642a:	f7fd fc60 	bl	8003cee <get_fat>
 800642e:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006432:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006436:	d104      	bne.n	8006442 <f_lseek+0x31e>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	755a      	strb	r2, [r3, #21]
 800643e:	2301      	movs	r3, #1
 8006440:	e090      	b.n	8006564 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8006442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006444:	2b01      	cmp	r3, #1
 8006446:	d904      	bls.n	8006452 <f_lseek+0x32e>
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	69db      	ldr	r3, [r3, #28]
 800644c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800644e:	429a      	cmp	r2, r3
 8006450:	d304      	bcc.n	800645c <f_lseek+0x338>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2202      	movs	r2, #2
 8006456:	755a      	strb	r2, [r3, #21]
 8006458:	2302      	movs	r3, #2
 800645a:	e083      	b.n	8006564 <f_lseek+0x440>
					fp->clust = clst;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006460:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8006462:	683a      	ldr	r2, [r7, #0]
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	429a      	cmp	r2, r3
 8006468:	d8c0      	bhi.n	80063ec <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	699a      	ldr	r2, [r3, #24]
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	441a      	add	r2, r3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	899b      	ldrh	r3, [r3, #12]
 800647a:	461a      	mov	r2, r3
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006482:	fb01 f202 	mul.w	r2, r1, r2
 8006486:	1a9b      	subs	r3, r3, r2
 8006488:	2b00      	cmp	r3, #0
 800648a:	d016      	beq.n	80064ba <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006490:	4618      	mov	r0, r3
 8006492:	f7fd fc0d 	bl	8003cb0 <clust2sect>
 8006496:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8006498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800649a:	2b00      	cmp	r3, #0
 800649c:	d104      	bne.n	80064a8 <f_lseek+0x384>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2202      	movs	r2, #2
 80064a2:	755a      	strb	r2, [r3, #21]
 80064a4:	2302      	movs	r3, #2
 80064a6:	e05d      	b.n	8006564 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	899b      	ldrh	r3, [r3, #12]
 80064ac:	461a      	mov	r2, r3
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80064b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064b6:	4413      	add	r3, r2
 80064b8:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	699a      	ldr	r2, [r3, #24]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d90a      	bls.n	80064dc <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	699a      	ldr	r2, [r3, #24]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	7d1b      	ldrb	r3, [r3, #20]
 80064d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064d6:	b2da      	uxtb	r2, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	699b      	ldr	r3, [r3, #24]
 80064e0:	68ba      	ldr	r2, [r7, #8]
 80064e2:	8992      	ldrh	r2, [r2, #12]
 80064e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80064e8:	fb01 f202 	mul.w	r2, r1, r2
 80064ec:	1a9b      	subs	r3, r3, r2
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d036      	beq.n	8006560 <f_lseek+0x43c>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a1b      	ldr	r3, [r3, #32]
 80064f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d031      	beq.n	8006560 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	7d1b      	ldrb	r3, [r3, #20]
 8006500:	b25b      	sxtb	r3, r3
 8006502:	2b00      	cmp	r3, #0
 8006504:	da18      	bge.n	8006538 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	7858      	ldrb	r0, [r3, #1]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6a1a      	ldr	r2, [r3, #32]
 8006514:	2301      	movs	r3, #1
 8006516:	f7fd f83f 	bl	8003598 <disk_write>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d004      	beq.n	800652a <f_lseek+0x406>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	755a      	strb	r2, [r3, #21]
 8006526:	2301      	movs	r3, #1
 8006528:	e01c      	b.n	8006564 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	7d1b      	ldrb	r3, [r3, #20]
 800652e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006532:	b2da      	uxtb	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	7858      	ldrb	r0, [r3, #1]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006542:	2301      	movs	r3, #1
 8006544:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006546:	f7fd f807 	bl	8003558 <disk_read>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d004      	beq.n	800655a <f_lseek+0x436>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	755a      	strb	r2, [r3, #21]
 8006556:	2301      	movs	r3, #1
 8006558:	e004      	b.n	8006564 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800655e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8006560:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8006564:	4618      	mov	r0, r3
 8006566:	3740      	adds	r7, #64	; 0x40
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	460b      	mov	r3, r1
 8006576:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8006578:	78fb      	ldrb	r3, [r7, #3]
 800657a:	2b0a      	cmp	r3, #10
 800657c:	d103      	bne.n	8006586 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800657e:	210d      	movs	r1, #13
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f7ff fff3 	bl	800656c <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2b00      	cmp	r3, #0
 8006590:	db25      	blt.n	80065de <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	1c5a      	adds	r2, r3, #1
 8006596:	60fa      	str	r2, [r7, #12]
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	4413      	add	r3, r2
 800659c:	78fa      	ldrb	r2, [r7, #3]
 800659e:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2b3c      	cmp	r3, #60	; 0x3c
 80065a4:	dd12      	ble.n	80065cc <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6818      	ldr	r0, [r3, #0]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f103 010c 	add.w	r1, r3, #12
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	f107 0308 	add.w	r3, r7, #8
 80065b6:	f7ff fb79 	bl	8005cac <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80065ba:	68ba      	ldr	r2, [r7, #8]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	429a      	cmp	r2, r3
 80065c0:	d101      	bne.n	80065c6 <putc_bfd+0x5a>
 80065c2:	2300      	movs	r3, #0
 80065c4:	e001      	b.n	80065ca <putc_bfd+0x5e>
 80065c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065ca:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	1c5a      	adds	r2, r3, #1
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	609a      	str	r2, [r3, #8]
 80065dc:	e000      	b.n	80065e0 <putc_bfd+0x74>
	if (i < 0) return;
 80065de:	bf00      	nop
}
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}

080065e6 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 80065e6:	b580      	push	{r7, lr}
 80065e8:	b084      	sub	sp, #16
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	db16      	blt.n	8006624 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6818      	ldr	r0, [r3, #0]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f103 010c 	add.w	r1, r3, #12
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	461a      	mov	r2, r3
 8006606:	f107 030c 	add.w	r3, r7, #12
 800660a:	f7ff fb4f 	bl	8005cac <f_write>
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d107      	bne.n	8006624 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	4293      	cmp	r3, r2
 800661c:	d102      	bne.n	8006624 <putc_flush+0x3e>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	e001      	b.n	8006628 <putc_flush+0x42>
	return EOF;
 8006624:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006628:	4618      	mov	r0, r3
 800662a:	3710      	adds	r7, #16
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	683a      	ldr	r2, [r7, #0]
 800663e:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	605a      	str	r2, [r3, #4]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	685a      	ldr	r2, [r3, #4]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	609a      	str	r2, [r3, #8]
}
 800664e:	bf00      	nop
 8006650:	370c      	adds	r7, #12
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr

0800665a <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800665a:	b580      	push	{r7, lr}
 800665c:	b096      	sub	sp, #88	; 0x58
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
 8006662:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8006664:	f107 030c 	add.w	r3, r7, #12
 8006668:	6839      	ldr	r1, [r7, #0]
 800666a:	4618      	mov	r0, r3
 800666c:	f7ff ffe0 	bl	8006630 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8006670:	e009      	b.n	8006686 <f_puts+0x2c>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	1c5a      	adds	r2, r3, #1
 8006676:	607a      	str	r2, [r7, #4]
 8006678:	781a      	ldrb	r2, [r3, #0]
 800667a:	f107 030c 	add.w	r3, r7, #12
 800667e:	4611      	mov	r1, r2
 8006680:	4618      	mov	r0, r3
 8006682:	f7ff ff73 	bl	800656c <putc_bfd>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d1f1      	bne.n	8006672 <f_puts+0x18>
	return putc_flush(&pb);
 800668e:	f107 030c 	add.w	r3, r7, #12
 8006692:	4618      	mov	r0, r3
 8006694:	f7ff ffa7 	bl	80065e6 <putc_flush>
 8006698:	4603      	mov	r3, r0
}
 800669a:	4618      	mov	r0, r3
 800669c:	3758      	adds	r7, #88	; 0x58
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
	...

080066a4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b087      	sub	sp, #28
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	4613      	mov	r3, r2
 80066b0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80066b2:	2301      	movs	r3, #1
 80066b4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80066b6:	2300      	movs	r3, #0
 80066b8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80066ba:	4b1f      	ldr	r3, [pc, #124]	; (8006738 <FATFS_LinkDriverEx+0x94>)
 80066bc:	7a5b      	ldrb	r3, [r3, #9]
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d131      	bne.n	8006728 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80066c4:	4b1c      	ldr	r3, [pc, #112]	; (8006738 <FATFS_LinkDriverEx+0x94>)
 80066c6:	7a5b      	ldrb	r3, [r3, #9]
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	461a      	mov	r2, r3
 80066cc:	4b1a      	ldr	r3, [pc, #104]	; (8006738 <FATFS_LinkDriverEx+0x94>)
 80066ce:	2100      	movs	r1, #0
 80066d0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80066d2:	4b19      	ldr	r3, [pc, #100]	; (8006738 <FATFS_LinkDriverEx+0x94>)
 80066d4:	7a5b      	ldrb	r3, [r3, #9]
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	4a17      	ldr	r2, [pc, #92]	; (8006738 <FATFS_LinkDriverEx+0x94>)
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	4413      	add	r3, r2
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80066e2:	4b15      	ldr	r3, [pc, #84]	; (8006738 <FATFS_LinkDriverEx+0x94>)
 80066e4:	7a5b      	ldrb	r3, [r3, #9]
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	461a      	mov	r2, r3
 80066ea:	4b13      	ldr	r3, [pc, #76]	; (8006738 <FATFS_LinkDriverEx+0x94>)
 80066ec:	4413      	add	r3, r2
 80066ee:	79fa      	ldrb	r2, [r7, #7]
 80066f0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80066f2:	4b11      	ldr	r3, [pc, #68]	; (8006738 <FATFS_LinkDriverEx+0x94>)
 80066f4:	7a5b      	ldrb	r3, [r3, #9]
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	1c5a      	adds	r2, r3, #1
 80066fa:	b2d1      	uxtb	r1, r2
 80066fc:	4a0e      	ldr	r2, [pc, #56]	; (8006738 <FATFS_LinkDriverEx+0x94>)
 80066fe:	7251      	strb	r1, [r2, #9]
 8006700:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006702:	7dbb      	ldrb	r3, [r7, #22]
 8006704:	3330      	adds	r3, #48	; 0x30
 8006706:	b2da      	uxtb	r2, r3
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	3301      	adds	r3, #1
 8006710:	223a      	movs	r2, #58	; 0x3a
 8006712:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	3302      	adds	r3, #2
 8006718:	222f      	movs	r2, #47	; 0x2f
 800671a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	3303      	adds	r3, #3
 8006720:	2200      	movs	r2, #0
 8006722:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006724:	2300      	movs	r3, #0
 8006726:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006728:	7dfb      	ldrb	r3, [r7, #23]
}
 800672a:	4618      	mov	r0, r3
 800672c:	371c      	adds	r7, #28
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	20002380 	.word	0x20002380

0800673c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006746:	2200      	movs	r2, #0
 8006748:	6839      	ldr	r1, [r7, #0]
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f7ff ffaa 	bl	80066a4 <FATFS_LinkDriverEx>
 8006750:	4603      	mov	r3, r0
}
 8006752:	4618      	mov	r0, r3
 8006754:	3708      	adds	r7, #8
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
	...

0800675c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	4603      	mov	r3, r0
 8006764:	6039      	str	r1, [r7, #0]
 8006766:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8006768:	88fb      	ldrh	r3, [r7, #6]
 800676a:	2b7f      	cmp	r3, #127	; 0x7f
 800676c:	d802      	bhi.n	8006774 <ff_convert+0x18>
		c = chr;
 800676e:	88fb      	ldrh	r3, [r7, #6]
 8006770:	81fb      	strh	r3, [r7, #14]
 8006772:	e025      	b.n	80067c0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00b      	beq.n	8006792 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800677a:	88fb      	ldrh	r3, [r7, #6]
 800677c:	2bff      	cmp	r3, #255	; 0xff
 800677e:	d805      	bhi.n	800678c <ff_convert+0x30>
 8006780:	88fb      	ldrh	r3, [r7, #6]
 8006782:	3b80      	subs	r3, #128	; 0x80
 8006784:	4a12      	ldr	r2, [pc, #72]	; (80067d0 <ff_convert+0x74>)
 8006786:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800678a:	e000      	b.n	800678e <ff_convert+0x32>
 800678c:	2300      	movs	r3, #0
 800678e:	81fb      	strh	r3, [r7, #14]
 8006790:	e016      	b.n	80067c0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8006792:	2300      	movs	r3, #0
 8006794:	81fb      	strh	r3, [r7, #14]
 8006796:	e009      	b.n	80067ac <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8006798:	89fb      	ldrh	r3, [r7, #14]
 800679a:	4a0d      	ldr	r2, [pc, #52]	; (80067d0 <ff_convert+0x74>)
 800679c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067a0:	88fa      	ldrh	r2, [r7, #6]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d006      	beq.n	80067b4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80067a6:	89fb      	ldrh	r3, [r7, #14]
 80067a8:	3301      	adds	r3, #1
 80067aa:	81fb      	strh	r3, [r7, #14]
 80067ac:	89fb      	ldrh	r3, [r7, #14]
 80067ae:	2b7f      	cmp	r3, #127	; 0x7f
 80067b0:	d9f2      	bls.n	8006798 <ff_convert+0x3c>
 80067b2:	e000      	b.n	80067b6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80067b4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80067b6:	89fb      	ldrh	r3, [r7, #14]
 80067b8:	3380      	adds	r3, #128	; 0x80
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80067c0:	89fb      	ldrh	r3, [r7, #14]
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3714      	adds	r7, #20
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr
 80067ce:	bf00      	nop
 80067d0:	08006a80 	.word	0x08006a80

080067d4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b087      	sub	sp, #28
 80067d8:	af00      	add	r7, sp, #0
 80067da:	4603      	mov	r3, r0
 80067dc:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80067de:	88fb      	ldrh	r3, [r7, #6]
 80067e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067e4:	d201      	bcs.n	80067ea <ff_wtoupper+0x16>
 80067e6:	4b3e      	ldr	r3, [pc, #248]	; (80068e0 <ff_wtoupper+0x10c>)
 80067e8:	e000      	b.n	80067ec <ff_wtoupper+0x18>
 80067ea:	4b3e      	ldr	r3, [pc, #248]	; (80068e4 <ff_wtoupper+0x110>)
 80067ec:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	1c9a      	adds	r2, r3, #2
 80067f2:	617a      	str	r2, [r7, #20]
 80067f4:	881b      	ldrh	r3, [r3, #0]
 80067f6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80067f8:	8a7b      	ldrh	r3, [r7, #18]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d068      	beq.n	80068d0 <ff_wtoupper+0xfc>
 80067fe:	88fa      	ldrh	r2, [r7, #6]
 8006800:	8a7b      	ldrh	r3, [r7, #18]
 8006802:	429a      	cmp	r2, r3
 8006804:	d364      	bcc.n	80068d0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	1c9a      	adds	r2, r3, #2
 800680a:	617a      	str	r2, [r7, #20]
 800680c:	881b      	ldrh	r3, [r3, #0]
 800680e:	823b      	strh	r3, [r7, #16]
 8006810:	8a3b      	ldrh	r3, [r7, #16]
 8006812:	0a1b      	lsrs	r3, r3, #8
 8006814:	81fb      	strh	r3, [r7, #14]
 8006816:	8a3b      	ldrh	r3, [r7, #16]
 8006818:	b2db      	uxtb	r3, r3
 800681a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800681c:	88fa      	ldrh	r2, [r7, #6]
 800681e:	8a79      	ldrh	r1, [r7, #18]
 8006820:	8a3b      	ldrh	r3, [r7, #16]
 8006822:	440b      	add	r3, r1
 8006824:	429a      	cmp	r2, r3
 8006826:	da49      	bge.n	80068bc <ff_wtoupper+0xe8>
			switch (cmd) {
 8006828:	89fb      	ldrh	r3, [r7, #14]
 800682a:	2b08      	cmp	r3, #8
 800682c:	d84f      	bhi.n	80068ce <ff_wtoupper+0xfa>
 800682e:	a201      	add	r2, pc, #4	; (adr r2, 8006834 <ff_wtoupper+0x60>)
 8006830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006834:	08006859 	.word	0x08006859
 8006838:	0800686b 	.word	0x0800686b
 800683c:	08006881 	.word	0x08006881
 8006840:	08006889 	.word	0x08006889
 8006844:	08006891 	.word	0x08006891
 8006848:	08006899 	.word	0x08006899
 800684c:	080068a1 	.word	0x080068a1
 8006850:	080068a9 	.word	0x080068a9
 8006854:	080068b1 	.word	0x080068b1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8006858:	88fa      	ldrh	r2, [r7, #6]
 800685a:	8a7b      	ldrh	r3, [r7, #18]
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	005b      	lsls	r3, r3, #1
 8006860:	697a      	ldr	r2, [r7, #20]
 8006862:	4413      	add	r3, r2
 8006864:	881b      	ldrh	r3, [r3, #0]
 8006866:	80fb      	strh	r3, [r7, #6]
 8006868:	e027      	b.n	80068ba <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800686a:	88fa      	ldrh	r2, [r7, #6]
 800686c:	8a7b      	ldrh	r3, [r7, #18]
 800686e:	1ad3      	subs	r3, r2, r3
 8006870:	b29b      	uxth	r3, r3
 8006872:	f003 0301 	and.w	r3, r3, #1
 8006876:	b29b      	uxth	r3, r3
 8006878:	88fa      	ldrh	r2, [r7, #6]
 800687a:	1ad3      	subs	r3, r2, r3
 800687c:	80fb      	strh	r3, [r7, #6]
 800687e:	e01c      	b.n	80068ba <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8006880:	88fb      	ldrh	r3, [r7, #6]
 8006882:	3b10      	subs	r3, #16
 8006884:	80fb      	strh	r3, [r7, #6]
 8006886:	e018      	b.n	80068ba <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8006888:	88fb      	ldrh	r3, [r7, #6]
 800688a:	3b20      	subs	r3, #32
 800688c:	80fb      	strh	r3, [r7, #6]
 800688e:	e014      	b.n	80068ba <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8006890:	88fb      	ldrh	r3, [r7, #6]
 8006892:	3b30      	subs	r3, #48	; 0x30
 8006894:	80fb      	strh	r3, [r7, #6]
 8006896:	e010      	b.n	80068ba <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8006898:	88fb      	ldrh	r3, [r7, #6]
 800689a:	3b1a      	subs	r3, #26
 800689c:	80fb      	strh	r3, [r7, #6]
 800689e:	e00c      	b.n	80068ba <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80068a0:	88fb      	ldrh	r3, [r7, #6]
 80068a2:	3308      	adds	r3, #8
 80068a4:	80fb      	strh	r3, [r7, #6]
 80068a6:	e008      	b.n	80068ba <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80068a8:	88fb      	ldrh	r3, [r7, #6]
 80068aa:	3b50      	subs	r3, #80	; 0x50
 80068ac:	80fb      	strh	r3, [r7, #6]
 80068ae:	e004      	b.n	80068ba <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80068b0:	88fb      	ldrh	r3, [r7, #6]
 80068b2:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80068b6:	80fb      	strh	r3, [r7, #6]
 80068b8:	bf00      	nop
			}
			break;
 80068ba:	e008      	b.n	80068ce <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80068bc:	89fb      	ldrh	r3, [r7, #14]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d195      	bne.n	80067ee <ff_wtoupper+0x1a>
 80068c2:	8a3b      	ldrh	r3, [r7, #16]
 80068c4:	005b      	lsls	r3, r3, #1
 80068c6:	697a      	ldr	r2, [r7, #20]
 80068c8:	4413      	add	r3, r2
 80068ca:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80068cc:	e78f      	b.n	80067ee <ff_wtoupper+0x1a>
			break;
 80068ce:	bf00      	nop
	}

	return chr;
 80068d0:	88fb      	ldrh	r3, [r7, #6]
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	371c      	adds	r7, #28
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr
 80068de:	bf00      	nop
 80068e0:	08006b80 	.word	0x08006b80
 80068e4:	08006d74 	.word	0x08006d74

080068e8 <memset>:
 80068e8:	4402      	add	r2, r0
 80068ea:	4603      	mov	r3, r0
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d100      	bne.n	80068f2 <memset+0xa>
 80068f0:	4770      	bx	lr
 80068f2:	f803 1b01 	strb.w	r1, [r3], #1
 80068f6:	e7f9      	b.n	80068ec <memset+0x4>

080068f8 <__libc_init_array>:
 80068f8:	b570      	push	{r4, r5, r6, lr}
 80068fa:	4d0d      	ldr	r5, [pc, #52]	; (8006930 <__libc_init_array+0x38>)
 80068fc:	4c0d      	ldr	r4, [pc, #52]	; (8006934 <__libc_init_array+0x3c>)
 80068fe:	1b64      	subs	r4, r4, r5
 8006900:	10a4      	asrs	r4, r4, #2
 8006902:	2600      	movs	r6, #0
 8006904:	42a6      	cmp	r6, r4
 8006906:	d109      	bne.n	800691c <__libc_init_array+0x24>
 8006908:	4d0b      	ldr	r5, [pc, #44]	; (8006938 <__libc_init_array+0x40>)
 800690a:	4c0c      	ldr	r4, [pc, #48]	; (800693c <__libc_init_array+0x44>)
 800690c:	f000 f818 	bl	8006940 <_init>
 8006910:	1b64      	subs	r4, r4, r5
 8006912:	10a4      	asrs	r4, r4, #2
 8006914:	2600      	movs	r6, #0
 8006916:	42a6      	cmp	r6, r4
 8006918:	d105      	bne.n	8006926 <__libc_init_array+0x2e>
 800691a:	bd70      	pop	{r4, r5, r6, pc}
 800691c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006920:	4798      	blx	r3
 8006922:	3601      	adds	r6, #1
 8006924:	e7ee      	b.n	8006904 <__libc_init_array+0xc>
 8006926:	f855 3b04 	ldr.w	r3, [r5], #4
 800692a:	4798      	blx	r3
 800692c:	3601      	adds	r6, #1
 800692e:	e7f2      	b.n	8006916 <__libc_init_array+0x1e>
 8006930:	08006e38 	.word	0x08006e38
 8006934:	08006e38 	.word	0x08006e38
 8006938:	08006e38 	.word	0x08006e38
 800693c:	08006e3c 	.word	0x08006e3c

08006940 <_init>:
 8006940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006942:	bf00      	nop
 8006944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006946:	bc08      	pop	{r3}
 8006948:	469e      	mov	lr, r3
 800694a:	4770      	bx	lr

0800694c <_fini>:
 800694c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800694e:	bf00      	nop
 8006950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006952:	bc08      	pop	{r3}
 8006954:	469e      	mov	lr, r3
 8006956:	4770      	bx	lr
