
stm32f746_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008898  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08008a60  08008a60  00018a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ab8  08008ab8  0002015c  2**0
                  CONTENTS
  4 .ARM          00000008  08008ab8  08008ab8  00018ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ac0  08008ac0  0002015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ac0  08008ac0  00018ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ac4  08008ac4  00018ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  08008ac8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bc4  2000015c  08008c24  0002015c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d20  08008c24  00021d20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010b58  00000000  00000000  000201cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ffa  00000000  00000000  00030d27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d40  00000000  00000000  00033d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009ce  00000000  00000000  00034a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000279d9  00000000  00000000  00035436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011db2  00000000  00000000  0005ce0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e72e6  00000000  00000000  0006ebc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003858  00000000  00000000  00155ea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00159700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000015c 	.word	0x2000015c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08008a48 	.word	0x08008a48

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000160 	.word	0x20000160
 8000204:	08008a48 	.word	0x08008a48

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b970 	b.w	8000500 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	460f      	mov	r7, r1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14a      	bne.n	80002de <__udivmoddi4+0xa6>
 8000248:	428a      	cmp	r2, r1
 800024a:	4694      	mov	ip, r2
 800024c:	d965      	bls.n	800031a <__udivmoddi4+0xe2>
 800024e:	fab2 f382 	clz	r3, r2
 8000252:	b143      	cbz	r3, 8000266 <__udivmoddi4+0x2e>
 8000254:	fa02 fc03 	lsl.w	ip, r2, r3
 8000258:	f1c3 0220 	rsb	r2, r3, #32
 800025c:	409f      	lsls	r7, r3
 800025e:	fa20 f202 	lsr.w	r2, r0, r2
 8000262:	4317      	orrs	r7, r2
 8000264:	409c      	lsls	r4, r3
 8000266:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800026a:	fa1f f58c 	uxth.w	r5, ip
 800026e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000272:	0c22      	lsrs	r2, r4, #16
 8000274:	fb0e 7711 	mls	r7, lr, r1, r7
 8000278:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800027c:	fb01 f005 	mul.w	r0, r1, r5
 8000280:	4290      	cmp	r0, r2
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x62>
 8000284:	eb1c 0202 	adds.w	r2, ip, r2
 8000288:	f101 37ff 	add.w	r7, r1, #4294967295
 800028c:	f080 811c 	bcs.w	80004c8 <__udivmoddi4+0x290>
 8000290:	4290      	cmp	r0, r2
 8000292:	f240 8119 	bls.w	80004c8 <__udivmoddi4+0x290>
 8000296:	3902      	subs	r1, #2
 8000298:	4462      	add	r2, ip
 800029a:	1a12      	subs	r2, r2, r0
 800029c:	b2a4      	uxth	r4, r4
 800029e:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002aa:	fb00 f505 	mul.w	r5, r0, r5
 80002ae:	42a5      	cmp	r5, r4
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x90>
 80002b2:	eb1c 0404 	adds.w	r4, ip, r4
 80002b6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x294>
 80002be:	42a5      	cmp	r5, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x294>
 80002c4:	4464      	add	r4, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002cc:	1b64      	subs	r4, r4, r5
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11e      	cbz	r6, 80002da <__udivmoddi4+0xa2>
 80002d2:	40dc      	lsrs	r4, r3
 80002d4:	2300      	movs	r3, #0
 80002d6:	e9c6 4300 	strd	r4, r3, [r6]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0xbc>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80ed 	beq.w	80004c2 <__udivmoddi4+0x28a>
 80002e8:	2100      	movs	r1, #0
 80002ea:	e9c6 0500 	strd	r0, r5, [r6]
 80002ee:	4608      	mov	r0, r1
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	fab3 f183 	clz	r1, r3
 80002f8:	2900      	cmp	r1, #0
 80002fa:	d149      	bne.n	8000390 <__udivmoddi4+0x158>
 80002fc:	42ab      	cmp	r3, r5
 80002fe:	d302      	bcc.n	8000306 <__udivmoddi4+0xce>
 8000300:	4282      	cmp	r2, r0
 8000302:	f200 80f8 	bhi.w	80004f6 <__udivmoddi4+0x2be>
 8000306:	1a84      	subs	r4, r0, r2
 8000308:	eb65 0203 	sbc.w	r2, r5, r3
 800030c:	2001      	movs	r0, #1
 800030e:	4617      	mov	r7, r2
 8000310:	2e00      	cmp	r6, #0
 8000312:	d0e2      	beq.n	80002da <__udivmoddi4+0xa2>
 8000314:	e9c6 4700 	strd	r4, r7, [r6]
 8000318:	e7df      	b.n	80002da <__udivmoddi4+0xa2>
 800031a:	b902      	cbnz	r2, 800031e <__udivmoddi4+0xe6>
 800031c:	deff      	udf	#255	; 0xff
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	2b00      	cmp	r3, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x210>
 8000328:	1a8a      	subs	r2, r1, r2
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2101      	movs	r1, #1
 8000334:	fbb2 f5f7 	udiv	r5, r2, r7
 8000338:	fb07 2015 	mls	r0, r7, r5, r2
 800033c:	0c22      	lsrs	r2, r4, #16
 800033e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000342:	fb0e f005 	mul.w	r0, lr, r5
 8000346:	4290      	cmp	r0, r2
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x124>
 800034a:	eb1c 0202 	adds.w	r2, ip, r2
 800034e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4290      	cmp	r0, r2
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2b8>
 800035a:	4645      	mov	r5, r8
 800035c:	1a12      	subs	r2, r2, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb2 f0f7 	udiv	r0, r2, r7
 8000364:	fb07 2210 	mls	r2, r7, r0, r2
 8000368:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x14e>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 32ff 	add.w	r2, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x14c>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2c2>
 8000384:	4610      	mov	r0, r2
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038e:	e79f      	b.n	80002d0 <__udivmoddi4+0x98>
 8000390:	f1c1 0720 	rsb	r7, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa05 f401 	lsl.w	r4, r5, r1
 80003a2:	fa20 f307 	lsr.w	r3, r0, r7
 80003a6:	40fd      	lsrs	r5, r7
 80003a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c0:	fb08 f50e 	mul.w	r5, r8, lr
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	fa00 f001 	lsl.w	r0, r0, r1
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2b4>
 80003dc:	42a5      	cmp	r5, r4
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2b4>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4464      	add	r4, ip
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	b29d      	uxth	r5, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003fc:	45a6      	cmp	lr, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f103 35ff 	add.w	r5, r3, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2ac>
 800040a:	45a6      	cmp	lr, r4
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2ac>
 800040e:	3b02      	subs	r3, #2
 8000410:	4464      	add	r4, ip
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fba3 9502 	umull	r9, r5, r3, r2
 800041a:	eba4 040e 	sub.w	r4, r4, lr
 800041e:	42ac      	cmp	r4, r5
 8000420:	46c8      	mov	r8, r9
 8000422:	46ae      	mov	lr, r5
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x29c>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x298>
 8000428:	b156      	cbz	r6, 8000440 <__udivmoddi4+0x208>
 800042a:	ebb0 0208 	subs.w	r2, r0, r8
 800042e:	eb64 040e 	sbc.w	r4, r4, lr
 8000432:	fa04 f707 	lsl.w	r7, r4, r7
 8000436:	40ca      	lsrs	r2, r1
 8000438:	40cc      	lsrs	r4, r1
 800043a:	4317      	orrs	r7, r2
 800043c:	e9c6 7400 	strd	r7, r4, [r6]
 8000440:	4618      	mov	r0, r3
 8000442:	2100      	movs	r1, #0
 8000444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000448:	f1c3 0120 	rsb	r1, r3, #32
 800044c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000450:	fa20 f201 	lsr.w	r2, r0, r1
 8000454:	fa25 f101 	lsr.w	r1, r5, r1
 8000458:	409d      	lsls	r5, r3
 800045a:	432a      	orrs	r2, r5
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb1 f0f7 	udiv	r0, r1, r7
 8000468:	fb07 1510 	mls	r5, r7, r0, r1
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000472:	fb00 f50e 	mul.w	r5, r0, lr
 8000476:	428d      	cmp	r5, r1
 8000478:	fa04 f403 	lsl.w	r4, r4, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x258>
 800047e:	eb1c 0101 	adds.w	r1, ip, r1
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 8000488:	428d      	cmp	r5, r1
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 800048c:	3802      	subs	r0, #2
 800048e:	4461      	add	r1, ip
 8000490:	1b49      	subs	r1, r1, r5
 8000492:	b292      	uxth	r2, r2
 8000494:	fbb1 f5f7 	udiv	r5, r1, r7
 8000498:	fb07 1115 	mls	r1, r7, r5, r1
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	fb05 f10e 	mul.w	r1, r5, lr
 80004a4:	4291      	cmp	r1, r2
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x282>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0xfc>
 80004c2:	4631      	mov	r1, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xa2>
 80004c8:	4639      	mov	r1, r7
 80004ca:	e6e6      	b.n	800029a <__udivmoddi4+0x62>
 80004cc:	4610      	mov	r0, r2
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x90>
 80004d0:	4548      	cmp	r0, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004dc:	3b01      	subs	r3, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004e0:	4645      	mov	r5, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x282>
 80004e4:	462b      	mov	r3, r5
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x258>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004f0:	3d02      	subs	r5, #2
 80004f2:	4462      	add	r2, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x124>
 80004f6:	4608      	mov	r0, r1
 80004f8:	e70a      	b.n	8000310 <__udivmoddi4+0xd8>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x14e>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint8_t               TxData[8];
uint32_t              TxMailbox;
uint8_t               RxData[8];

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(&hcan1, TxMailbox, &RxHeader, RxData);
 800050c:	4b07      	ldr	r3, [pc, #28]	; (800052c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 800050e:	6819      	ldr	r1, [r3, #0]
 8000510:	4b07      	ldr	r3, [pc, #28]	; (8000530 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000512:	4a08      	ldr	r2, [pc, #32]	; (8000534 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000514:	4808      	ldr	r0, [pc, #32]	; (8000538 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000516:	f000 fe55 	bl	80011c4 <HAL_CAN_GetRxMessage>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 800051a:	2102      	movs	r1, #2
 800051c:	4807      	ldr	r0, [pc, #28]	; (800053c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 800051e:	f001 fc90 	bl	8001e42 <HAL_GPIO_TogglePin>
//	print(RxData[0]);
}
 8000522:	bf00      	nop
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	200001dc 	.word	0x200001dc
 8000530:	200001e0 	.word	0x200001e0
 8000534:	200001b8 	.word	0x200001b8
 8000538:	20000178 	.word	0x20000178
 800053c:	40020400 	.word	0x40020400

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000544:	f000 facd 	bl	8000ae2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000548:	f000 f838 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054c:	f000 f906 	bl	800075c <MX_GPIO_Init>
  MX_CAN1_Init();
 8000550:	f000 f89a 	bl	8000688 <MX_CAN1_Init>
  MX_USB_DEVICE_Init();
 8000554:	f007 fbd0 	bl	8007cf8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  TxHeader.IDE = CAN_ID_STD;
 8000558:	4b14      	ldr	r3, [pc, #80]	; (80005ac <main+0x6c>)
 800055a:	2200      	movs	r2, #0
 800055c:	609a      	str	r2, [r3, #8]
  TxHeader.StdId = 0x446;
 800055e:	4b13      	ldr	r3, [pc, #76]	; (80005ac <main+0x6c>)
 8000560:	f240 4246 	movw	r2, #1094	; 0x446
 8000564:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA;
 8000566:	4b11      	ldr	r3, [pc, #68]	; (80005ac <main+0x6c>)
 8000568:	2200      	movs	r2, #0
 800056a:	60da      	str	r2, [r3, #12]
  TxHeader.DLC = 2;
 800056c:	4b0f      	ldr	r3, [pc, #60]	; (80005ac <main+0x6c>)
 800056e:	2202      	movs	r2, #2
 8000570:	611a      	str	r2, [r3, #16]

  TxData[0] = 50;
 8000572:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <main+0x70>)
 8000574:	2232      	movs	r2, #50	; 0x32
 8000576:	701a      	strb	r2, [r3, #0]
  TxData[1] = 0xAA;
 8000578:	4b0d      	ldr	r3, [pc, #52]	; (80005b0 <main+0x70>)
 800057a:	22aa      	movs	r2, #170	; 0xaa
 800057c:	705a      	strb	r2, [r3, #1]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 800057e:	4b0d      	ldr	r3, [pc, #52]	; (80005b4 <main+0x74>)
 8000580:	4a0b      	ldr	r2, [pc, #44]	; (80005b0 <main+0x70>)
 8000582:	490a      	ldr	r1, [pc, #40]	; (80005ac <main+0x6c>)
 8000584:	480c      	ldr	r0, [pc, #48]	; (80005b8 <main+0x78>)
 8000586:	f000 fd4d 	bl	8001024 <HAL_CAN_AddTxMessage>
	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 800058a:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <main+0x74>)
 800058c:	4a08      	ldr	r2, [pc, #32]	; (80005b0 <main+0x70>)
 800058e:	4907      	ldr	r1, [pc, #28]	; (80005ac <main+0x6c>)
 8000590:	4809      	ldr	r0, [pc, #36]	; (80005b8 <main+0x78>)
 8000592:	f000 fd47 	bl	8001024 <HAL_CAN_AddTxMessage>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <main+0x60>
	{
	  Error_Handler();
 800059c:	f000 f972 	bl	8000884 <Error_Handler>
	}

	HAL_Delay(1000);
 80005a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005a4:	f000 fafa 	bl	8000b9c <HAL_Delay>
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 80005a8:	e7e9      	b.n	800057e <main+0x3e>
 80005aa:	bf00      	nop
 80005ac:	200001a0 	.word	0x200001a0
 80005b0:	200001d4 	.word	0x200001d4
 80005b4:	200001dc 	.word	0x200001dc
 80005b8:	20000178 	.word	0x20000178

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	; 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	2230      	movs	r2, #48	; 0x30
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f008 f9ac 	bl	8008928 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	4b27      	ldr	r3, [pc, #156]	; (8000680 <SystemClock_Config+0xc4>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	4a26      	ldr	r2, [pc, #152]	; (8000680 <SystemClock_Config+0xc4>)
 80005e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ea:	6413      	str	r3, [r2, #64]	; 0x40
 80005ec:	4b24      	ldr	r3, [pc, #144]	; (8000680 <SystemClock_Config+0xc4>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005f8:	4b22      	ldr	r3, [pc, #136]	; (8000684 <SystemClock_Config+0xc8>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000600:	4a20      	ldr	r2, [pc, #128]	; (8000684 <SystemClock_Config+0xc8>)
 8000602:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	4b1e      	ldr	r3, [pc, #120]	; (8000684 <SystemClock_Config+0xc8>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000614:	2301      	movs	r3, #1
 8000616:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000618:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800061c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061e:	2302      	movs	r3, #2
 8000620:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000622:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000626:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000628:	2308      	movs	r3, #8
 800062a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800062c:	2348      	movs	r3, #72	; 0x48
 800062e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000630:	2302      	movs	r3, #2
 8000632:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000634:	2303      	movs	r3, #3
 8000636:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000638:	f107 0320 	add.w	r3, r7, #32
 800063c:	4618      	mov	r0, r3
 800063e:	f002 fed3 	bl	80033e8 <HAL_RCC_OscConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000648:	f000 f91c 	bl	8000884 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064c:	230f      	movs	r3, #15
 800064e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000650:	2302      	movs	r3, #2
 8000652:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000658:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800065c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000662:	f107 030c 	add.w	r3, r7, #12
 8000666:	2102      	movs	r1, #2
 8000668:	4618      	mov	r0, r3
 800066a:	f003 f961 	bl	8003930 <HAL_RCC_ClockConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000674:	f000 f906 	bl	8000884 <Error_Handler>
  }
}
 8000678:	bf00      	nop
 800067a:	3750      	adds	r7, #80	; 0x50
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40023800 	.word	0x40023800
 8000684:	40007000 	.word	0x40007000

08000688 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08a      	sub	sp, #40	; 0x28
 800068c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800068e:	4b31      	ldr	r3, [pc, #196]	; (8000754 <MX_CAN1_Init+0xcc>)
 8000690:	4a31      	ldr	r2, [pc, #196]	; (8000758 <MX_CAN1_Init+0xd0>)
 8000692:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 8000694:	4b2f      	ldr	r3, [pc, #188]	; (8000754 <MX_CAN1_Init+0xcc>)
 8000696:	220a      	movs	r2, #10
 8000698:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800069a:	4b2e      	ldr	r3, [pc, #184]	; (8000754 <MX_CAN1_Init+0xcc>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006a0:	4b2c      	ldr	r3, [pc, #176]	; (8000754 <MX_CAN1_Init+0xcc>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_14TQ;
 80006a6:	4b2b      	ldr	r3, [pc, #172]	; (8000754 <MX_CAN1_Init+0xcc>)
 80006a8:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 80006ac:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 80006ae:	4b29      	ldr	r3, [pc, #164]	; (8000754 <MX_CAN1_Init+0xcc>)
 80006b0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80006b4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80006b6:	4b27      	ldr	r3, [pc, #156]	; (8000754 <MX_CAN1_Init+0xcc>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80006bc:	4b25      	ldr	r3, [pc, #148]	; (8000754 <MX_CAN1_Init+0xcc>)
 80006be:	2200      	movs	r2, #0
 80006c0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006c2:	4b24      	ldr	r3, [pc, #144]	; (8000754 <MX_CAN1_Init+0xcc>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80006c8:	4b22      	ldr	r3, [pc, #136]	; (8000754 <MX_CAN1_Init+0xcc>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006ce:	4b21      	ldr	r3, [pc, #132]	; (8000754 <MX_CAN1_Init+0xcc>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80006d4:	4b1f      	ldr	r3, [pc, #124]	; (8000754 <MX_CAN1_Init+0xcc>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006da:	481e      	ldr	r0, [pc, #120]	; (8000754 <MX_CAN1_Init+0xcc>)
 80006dc:	f000 fa82 	bl	8000be4 <HAL_CAN_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80006e6:	f000 f8cd 	bl	8000884 <Error_Handler>
  /* USER CODE BEGIN CAN1_Init 2 */

  /*##-2- Configure the CAN Filter ###########################################*/
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80006ea:	2301      	movs	r3, #1
 80006ec:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 80006ee:	2312      	movs	r3, #18
 80006f0:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x446<<5;
 80006f6:	f648 03c0 	movw	r3, #35008	; 0x88c0
 80006fa:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x446<<5;
 8000700:	f648 03c0 	movw	r3, #35008	; 0x88c0
 8000704:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8000706:	2300      	movs	r3, #0
 8000708:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800070a:	2300      	movs	r3, #0
 800070c:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800070e:	2301      	movs	r3, #1
 8000710:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 8000712:	2314      	movs	r3, #20
 8000714:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig) != HAL_OK)
 8000716:	463b      	mov	r3, r7
 8000718:	4619      	mov	r1, r3
 800071a:	480e      	ldr	r0, [pc, #56]	; (8000754 <MX_CAN1_Init+0xcc>)
 800071c:	f000 fb5e 	bl	8000ddc <HAL_CAN_ConfigFilter>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_CAN1_Init+0xa2>
	{
	  /* Filter configuration Error */
	  Error_Handler();
 8000726:	f000 f8ad 	bl	8000884 <Error_Handler>
	}

	/*##-3- Start the CAN peripheral ###########################################*/
	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 800072a:	480a      	ldr	r0, [pc, #40]	; (8000754 <MX_CAN1_Init+0xcc>)
 800072c:	f000 fc36 	bl	8000f9c <HAL_CAN_Start>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_CAN1_Init+0xb2>
	{
	  /* Start Error */
	  Error_Handler();
 8000736:	f000 f8a5 	bl	8000884 <Error_Handler>
	}

	/*##-4- Activate CAN RX notification #######################################*/
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800073a:	2102      	movs	r1, #2
 800073c:	4805      	ldr	r0, [pc, #20]	; (8000754 <MX_CAN1_Init+0xcc>)
 800073e:	f000 fe53 	bl	80013e8 <HAL_CAN_ActivateNotification>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_CAN1_Init+0xc4>
	{
	  /* Notification Error */
	  Error_Handler();
 8000748:	f000 f89c 	bl	8000884 <Error_Handler>
	}


  /* USER CODE END CAN1_Init 2 */

}
 800074c:	bf00      	nop
 800074e:	3728      	adds	r7, #40	; 0x28
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20000178 	.word	0x20000178
 8000758:	40006400 	.word	0x40006400

0800075c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08c      	sub	sp, #48	; 0x30
 8000760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000772:	4b40      	ldr	r3, [pc, #256]	; (8000874 <MX_GPIO_Init+0x118>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a3f      	ldr	r2, [pc, #252]	; (8000874 <MX_GPIO_Init+0x118>)
 8000778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b3d      	ldr	r3, [pc, #244]	; (8000874 <MX_GPIO_Init+0x118>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000786:	61bb      	str	r3, [r7, #24]
 8000788:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078a:	4b3a      	ldr	r3, [pc, #232]	; (8000874 <MX_GPIO_Init+0x118>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a39      	ldr	r2, [pc, #228]	; (8000874 <MX_GPIO_Init+0x118>)
 8000790:	f043 0304 	orr.w	r3, r3, #4
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b37      	ldr	r3, [pc, #220]	; (8000874 <MX_GPIO_Init+0x118>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0304 	and.w	r3, r3, #4
 800079e:	617b      	str	r3, [r7, #20]
 80007a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a2:	4b34      	ldr	r3, [pc, #208]	; (8000874 <MX_GPIO_Init+0x118>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a33      	ldr	r2, [pc, #204]	; (8000874 <MX_GPIO_Init+0x118>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b31      	ldr	r3, [pc, #196]	; (8000874 <MX_GPIO_Init+0x118>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	4b2e      	ldr	r3, [pc, #184]	; (8000874 <MX_GPIO_Init+0x118>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a2d      	ldr	r2, [pc, #180]	; (8000874 <MX_GPIO_Init+0x118>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b2b      	ldr	r3, [pc, #172]	; (8000874 <MX_GPIO_Init+0x118>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d2:	4b28      	ldr	r3, [pc, #160]	; (8000874 <MX_GPIO_Init+0x118>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a27      	ldr	r2, [pc, #156]	; (8000874 <MX_GPIO_Init+0x118>)
 80007d8:	f043 0308 	orr.w	r3, r3, #8
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b25      	ldr	r3, [pc, #148]	; (8000874 <MX_GPIO_Init+0x118>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0308 	and.w	r3, r3, #8
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ea:	4b22      	ldr	r3, [pc, #136]	; (8000874 <MX_GPIO_Init+0x118>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a21      	ldr	r2, [pc, #132]	; (8000874 <MX_GPIO_Init+0x118>)
 80007f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b1f      	ldr	r3, [pc, #124]	; (8000874 <MX_GPIO_Init+0x118>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_SET);
 8000802:	2201      	movs	r2, #1
 8000804:	2103      	movs	r1, #3
 8000806:	481c      	ldr	r0, [pc, #112]	; (8000878 <MX_GPIO_Init+0x11c>)
 8000808:	f001 fb02 	bl	8001e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET);
 800080c:	2201      	movs	r2, #1
 800080e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000812:	481a      	ldr	r0, [pc, #104]	; (800087c <MX_GPIO_Init+0x120>)
 8000814:	f001 fafc 	bl	8001e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000818:	2320      	movs	r3, #32
 800081a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081c:	2300      	movs	r3, #0
 800081e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	4619      	mov	r1, r3
 800082a:	4815      	ldr	r0, [pc, #84]	; (8000880 <MX_GPIO_Init+0x124>)
 800082c:	f001 f944 	bl	8001ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000830:	2303      	movs	r3, #3
 8000832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000834:	2301      	movs	r3, #1
 8000836:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083c:	2300      	movs	r3, #0
 800083e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000840:	f107 031c 	add.w	r3, r7, #28
 8000844:	4619      	mov	r1, r3
 8000846:	480c      	ldr	r0, [pc, #48]	; (8000878 <MX_GPIO_Init+0x11c>)
 8000848:	f001 f936 	bl	8001ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800084c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000852:	2301      	movs	r3, #1
 8000854:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2300      	movs	r3, #0
 800085c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4619      	mov	r1, r3
 8000864:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_GPIO_Init+0x120>)
 8000866:	f001 f927 	bl	8001ab8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800086a:	bf00      	nop
 800086c:	3730      	adds	r7, #48	; 0x30
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40023800 	.word	0x40023800
 8000878:	40020400 	.word	0x40020400
 800087c:	40021800 	.word	0x40021800
 8000880:	40020800 	.word	0x40020800

08000884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000888:	b672      	cpsid	i
}
 800088a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800088c:	2101      	movs	r1, #1
 800088e:	4804      	ldr	r0, [pc, #16]	; (80008a0 <Error_Handler+0x1c>)
 8000890:	f001 fad7 	bl	8001e42 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000894:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000898:	f000 f980 	bl	8000b9c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800089c:	e7f6      	b.n	800088c <Error_Handler+0x8>
 800089e:	bf00      	nop
 80008a0:	40020400 	.word	0x40020400

080008a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80008aa:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <HAL_MspInit+0x44>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ae:	4a0e      	ldr	r2, [pc, #56]	; (80008e8 <HAL_MspInit+0x44>)
 80008b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b4:	6413      	str	r3, [r2, #64]	; 0x40
 80008b6:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <HAL_MspInit+0x44>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <HAL_MspInit+0x44>)
 80008c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c6:	4a08      	ldr	r2, [pc, #32]	; (80008e8 <HAL_MspInit+0x44>)
 80008c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008cc:	6453      	str	r3, [r2, #68]	; 0x44
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <HAL_MspInit+0x44>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800

080008ec <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08a      	sub	sp, #40	; 0x28
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a1b      	ldr	r2, [pc, #108]	; (8000978 <HAL_CAN_MspInit+0x8c>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d12f      	bne.n	800096e <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800090e:	4b1b      	ldr	r3, [pc, #108]	; (800097c <HAL_CAN_MspInit+0x90>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000912:	4a1a      	ldr	r2, [pc, #104]	; (800097c <HAL_CAN_MspInit+0x90>)
 8000914:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000918:	6413      	str	r3, [r2, #64]	; 0x40
 800091a:	4b18      	ldr	r3, [pc, #96]	; (800097c <HAL_CAN_MspInit+0x90>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000926:	4b15      	ldr	r3, [pc, #84]	; (800097c <HAL_CAN_MspInit+0x90>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a14      	ldr	r2, [pc, #80]	; (800097c <HAL_CAN_MspInit+0x90>)
 800092c:	f043 0308 	orr.w	r3, r3, #8
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b12      	ldr	r3, [pc, #72]	; (800097c <HAL_CAN_MspInit+0x90>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0308 	and.w	r3, r3, #8
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800093e:	2303      	movs	r3, #3
 8000940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094a:	2303      	movs	r3, #3
 800094c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800094e:	2309      	movs	r3, #9
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	4619      	mov	r1, r3
 8000958:	4809      	ldr	r0, [pc, #36]	; (8000980 <HAL_CAN_MspInit+0x94>)
 800095a:	f001 f8ad 	bl	8001ab8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800095e:	2200      	movs	r2, #0
 8000960:	2100      	movs	r1, #0
 8000962:	2014      	movs	r0, #20
 8000964:	f001 f871 	bl	8001a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000968:	2014      	movs	r0, #20
 800096a:	f001 f88a 	bl	8001a82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800096e:	bf00      	nop
 8000970:	3728      	adds	r7, #40	; 0x28
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40006400 	.word	0x40006400
 800097c:	40023800 	.word	0x40023800
 8000980:	40020c00 	.word	0x40020c00

08000984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <NMI_Handler+0x4>

0800098a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800098e:	e7fe      	b.n	800098e <HardFault_Handler+0x4>

08000990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <MemManage_Handler+0x4>

08000996 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800099a:	e7fe      	b.n	800099a <BusFault_Handler+0x4>

0800099c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <UsageFault_Handler+0x4>

080009a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d0:	f000 f8c4 	bl	8000b5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80009dc:	4802      	ldr	r0, [pc, #8]	; (80009e8 <CAN1_RX0_IRQHandler+0x10>)
 80009de:	f000 fd29 	bl	8001434 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000178 	.word	0x20000178

080009ec <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80009f0:	4802      	ldr	r0, [pc, #8]	; (80009fc <OTG_HS_IRQHandler+0x10>)
 80009f2:	f001 fb86 	bl	8002102 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	200016d0 	.word	0x200016d0

08000a00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a08:	4a14      	ldr	r2, [pc, #80]	; (8000a5c <_sbrk+0x5c>)
 8000a0a:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <_sbrk+0x60>)
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a14:	4b13      	ldr	r3, [pc, #76]	; (8000a64 <_sbrk+0x64>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d102      	bne.n	8000a22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a1c:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <_sbrk+0x64>)
 8000a1e:	4a12      	ldr	r2, [pc, #72]	; (8000a68 <_sbrk+0x68>)
 8000a20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <_sbrk+0x64>)
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4413      	add	r3, r2
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d207      	bcs.n	8000a40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a30:	f007 ff92 	bl	8008958 <__errno>
 8000a34:	4603      	mov	r3, r0
 8000a36:	220c      	movs	r2, #12
 8000a38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a3e:	e009      	b.n	8000a54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a40:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <_sbrk+0x64>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a46:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <_sbrk+0x64>)
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	4a05      	ldr	r2, [pc, #20]	; (8000a64 <_sbrk+0x64>)
 8000a50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a52:	68fb      	ldr	r3, [r7, #12]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3718      	adds	r7, #24
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20050000 	.word	0x20050000
 8000a60:	00000400 	.word	0x00000400
 8000a64:	200001e8 	.word	0x200001e8
 8000a68:	20001d20 	.word	0x20001d20

08000a6c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <SystemInit+0x20>)
 8000a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a76:	4a05      	ldr	r2, [pc, #20]	; (8000a8c <SystemInit+0x20>)
 8000a78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ac8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a94:	480d      	ldr	r0, [pc, #52]	; (8000acc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a96:	490e      	ldr	r1, [pc, #56]	; (8000ad0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a98:	4a0e      	ldr	r2, [pc, #56]	; (8000ad4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a9c:	e002      	b.n	8000aa4 <LoopCopyDataInit>

08000a9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aa2:	3304      	adds	r3, #4

08000aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa8:	d3f9      	bcc.n	8000a9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aaa:	4a0b      	ldr	r2, [pc, #44]	; (8000ad8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000aac:	4c0b      	ldr	r4, [pc, #44]	; (8000adc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab0:	e001      	b.n	8000ab6 <LoopFillZerobss>

08000ab2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ab2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab4:	3204      	adds	r2, #4

08000ab6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ab6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab8:	d3fb      	bcc.n	8000ab2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000aba:	f7ff ffd7 	bl	8000a6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000abe:	f007 ff51 	bl	8008964 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ac2:	f7ff fd3d 	bl	8000540 <main>
  bx  lr    
 8000ac6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ac8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000acc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad0:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 8000ad4:	08008ac8 	.word	0x08008ac8
  ldr r2, =_sbss
 8000ad8:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 8000adc:	20001d20 	.word	0x20001d20

08000ae0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ae0:	e7fe      	b.n	8000ae0 <ADC_IRQHandler>

08000ae2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae6:	2003      	movs	r0, #3
 8000ae8:	f000 ffa4 	bl	8001a34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aec:	200f      	movs	r0, #15
 8000aee:	f000 f805 	bl	8000afc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000af2:	f7ff fed7 	bl	80008a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000af6:	2300      	movs	r3, #0
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	bd80      	pop	{r7, pc}

08000afc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b04:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <HAL_InitTick+0x54>)
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <HAL_InitTick+0x58>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f000 ffbf 	bl	8001a9e <HAL_SYSTICK_Config>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
 8000b28:	e00e      	b.n	8000b48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2b0f      	cmp	r3, #15
 8000b2e:	d80a      	bhi.n	8000b46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b30:	2200      	movs	r2, #0
 8000b32:	6879      	ldr	r1, [r7, #4]
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	f000 ff87 	bl	8001a4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b3c:	4a06      	ldr	r2, [pc, #24]	; (8000b58 <HAL_InitTick+0x5c>)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b42:	2300      	movs	r3, #0
 8000b44:	e000      	b.n	8000b48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000000 	.word	0x20000000
 8000b54:	20000008 	.word	0x20000008
 8000b58:	20000004 	.word	0x20000004

08000b5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <HAL_IncTick+0x20>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	461a      	mov	r2, r3
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <HAL_IncTick+0x24>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	4a04      	ldr	r2, [pc, #16]	; (8000b80 <HAL_IncTick+0x24>)
 8000b6e:	6013      	str	r3, [r2, #0]
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	20000008 	.word	0x20000008
 8000b80:	200001ec 	.word	0x200001ec

08000b84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  return uwTick;
 8000b88:	4b03      	ldr	r3, [pc, #12]	; (8000b98 <HAL_GetTick+0x14>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	200001ec 	.word	0x200001ec

08000b9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ba4:	f7ff ffee 	bl	8000b84 <HAL_GetTick>
 8000ba8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bb4:	d005      	beq.n	8000bc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bb6:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <HAL_Delay+0x44>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	461a      	mov	r2, r3
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bc2:	bf00      	nop
 8000bc4:	f7ff ffde 	bl	8000b84 <HAL_GetTick>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	68fa      	ldr	r2, [r7, #12]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d8f7      	bhi.n	8000bc4 <HAL_Delay+0x28>
  {
  }
}
 8000bd4:	bf00      	nop
 8000bd6:	bf00      	nop
 8000bd8:	3710      	adds	r7, #16
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000008 	.word	0x20000008

08000be4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d101      	bne.n	8000bf6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e0ed      	b.n	8000dd2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d102      	bne.n	8000c08 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f7ff fe72 	bl	80008ec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f042 0201 	orr.w	r2, r2, #1
 8000c16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c18:	f7ff ffb4 	bl	8000b84 <HAL_GetTick>
 8000c1c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c1e:	e012      	b.n	8000c46 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c20:	f7ff ffb0 	bl	8000b84 <HAL_GetTick>
 8000c24:	4602      	mov	r2, r0
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	2b0a      	cmp	r3, #10
 8000c2c:	d90b      	bls.n	8000c46 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c32:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2205      	movs	r2, #5
 8000c3e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	e0c5      	b.n	8000dd2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	f003 0301 	and.w	r3, r3, #1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d0e5      	beq.n	8000c20 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f022 0202 	bic.w	r2, r2, #2
 8000c62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c64:	f7ff ff8e 	bl	8000b84 <HAL_GetTick>
 8000c68:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c6a:	e012      	b.n	8000c92 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c6c:	f7ff ff8a 	bl	8000b84 <HAL_GetTick>
 8000c70:	4602      	mov	r2, r0
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	2b0a      	cmp	r3, #10
 8000c78:	d90b      	bls.n	8000c92 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c7e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2205      	movs	r2, #5
 8000c8a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e09f      	b.n	8000dd2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f003 0302 	and.w	r3, r3, #2
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d1e5      	bne.n	8000c6c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	7e1b      	ldrb	r3, [r3, #24]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d108      	bne.n	8000cba <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	e007      	b.n	8000cca <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000cc8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	7e5b      	ldrb	r3, [r3, #25]
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d108      	bne.n	8000ce4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	e007      	b.n	8000cf4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000cf2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	7e9b      	ldrb	r3, [r3, #26]
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d108      	bne.n	8000d0e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f042 0220 	orr.w	r2, r2, #32
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	e007      	b.n	8000d1e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f022 0220 	bic.w	r2, r2, #32
 8000d1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	7edb      	ldrb	r3, [r3, #27]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d108      	bne.n	8000d38 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f022 0210 	bic.w	r2, r2, #16
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	e007      	b.n	8000d48 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f042 0210 	orr.w	r2, r2, #16
 8000d46:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	7f1b      	ldrb	r3, [r3, #28]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d108      	bne.n	8000d62 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f042 0208 	orr.w	r2, r2, #8
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	e007      	b.n	8000d72 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f022 0208 	bic.w	r2, r2, #8
 8000d70:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	7f5b      	ldrb	r3, [r3, #29]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d108      	bne.n	8000d8c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f042 0204 	orr.w	r2, r2, #4
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	e007      	b.n	8000d9c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f022 0204 	bic.w	r2, r2, #4
 8000d9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	689a      	ldr	r2, [r3, #8]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	431a      	orrs	r2, r3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	691b      	ldr	r3, [r3, #16]
 8000daa:	431a      	orrs	r2, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	695b      	ldr	r3, [r3, #20]
 8000db0:	ea42 0103 	orr.w	r1, r2, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	1e5a      	subs	r2, r3, #1
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	430a      	orrs	r2, r1
 8000dc0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2201      	movs	r2, #1
 8000dcc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b087      	sub	sp, #28
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000df2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000df4:	7cfb      	ldrb	r3, [r7, #19]
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d003      	beq.n	8000e02 <HAL_CAN_ConfigFilter+0x26>
 8000dfa:	7cfb      	ldrb	r3, [r7, #19]
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	f040 80be 	bne.w	8000f7e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000e02:	4b65      	ldr	r3, [pc, #404]	; (8000f98 <HAL_CAN_ConfigFilter+0x1bc>)
 8000e04:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e0c:	f043 0201 	orr.w	r2, r3, #1
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e1c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e30:	021b      	lsls	r3, r3, #8
 8000e32:	431a      	orrs	r2, r3
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	695b      	ldr	r3, [r3, #20]
 8000e3e:	f003 031f 	and.w	r3, r3, #31
 8000e42:	2201      	movs	r2, #1
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	43db      	mvns	r3, r3
 8000e54:	401a      	ands	r2, r3
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	69db      	ldr	r3, [r3, #28]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d123      	bne.n	8000eac <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	401a      	ands	r2, r3
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	68db      	ldr	r3, [r3, #12]
 8000e7a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e82:	683a      	ldr	r2, [r7, #0]
 8000e84:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000e86:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	3248      	adds	r2, #72	; 0x48
 8000e8c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ea0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ea2:	6979      	ldr	r1, [r7, #20]
 8000ea4:	3348      	adds	r3, #72	; 0x48
 8000ea6:	00db      	lsls	r3, r3, #3
 8000ea8:	440b      	add	r3, r1
 8000eaa:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	69db      	ldr	r3, [r3, #28]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d122      	bne.n	8000efa <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	431a      	orrs	r2, r3
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ed0:	683a      	ldr	r2, [r7, #0]
 8000ed2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000ed4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	3248      	adds	r2, #72	; 0x48
 8000eda:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000eee:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ef0:	6979      	ldr	r1, [r7, #20]
 8000ef2:	3348      	adds	r3, #72	; 0x48
 8000ef4:	00db      	lsls	r3, r3, #3
 8000ef6:	440b      	add	r3, r1
 8000ef8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	699b      	ldr	r3, [r3, #24]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d109      	bne.n	8000f16 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	401a      	ands	r2, r3
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000f14:	e007      	b.n	8000f26 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	431a      	orrs	r2, r3
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	691b      	ldr	r3, [r3, #16]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d109      	bne.n	8000f42 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	43db      	mvns	r3, r3
 8000f38:	401a      	ands	r2, r3
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000f40:	e007      	b.n	8000f52 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	431a      	orrs	r2, r3
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	6a1b      	ldr	r3, [r3, #32]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d107      	bne.n	8000f6a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	431a      	orrs	r2, r3
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f70:	f023 0201 	bic.w	r2, r3, #1
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	e006      	b.n	8000f8c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f82:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
  }
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	371c      	adds	r7, #28
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	40006400 	.word	0x40006400

08000f9c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d12e      	bne.n	800100e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2202      	movs	r2, #2
 8000fb4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f022 0201 	bic.w	r2, r2, #1
 8000fc6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000fc8:	f7ff fddc 	bl	8000b84 <HAL_GetTick>
 8000fcc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000fce:	e012      	b.n	8000ff6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fd0:	f7ff fdd8 	bl	8000b84 <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	2b0a      	cmp	r3, #10
 8000fdc:	d90b      	bls.n	8000ff6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2205      	movs	r2, #5
 8000fee:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e012      	b.n	800101c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f003 0301 	and.w	r3, r3, #1
 8001000:	2b00      	cmp	r3, #0
 8001002:	d1e5      	bne.n	8000fd0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800100a:	2300      	movs	r3, #0
 800100c:	e006      	b.n	800101c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001012:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
  }
}
 800101c:	4618      	mov	r0, r3
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001024:	b480      	push	{r7}
 8001026:	b089      	sub	sp, #36	; 0x24
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
 8001030:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001038:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001042:	7ffb      	ldrb	r3, [r7, #31]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d003      	beq.n	8001050 <HAL_CAN_AddTxMessage+0x2c>
 8001048:	7ffb      	ldrb	r3, [r7, #31]
 800104a:	2b02      	cmp	r3, #2
 800104c:	f040 80ad 	bne.w	80011aa <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d10a      	bne.n	8001070 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001060:	2b00      	cmp	r3, #0
 8001062:	d105      	bne.n	8001070 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800106a:	2b00      	cmp	r3, #0
 800106c:	f000 8095 	beq.w	800119a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	0e1b      	lsrs	r3, r3, #24
 8001074:	f003 0303 	and.w	r3, r3, #3
 8001078:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800107a:	2201      	movs	r2, #1
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	409a      	lsls	r2, r3
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d10d      	bne.n	80010a8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001096:	68f9      	ldr	r1, [r7, #12]
 8001098:	6809      	ldr	r1, [r1, #0]
 800109a:	431a      	orrs	r2, r3
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	3318      	adds	r3, #24
 80010a0:	011b      	lsls	r3, r3, #4
 80010a2:	440b      	add	r3, r1
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	e00f      	b.n	80010c8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010b2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010b8:	68f9      	ldr	r1, [r7, #12]
 80010ba:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80010bc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	3318      	adds	r3, #24
 80010c2:	011b      	lsls	r3, r3, #4
 80010c4:	440b      	add	r3, r1
 80010c6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	6819      	ldr	r1, [r3, #0]
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	691a      	ldr	r2, [r3, #16]
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	3318      	adds	r3, #24
 80010d4:	011b      	lsls	r3, r3, #4
 80010d6:	440b      	add	r3, r1
 80010d8:	3304      	adds	r3, #4
 80010da:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	7d1b      	ldrb	r3, [r3, #20]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d111      	bne.n	8001108 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	3318      	adds	r3, #24
 80010ec:	011b      	lsls	r3, r3, #4
 80010ee:	4413      	add	r3, r2
 80010f0:	3304      	adds	r3, #4
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	68fa      	ldr	r2, [r7, #12]
 80010f6:	6811      	ldr	r1, [r2, #0]
 80010f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	3318      	adds	r3, #24
 8001100:	011b      	lsls	r3, r3, #4
 8001102:	440b      	add	r3, r1
 8001104:	3304      	adds	r3, #4
 8001106:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3307      	adds	r3, #7
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	061a      	lsls	r2, r3, #24
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3306      	adds	r3, #6
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	041b      	lsls	r3, r3, #16
 8001118:	431a      	orrs	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	3305      	adds	r3, #5
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	021b      	lsls	r3, r3, #8
 8001122:	4313      	orrs	r3, r2
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	3204      	adds	r2, #4
 8001128:	7812      	ldrb	r2, [r2, #0]
 800112a:	4610      	mov	r0, r2
 800112c:	68fa      	ldr	r2, [r7, #12]
 800112e:	6811      	ldr	r1, [r2, #0]
 8001130:	ea43 0200 	orr.w	r2, r3, r0
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	011b      	lsls	r3, r3, #4
 8001138:	440b      	add	r3, r1
 800113a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800113e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3303      	adds	r3, #3
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	061a      	lsls	r2, r3, #24
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3302      	adds	r3, #2
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	041b      	lsls	r3, r3, #16
 8001150:	431a      	orrs	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	3301      	adds	r3, #1
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	021b      	lsls	r3, r3, #8
 800115a:	4313      	orrs	r3, r2
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	7812      	ldrb	r2, [r2, #0]
 8001160:	4610      	mov	r0, r2
 8001162:	68fa      	ldr	r2, [r7, #12]
 8001164:	6811      	ldr	r1, [r2, #0]
 8001166:	ea43 0200 	orr.w	r2, r3, r0
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	011b      	lsls	r3, r3, #4
 800116e:	440b      	add	r3, r1
 8001170:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001174:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	3318      	adds	r3, #24
 800117e:	011b      	lsls	r3, r3, #4
 8001180:	4413      	add	r3, r2
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	68fa      	ldr	r2, [r7, #12]
 8001186:	6811      	ldr	r1, [r2, #0]
 8001188:	f043 0201 	orr.w	r2, r3, #1
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	3318      	adds	r3, #24
 8001190:	011b      	lsls	r3, r3, #4
 8001192:	440b      	add	r3, r1
 8001194:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001196:	2300      	movs	r3, #0
 8001198:	e00e      	b.n	80011b8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e006      	b.n	80011b8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
  }
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3724      	adds	r7, #36	; 0x24
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80011c4:	b480      	push	{r7}
 80011c6:	b087      	sub	sp, #28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
 80011d0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011d8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80011da:	7dfb      	ldrb	r3, [r7, #23]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d003      	beq.n	80011e8 <HAL_CAN_GetRxMessage+0x24>
 80011e0:	7dfb      	ldrb	r3, [r7, #23]
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	f040 80f3 	bne.w	80013ce <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d10e      	bne.n	800120c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	f003 0303 	and.w	r3, r3, #3
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d116      	bne.n	800122a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001200:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e0e7      	b.n	80013dc <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	691b      	ldr	r3, [r3, #16]
 8001212:	f003 0303 	and.w	r3, r3, #3
 8001216:	2b00      	cmp	r3, #0
 8001218:	d107      	bne.n	800122a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e0d8      	b.n	80013dc <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	331b      	adds	r3, #27
 8001232:	011b      	lsls	r3, r3, #4
 8001234:	4413      	add	r3, r2
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0204 	and.w	r2, r3, #4
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d10c      	bne.n	8001262 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	331b      	adds	r3, #27
 8001250:	011b      	lsls	r3, r3, #4
 8001252:	4413      	add	r3, r2
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	0d5b      	lsrs	r3, r3, #21
 8001258:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	e00b      	b.n	800127a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	331b      	adds	r3, #27
 800126a:	011b      	lsls	r3, r3, #4
 800126c:	4413      	add	r3, r2
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	08db      	lsrs	r3, r3, #3
 8001272:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	331b      	adds	r3, #27
 8001282:	011b      	lsls	r3, r3, #4
 8001284:	4413      	add	r3, r2
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0202 	and.w	r2, r3, #2
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	331b      	adds	r3, #27
 8001298:	011b      	lsls	r3, r3, #4
 800129a:	4413      	add	r3, r2
 800129c:	3304      	adds	r3, #4
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 020f 	and.w	r2, r3, #15
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	331b      	adds	r3, #27
 80012b0:	011b      	lsls	r3, r3, #4
 80012b2:	4413      	add	r3, r2
 80012b4:	3304      	adds	r3, #4
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	0a1b      	lsrs	r3, r3, #8
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	331b      	adds	r3, #27
 80012c8:	011b      	lsls	r3, r3, #4
 80012ca:	4413      	add	r3, r2
 80012cc:	3304      	adds	r3, #4
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	0c1b      	lsrs	r3, r3, #16
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	011b      	lsls	r3, r3, #4
 80012e0:	4413      	add	r3, r2
 80012e2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	011b      	lsls	r3, r3, #4
 80012f6:	4413      	add	r3, r2
 80012f8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	0a1a      	lsrs	r2, r3, #8
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	3301      	adds	r3, #1
 8001304:	b2d2      	uxtb	r2, r2
 8001306:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	011b      	lsls	r3, r3, #4
 8001310:	4413      	add	r3, r2
 8001312:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	0c1a      	lsrs	r2, r3, #16
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	3302      	adds	r3, #2
 800131e:	b2d2      	uxtb	r2, r2
 8001320:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	011b      	lsls	r3, r3, #4
 800132a:	4413      	add	r3, r2
 800132c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	0e1a      	lsrs	r2, r3, #24
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	3303      	adds	r3, #3
 8001338:	b2d2      	uxtb	r2, r2
 800133a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	011b      	lsls	r3, r3, #4
 8001344:	4413      	add	r3, r2
 8001346:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	3304      	adds	r3, #4
 8001350:	b2d2      	uxtb	r2, r2
 8001352:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	011b      	lsls	r3, r3, #4
 800135c:	4413      	add	r3, r2
 800135e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	0a1a      	lsrs	r2, r3, #8
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	3305      	adds	r3, #5
 800136a:	b2d2      	uxtb	r2, r2
 800136c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	011b      	lsls	r3, r3, #4
 8001376:	4413      	add	r3, r2
 8001378:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	0c1a      	lsrs	r2, r3, #16
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	3306      	adds	r3, #6
 8001384:	b2d2      	uxtb	r2, r2
 8001386:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	011b      	lsls	r3, r3, #4
 8001390:	4413      	add	r3, r2
 8001392:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	0e1a      	lsrs	r2, r3, #24
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	3307      	adds	r3, #7
 800139e:	b2d2      	uxtb	r2, r2
 80013a0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d108      	bne.n	80013ba <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	68da      	ldr	r2, [r3, #12]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f042 0220 	orr.w	r2, r2, #32
 80013b6:	60da      	str	r2, [r3, #12]
 80013b8:	e007      	b.n	80013ca <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	691a      	ldr	r2, [r3, #16]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f042 0220 	orr.w	r2, r2, #32
 80013c8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80013ca:	2300      	movs	r3, #0
 80013cc:	e006      	b.n	80013dc <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
  }
}
 80013dc:	4618      	mov	r0, r3
 80013de:	371c      	adds	r7, #28
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013f8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80013fa:	7bfb      	ldrb	r3, [r7, #15]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d002      	beq.n	8001406 <HAL_CAN_ActivateNotification+0x1e>
 8001400:	7bfb      	ldrb	r3, [r7, #15]
 8001402:	2b02      	cmp	r3, #2
 8001404:	d109      	bne.n	800141a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	6959      	ldr	r1, [r3, #20]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	683a      	ldr	r2, [r7, #0]
 8001412:	430a      	orrs	r2, r1
 8001414:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001416:	2300      	movs	r3, #0
 8001418:	e006      	b.n	8001428 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
  }
}
 8001428:	4618      	mov	r0, r3
 800142a:	3714      	adds	r7, #20
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08a      	sub	sp, #40	; 0x28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800143c:	2300      	movs	r3, #0
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	691b      	ldr	r3, [r3, #16]
 8001466:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001470:	6a3b      	ldr	r3, [r7, #32]
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	2b00      	cmp	r3, #0
 8001478:	d07c      	beq.n	8001574 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	f003 0301 	and.w	r3, r3, #1
 8001480:	2b00      	cmp	r3, #0
 8001482:	d023      	beq.n	80014cc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2201      	movs	r2, #1
 800148a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f000 f983 	bl	80017a2 <HAL_CAN_TxMailbox0CompleteCallback>
 800149c:	e016      	b.n	80014cc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	f003 0304 	and.w	r3, r3, #4
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d004      	beq.n	80014b2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80014a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
 80014b0:	e00c      	b.n	80014cc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	f003 0308 	and.w	r3, r3, #8
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d004      	beq.n	80014c6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80014bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24
 80014c4:	e002      	b.n	80014cc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f000 f989 	bl	80017de <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d024      	beq.n	8001520 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014de:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d003      	beq.n	80014f2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f000 f963 	bl	80017b6 <HAL_CAN_TxMailbox1CompleteCallback>
 80014f0:	e016      	b.n	8001520 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d004      	beq.n	8001506 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80014fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001502:	627b      	str	r3, [r7, #36]	; 0x24
 8001504:	e00c      	b.n	8001520 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800150c:	2b00      	cmp	r3, #0
 800150e:	d004      	beq.n	800151a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001512:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
 8001518:	e002      	b.n	8001520 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f000 f969 	bl	80017f2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d024      	beq.n	8001574 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001532:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f000 f943 	bl	80017ca <HAL_CAN_TxMailbox2CompleteCallback>
 8001544:	e016      	b.n	8001574 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d004      	beq.n	800155a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001552:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001556:	627b      	str	r3, [r7, #36]	; 0x24
 8001558:	e00c      	b.n	8001574 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d004      	beq.n	800156e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001566:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800156a:	627b      	str	r3, [r7, #36]	; 0x24
 800156c:	e002      	b.n	8001574 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f000 f949 	bl	8001806 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001574:	6a3b      	ldr	r3, [r7, #32]
 8001576:	f003 0308 	and.w	r3, r3, #8
 800157a:	2b00      	cmp	r3, #0
 800157c:	d00c      	beq.n	8001598 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	f003 0310 	and.w	r3, r3, #16
 8001584:	2b00      	cmp	r3, #0
 8001586:	d007      	beq.n	8001598 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800158e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2210      	movs	r2, #16
 8001596:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001598:	6a3b      	ldr	r3, [r7, #32]
 800159a:	f003 0304 	and.w	r3, r3, #4
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d00b      	beq.n	80015ba <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	f003 0308 	and.w	r3, r3, #8
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d006      	beq.n	80015ba <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2208      	movs	r2, #8
 80015b2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f000 f930 	bl	800181a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80015ba:	6a3b      	ldr	r3, [r7, #32]
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d009      	beq.n	80015d8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d002      	beq.n	80015d8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7fe ff96 	bl	8000504 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80015d8:	6a3b      	ldr	r3, [r7, #32]
 80015da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d00c      	beq.n	80015fc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	f003 0310 	and.w	r3, r3, #16
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d007      	beq.n	80015fc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80015ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015f2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2210      	movs	r2, #16
 80015fa:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80015fc:	6a3b      	ldr	r3, [r7, #32]
 80015fe:	f003 0320 	and.w	r3, r3, #32
 8001602:	2b00      	cmp	r3, #0
 8001604:	d00b      	beq.n	800161e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	f003 0308 	and.w	r3, r3, #8
 800160c:	2b00      	cmp	r3, #0
 800160e:	d006      	beq.n	800161e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2208      	movs	r2, #8
 8001616:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f000 f912 	bl	8001842 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800161e:	6a3b      	ldr	r3, [r7, #32]
 8001620:	f003 0310 	and.w	r3, r3, #16
 8001624:	2b00      	cmp	r3, #0
 8001626:	d009      	beq.n	800163c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	f003 0303 	and.w	r3, r3, #3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d002      	beq.n	800163c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f000 f8f9 	bl	800182e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800163c:	6a3b      	ldr	r3, [r7, #32]
 800163e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d00b      	beq.n	800165e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	f003 0310 	and.w	r3, r3, #16
 800164c:	2b00      	cmp	r3, #0
 800164e:	d006      	beq.n	800165e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2210      	movs	r2, #16
 8001656:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f000 f8fc 	bl	8001856 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800165e:	6a3b      	ldr	r3, [r7, #32]
 8001660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d00b      	beq.n	8001680 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	f003 0308 	and.w	r3, r3, #8
 800166e:	2b00      	cmp	r3, #0
 8001670:	d006      	beq.n	8001680 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2208      	movs	r2, #8
 8001678:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 f8f5 	bl	800186a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001680:	6a3b      	ldr	r3, [r7, #32]
 8001682:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d07b      	beq.n	8001782 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	2b00      	cmp	r3, #0
 8001692:	d072      	beq.n	800177a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001694:	6a3b      	ldr	r3, [r7, #32]
 8001696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800169a:	2b00      	cmp	r3, #0
 800169c:	d008      	beq.n	80016b0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d003      	beq.n	80016b0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80016a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016aa:	f043 0301 	orr.w	r3, r3, #1
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80016b0:	6a3b      	ldr	r3, [r7, #32]
 80016b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d008      	beq.n	80016cc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d003      	beq.n	80016cc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80016c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c6:	f043 0302 	orr.w	r3, r3, #2
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80016cc:	6a3b      	ldr	r3, [r7, #32]
 80016ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d008      	beq.n	80016e8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d003      	beq.n	80016e8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80016e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e2:	f043 0304 	orr.w	r3, r3, #4
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80016e8:	6a3b      	ldr	r3, [r7, #32]
 80016ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d043      	beq.n	800177a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d03e      	beq.n	800177a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001702:	2b60      	cmp	r3, #96	; 0x60
 8001704:	d02b      	beq.n	800175e <HAL_CAN_IRQHandler+0x32a>
 8001706:	2b60      	cmp	r3, #96	; 0x60
 8001708:	d82e      	bhi.n	8001768 <HAL_CAN_IRQHandler+0x334>
 800170a:	2b50      	cmp	r3, #80	; 0x50
 800170c:	d022      	beq.n	8001754 <HAL_CAN_IRQHandler+0x320>
 800170e:	2b50      	cmp	r3, #80	; 0x50
 8001710:	d82a      	bhi.n	8001768 <HAL_CAN_IRQHandler+0x334>
 8001712:	2b40      	cmp	r3, #64	; 0x40
 8001714:	d019      	beq.n	800174a <HAL_CAN_IRQHandler+0x316>
 8001716:	2b40      	cmp	r3, #64	; 0x40
 8001718:	d826      	bhi.n	8001768 <HAL_CAN_IRQHandler+0x334>
 800171a:	2b30      	cmp	r3, #48	; 0x30
 800171c:	d010      	beq.n	8001740 <HAL_CAN_IRQHandler+0x30c>
 800171e:	2b30      	cmp	r3, #48	; 0x30
 8001720:	d822      	bhi.n	8001768 <HAL_CAN_IRQHandler+0x334>
 8001722:	2b10      	cmp	r3, #16
 8001724:	d002      	beq.n	800172c <HAL_CAN_IRQHandler+0x2f8>
 8001726:	2b20      	cmp	r3, #32
 8001728:	d005      	beq.n	8001736 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800172a:	e01d      	b.n	8001768 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800172c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172e:	f043 0308 	orr.w	r3, r3, #8
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001734:	e019      	b.n	800176a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001738:	f043 0310 	orr.w	r3, r3, #16
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800173e:	e014      	b.n	800176a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001742:	f043 0320 	orr.w	r3, r3, #32
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001748:	e00f      	b.n	800176a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800174a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001750:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001752:	e00a      	b.n	800176a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800175a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800175c:	e005      	b.n	800176a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800175e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001766:	e000      	b.n	800176a <HAL_CAN_IRQHandler+0x336>
            break;
 8001768:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	699a      	ldr	r2, [r3, #24]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001778:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2204      	movs	r2, #4
 8001780:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001784:	2b00      	cmp	r3, #0
 8001786:	d008      	beq.n	800179a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800178c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178e:	431a      	orrs	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f000 f872 	bl	800187e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800179a:	bf00      	nop
 800179c:	3728      	adds	r7, #40	; 0x28
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80017b6:	b480      	push	{r7}
 80017b8:	b083      	sub	sp, #12
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b083      	sub	sp, #12
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80017de:	b480      	push	{r7}
 80017e0:	b083      	sub	sp, #12
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001806:	b480      	push	{r7}
 8001808:	b083      	sub	sp, #12
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800181a:	b480      	push	{r7}
 800181c:	b083      	sub	sp, #12
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800182e:	b480      	push	{r7}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001856:	b480      	push	{r7}
 8001858:	b083      	sub	sp, #12
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800186a:	b480      	push	{r7}
 800186c:	b083      	sub	sp, #12
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800187e:	b480      	push	{r7}
 8001880:	b083      	sub	sp, #12
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
	...

08001894 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018a4:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <__NVIC_SetPriorityGrouping+0x40>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018aa:	68ba      	ldr	r2, [r7, #8]
 80018ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018b0:	4013      	ands	r3, r2
 80018b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018bc:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <__NVIC_SetPriorityGrouping+0x44>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018c2:	4a04      	ldr	r2, [pc, #16]	; (80018d4 <__NVIC_SetPriorityGrouping+0x40>)
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	60d3      	str	r3, [r2, #12]
}
 80018c8:	bf00      	nop
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	e000ed00 	.word	0xe000ed00
 80018d8:	05fa0000 	.word	0x05fa0000

080018dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018e0:	4b04      	ldr	r3, [pc, #16]	; (80018f4 <__NVIC_GetPriorityGrouping+0x18>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	0a1b      	lsrs	r3, r3, #8
 80018e6:	f003 0307 	and.w	r3, r3, #7
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001906:	2b00      	cmp	r3, #0
 8001908:	db0b      	blt.n	8001922 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800190a:	79fb      	ldrb	r3, [r7, #7]
 800190c:	f003 021f 	and.w	r2, r3, #31
 8001910:	4907      	ldr	r1, [pc, #28]	; (8001930 <__NVIC_EnableIRQ+0x38>)
 8001912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001916:	095b      	lsrs	r3, r3, #5
 8001918:	2001      	movs	r0, #1
 800191a:	fa00 f202 	lsl.w	r2, r0, r2
 800191e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	e000e100 	.word	0xe000e100

08001934 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	6039      	str	r1, [r7, #0]
 800193e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001944:	2b00      	cmp	r3, #0
 8001946:	db0a      	blt.n	800195e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	b2da      	uxtb	r2, r3
 800194c:	490c      	ldr	r1, [pc, #48]	; (8001980 <__NVIC_SetPriority+0x4c>)
 800194e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001952:	0112      	lsls	r2, r2, #4
 8001954:	b2d2      	uxtb	r2, r2
 8001956:	440b      	add	r3, r1
 8001958:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800195c:	e00a      	b.n	8001974 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	b2da      	uxtb	r2, r3
 8001962:	4908      	ldr	r1, [pc, #32]	; (8001984 <__NVIC_SetPriority+0x50>)
 8001964:	79fb      	ldrb	r3, [r7, #7]
 8001966:	f003 030f 	and.w	r3, r3, #15
 800196a:	3b04      	subs	r3, #4
 800196c:	0112      	lsls	r2, r2, #4
 800196e:	b2d2      	uxtb	r2, r2
 8001970:	440b      	add	r3, r1
 8001972:	761a      	strb	r2, [r3, #24]
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	e000e100 	.word	0xe000e100
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001988:	b480      	push	{r7}
 800198a:	b089      	sub	sp, #36	; 0x24
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	f1c3 0307 	rsb	r3, r3, #7
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	bf28      	it	cs
 80019a6:	2304      	movcs	r3, #4
 80019a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	3304      	adds	r3, #4
 80019ae:	2b06      	cmp	r3, #6
 80019b0:	d902      	bls.n	80019b8 <NVIC_EncodePriority+0x30>
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	3b03      	subs	r3, #3
 80019b6:	e000      	b.n	80019ba <NVIC_EncodePriority+0x32>
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019bc:	f04f 32ff 	mov.w	r2, #4294967295
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	43da      	mvns	r2, r3
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	401a      	ands	r2, r3
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019d0:	f04f 31ff 	mov.w	r1, #4294967295
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	fa01 f303 	lsl.w	r3, r1, r3
 80019da:	43d9      	mvns	r1, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e0:	4313      	orrs	r3, r2
         );
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3724      	adds	r7, #36	; 0x24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
	...

080019f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	3b01      	subs	r3, #1
 80019fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a00:	d301      	bcc.n	8001a06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a02:	2301      	movs	r3, #1
 8001a04:	e00f      	b.n	8001a26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a06:	4a0a      	ldr	r2, [pc, #40]	; (8001a30 <SysTick_Config+0x40>)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a0e:	210f      	movs	r1, #15
 8001a10:	f04f 30ff 	mov.w	r0, #4294967295
 8001a14:	f7ff ff8e 	bl	8001934 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a18:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <SysTick_Config+0x40>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a1e:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <SysTick_Config+0x40>)
 8001a20:	2207      	movs	r2, #7
 8001a22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	e000e010 	.word	0xe000e010

08001a34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f7ff ff29 	bl	8001894 <__NVIC_SetPriorityGrouping>
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b086      	sub	sp, #24
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	4603      	mov	r3, r0
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	607a      	str	r2, [r7, #4]
 8001a56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a5c:	f7ff ff3e 	bl	80018dc <__NVIC_GetPriorityGrouping>
 8001a60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	68b9      	ldr	r1, [r7, #8]
 8001a66:	6978      	ldr	r0, [r7, #20]
 8001a68:	f7ff ff8e 	bl	8001988 <NVIC_EncodePriority>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a72:	4611      	mov	r1, r2
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff ff5d 	bl	8001934 <__NVIC_SetPriority>
}
 8001a7a:	bf00      	nop
 8001a7c:	3718      	adds	r7, #24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b082      	sub	sp, #8
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	4603      	mov	r3, r0
 8001a8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff ff31 	bl	80018f8 <__NVIC_EnableIRQ>
}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b082      	sub	sp, #8
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff ffa2 	bl	80019f0 <SysTick_Config>
 8001aac:	4603      	mov	r3, r0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
	...

08001ab8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b089      	sub	sp, #36	; 0x24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001aca:	2300      	movs	r3, #0
 8001acc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
 8001ad6:	e175      	b.n	8001dc4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ad8:	2201      	movs	r2, #1
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	f040 8164 	bne.w	8001dbe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f003 0303 	and.w	r3, r3, #3
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d005      	beq.n	8001b0e <HAL_GPIO_Init+0x56>
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d130      	bne.n	8001b70 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	2203      	movs	r2, #3
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4013      	ands	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	68da      	ldr	r2, [r3, #12]
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b44:	2201      	movs	r2, #1
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4013      	ands	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	091b      	lsrs	r3, r3, #4
 8001b5a:	f003 0201 	and.w	r2, r3, #1
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 0303 	and.w	r3, r3, #3
 8001b78:	2b03      	cmp	r3, #3
 8001b7a:	d017      	beq.n	8001bac <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	2203      	movs	r2, #3
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4013      	ands	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 0303 	and.w	r3, r3, #3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d123      	bne.n	8001c00 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	08da      	lsrs	r2, r3, #3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3208      	adds	r2, #8
 8001bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	f003 0307 	and.w	r3, r3, #7
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	220f      	movs	r2, #15
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	691a      	ldr	r2, [r3, #16]
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	08da      	lsrs	r2, r3, #3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	3208      	adds	r2, #8
 8001bfa:	69b9      	ldr	r1, [r7, #24]
 8001bfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	2203      	movs	r2, #3
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	4013      	ands	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 0203 	and.w	r2, r3, #3
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f000 80be 	beq.w	8001dbe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c42:	4b66      	ldr	r3, [pc, #408]	; (8001ddc <HAL_GPIO_Init+0x324>)
 8001c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c46:	4a65      	ldr	r2, [pc, #404]	; (8001ddc <HAL_GPIO_Init+0x324>)
 8001c48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c4e:	4b63      	ldr	r3, [pc, #396]	; (8001ddc <HAL_GPIO_Init+0x324>)
 8001c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c5a:	4a61      	ldr	r2, [pc, #388]	; (8001de0 <HAL_GPIO_Init+0x328>)
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	089b      	lsrs	r3, r3, #2
 8001c60:	3302      	adds	r3, #2
 8001c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	f003 0303 	and.w	r3, r3, #3
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	220f      	movs	r2, #15
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	43db      	mvns	r3, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a58      	ldr	r2, [pc, #352]	; (8001de4 <HAL_GPIO_Init+0x32c>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d037      	beq.n	8001cf6 <HAL_GPIO_Init+0x23e>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a57      	ldr	r2, [pc, #348]	; (8001de8 <HAL_GPIO_Init+0x330>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d031      	beq.n	8001cf2 <HAL_GPIO_Init+0x23a>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a56      	ldr	r2, [pc, #344]	; (8001dec <HAL_GPIO_Init+0x334>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d02b      	beq.n	8001cee <HAL_GPIO_Init+0x236>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a55      	ldr	r2, [pc, #340]	; (8001df0 <HAL_GPIO_Init+0x338>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d025      	beq.n	8001cea <HAL_GPIO_Init+0x232>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a54      	ldr	r2, [pc, #336]	; (8001df4 <HAL_GPIO_Init+0x33c>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d01f      	beq.n	8001ce6 <HAL_GPIO_Init+0x22e>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a53      	ldr	r2, [pc, #332]	; (8001df8 <HAL_GPIO_Init+0x340>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d019      	beq.n	8001ce2 <HAL_GPIO_Init+0x22a>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a52      	ldr	r2, [pc, #328]	; (8001dfc <HAL_GPIO_Init+0x344>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d013      	beq.n	8001cde <HAL_GPIO_Init+0x226>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a51      	ldr	r2, [pc, #324]	; (8001e00 <HAL_GPIO_Init+0x348>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d00d      	beq.n	8001cda <HAL_GPIO_Init+0x222>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a50      	ldr	r2, [pc, #320]	; (8001e04 <HAL_GPIO_Init+0x34c>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d007      	beq.n	8001cd6 <HAL_GPIO_Init+0x21e>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a4f      	ldr	r2, [pc, #316]	; (8001e08 <HAL_GPIO_Init+0x350>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d101      	bne.n	8001cd2 <HAL_GPIO_Init+0x21a>
 8001cce:	2309      	movs	r3, #9
 8001cd0:	e012      	b.n	8001cf8 <HAL_GPIO_Init+0x240>
 8001cd2:	230a      	movs	r3, #10
 8001cd4:	e010      	b.n	8001cf8 <HAL_GPIO_Init+0x240>
 8001cd6:	2308      	movs	r3, #8
 8001cd8:	e00e      	b.n	8001cf8 <HAL_GPIO_Init+0x240>
 8001cda:	2307      	movs	r3, #7
 8001cdc:	e00c      	b.n	8001cf8 <HAL_GPIO_Init+0x240>
 8001cde:	2306      	movs	r3, #6
 8001ce0:	e00a      	b.n	8001cf8 <HAL_GPIO_Init+0x240>
 8001ce2:	2305      	movs	r3, #5
 8001ce4:	e008      	b.n	8001cf8 <HAL_GPIO_Init+0x240>
 8001ce6:	2304      	movs	r3, #4
 8001ce8:	e006      	b.n	8001cf8 <HAL_GPIO_Init+0x240>
 8001cea:	2303      	movs	r3, #3
 8001cec:	e004      	b.n	8001cf8 <HAL_GPIO_Init+0x240>
 8001cee:	2302      	movs	r3, #2
 8001cf0:	e002      	b.n	8001cf8 <HAL_GPIO_Init+0x240>
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e000      	b.n	8001cf8 <HAL_GPIO_Init+0x240>
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	69fa      	ldr	r2, [r7, #28]
 8001cfa:	f002 0203 	and.w	r2, r2, #3
 8001cfe:	0092      	lsls	r2, r2, #2
 8001d00:	4093      	lsls	r3, r2
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d08:	4935      	ldr	r1, [pc, #212]	; (8001de0 <HAL_GPIO_Init+0x328>)
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	089b      	lsrs	r3, r3, #2
 8001d0e:	3302      	adds	r3, #2
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d16:	4b3d      	ldr	r3, [pc, #244]	; (8001e0c <HAL_GPIO_Init+0x354>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4013      	ands	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d3a:	4a34      	ldr	r2, [pc, #208]	; (8001e0c <HAL_GPIO_Init+0x354>)
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d40:	4b32      	ldr	r3, [pc, #200]	; (8001e0c <HAL_GPIO_Init+0x354>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d003      	beq.n	8001d64 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d64:	4a29      	ldr	r2, [pc, #164]	; (8001e0c <HAL_GPIO_Init+0x354>)
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d6a:	4b28      	ldr	r3, [pc, #160]	; (8001e0c <HAL_GPIO_Init+0x354>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	43db      	mvns	r3, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4013      	ands	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d8e:	4a1f      	ldr	r2, [pc, #124]	; (8001e0c <HAL_GPIO_Init+0x354>)
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d94:	4b1d      	ldr	r3, [pc, #116]	; (8001e0c <HAL_GPIO_Init+0x354>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d003      	beq.n	8001db8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001db8:	4a14      	ldr	r2, [pc, #80]	; (8001e0c <HAL_GPIO_Init+0x354>)
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	61fb      	str	r3, [r7, #28]
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	2b0f      	cmp	r3, #15
 8001dc8:	f67f ae86 	bls.w	8001ad8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001dcc:	bf00      	nop
 8001dce:	bf00      	nop
 8001dd0:	3724      	adds	r7, #36	; 0x24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40013800 	.word	0x40013800
 8001de4:	40020000 	.word	0x40020000
 8001de8:	40020400 	.word	0x40020400
 8001dec:	40020800 	.word	0x40020800
 8001df0:	40020c00 	.word	0x40020c00
 8001df4:	40021000 	.word	0x40021000
 8001df8:	40021400 	.word	0x40021400
 8001dfc:	40021800 	.word	0x40021800
 8001e00:	40021c00 	.word	0x40021c00
 8001e04:	40022000 	.word	0x40022000
 8001e08:	40022400 	.word	0x40022400
 8001e0c:	40013c00 	.word	0x40013c00

08001e10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	807b      	strh	r3, [r7, #2]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e20:	787b      	ldrb	r3, [r7, #1]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e26:	887a      	ldrh	r2, [r7, #2]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001e2c:	e003      	b.n	8001e36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001e2e:	887b      	ldrh	r3, [r7, #2]
 8001e30:	041a      	lsls	r2, r3, #16
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	619a      	str	r2, [r3, #24]
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b085      	sub	sp, #20
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e54:	887a      	ldrh	r2, [r7, #2]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	041a      	lsls	r2, r3, #16
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	43d9      	mvns	r1, r3
 8001e60:	887b      	ldrh	r3, [r7, #2]
 8001e62:	400b      	ands	r3, r1
 8001e64:	431a      	orrs	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	619a      	str	r2, [r3, #24]
}
 8001e6a:	bf00      	nop
 8001e6c:	3714      	adds	r7, #20
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e78:	b08f      	sub	sp, #60	; 0x3c
 8001e7a:	af0a      	add	r7, sp, #40	; 0x28
 8001e7c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d101      	bne.n	8001e88 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e116      	b.n	80020b6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d106      	bne.n	8001ea8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f006 f91a 	bl	80080dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2203      	movs	r2, #3
 8001eac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d102      	bne.n	8001ec2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f002 fc29 	bl	800471e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	603b      	str	r3, [r7, #0]
 8001ed2:	687e      	ldr	r6, [r7, #4]
 8001ed4:	466d      	mov	r5, sp
 8001ed6:	f106 0410 	add.w	r4, r6, #16
 8001eda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001edc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ede:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ee0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ee2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ee6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001eea:	1d33      	adds	r3, r6, #4
 8001eec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eee:	6838      	ldr	r0, [r7, #0]
 8001ef0:	f002 fb0a 	bl	8004508 <USB_CoreInit>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d005      	beq.n	8001f06 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2202      	movs	r2, #2
 8001efe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e0d7      	b.n	80020b6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f002 fc17 	bl	8004740 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f12:	2300      	movs	r3, #0
 8001f14:	73fb      	strb	r3, [r7, #15]
 8001f16:	e04a      	b.n	8001fae <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f18:	7bfa      	ldrb	r2, [r7, #15]
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	4413      	add	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	440b      	add	r3, r1
 8001f26:	333d      	adds	r3, #61	; 0x3d
 8001f28:	2201      	movs	r2, #1
 8001f2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f2c:	7bfa      	ldrb	r2, [r7, #15]
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	4613      	mov	r3, r2
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	4413      	add	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	440b      	add	r3, r1
 8001f3a:	333c      	adds	r3, #60	; 0x3c
 8001f3c:	7bfa      	ldrb	r2, [r7, #15]
 8001f3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f40:	7bfa      	ldrb	r2, [r7, #15]
 8001f42:	7bfb      	ldrb	r3, [r7, #15]
 8001f44:	b298      	uxth	r0, r3
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	440b      	add	r3, r1
 8001f52:	3344      	adds	r3, #68	; 0x44
 8001f54:	4602      	mov	r2, r0
 8001f56:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f58:	7bfa      	ldrb	r2, [r7, #15]
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	4413      	add	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	440b      	add	r3, r1
 8001f66:	3340      	adds	r3, #64	; 0x40
 8001f68:	2200      	movs	r2, #0
 8001f6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f6c:	7bfa      	ldrb	r2, [r7, #15]
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	4613      	mov	r3, r2
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	4413      	add	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	440b      	add	r3, r1
 8001f7a:	3348      	adds	r3, #72	; 0x48
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f80:	7bfa      	ldrb	r2, [r7, #15]
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	4613      	mov	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	4413      	add	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	334c      	adds	r3, #76	; 0x4c
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f94:	7bfa      	ldrb	r2, [r7, #15]
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	3354      	adds	r3, #84	; 0x54
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
 8001faa:	3301      	adds	r3, #1
 8001fac:	73fb      	strb	r3, [r7, #15]
 8001fae:	7bfa      	ldrb	r2, [r7, #15]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d3af      	bcc.n	8001f18 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fb8:	2300      	movs	r3, #0
 8001fba:	73fb      	strb	r3, [r7, #15]
 8001fbc:	e044      	b.n	8002048 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001fbe:	7bfa      	ldrb	r2, [r7, #15]
 8001fc0:	6879      	ldr	r1, [r7, #4]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	4413      	add	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	440b      	add	r3, r1
 8001fcc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001fd4:	7bfa      	ldrb	r2, [r7, #15]
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	4413      	add	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001fe6:	7bfa      	ldrb	r2, [r7, #15]
 8001fe8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001fea:	7bfa      	ldrb	r2, [r7, #15]
 8001fec:	6879      	ldr	r1, [r7, #4]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	4413      	add	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002000:	7bfa      	ldrb	r2, [r7, #15]
 8002002:	6879      	ldr	r1, [r7, #4]
 8002004:	4613      	mov	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	4413      	add	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002016:	7bfa      	ldrb	r2, [r7, #15]
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	4613      	mov	r3, r2
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	4413      	add	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	440b      	add	r3, r1
 8002024:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800202c:	7bfa      	ldrb	r2, [r7, #15]
 800202e:	6879      	ldr	r1, [r7, #4]
 8002030:	4613      	mov	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	4413      	add	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	440b      	add	r3, r1
 800203a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002042:	7bfb      	ldrb	r3, [r7, #15]
 8002044:	3301      	adds	r3, #1
 8002046:	73fb      	strb	r3, [r7, #15]
 8002048:	7bfa      	ldrb	r2, [r7, #15]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	429a      	cmp	r2, r3
 8002050:	d3b5      	bcc.n	8001fbe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	603b      	str	r3, [r7, #0]
 8002058:	687e      	ldr	r6, [r7, #4]
 800205a:	466d      	mov	r5, sp
 800205c:	f106 0410 	add.w	r4, r6, #16
 8002060:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002062:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002064:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002066:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002068:	e894 0003 	ldmia.w	r4, {r0, r1}
 800206c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002070:	1d33      	adds	r3, r6, #4
 8002072:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002074:	6838      	ldr	r0, [r7, #0]
 8002076:	f002 fbaf 	bl	80047d8 <USB_DevInit>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d005      	beq.n	800208c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2202      	movs	r2, #2
 8002084:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e014      	b.n	80020b6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d102      	bne.n	80020aa <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f001 f97b 	bl	80033a0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f003 fcfd 	bl	8005aae <USB_DevDisconnect>

  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020be <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b082      	sub	sp, #8
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d101      	bne.n	80020d4 <HAL_PCD_Start+0x16>
 80020d0:	2302      	movs	r3, #2
 80020d2:	e012      	b.n	80020fa <HAL_PCD_Start+0x3c>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f002 fb0b 	bl	80046fc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f003 fcbe 	bl	8005a6c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002102:	b590      	push	{r4, r7, lr}
 8002104:	b08d      	sub	sp, #52	; 0x34
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002110:	6a3b      	ldr	r3, [r7, #32]
 8002112:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f003 fd7c 	bl	8005c16 <USB_GetMode>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	f040 84b7 	bne.w	8002a94 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f003 fce0 	bl	8005af0 <USB_ReadInterrupts>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 84ad 	beq.w	8002a92 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	0a1b      	lsrs	r3, r3, #8
 8002142:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4618      	mov	r0, r3
 8002152:	f003 fccd 	bl	8005af0 <USB_ReadInterrupts>
 8002156:	4603      	mov	r3, r0
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b02      	cmp	r3, #2
 800215e:	d107      	bne.n	8002170 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	695a      	ldr	r2, [r3, #20]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f002 0202 	and.w	r2, r2, #2
 800216e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4618      	mov	r0, r3
 8002176:	f003 fcbb 	bl	8005af0 <USB_ReadInterrupts>
 800217a:	4603      	mov	r3, r0
 800217c:	f003 0310 	and.w	r3, r3, #16
 8002180:	2b10      	cmp	r3, #16
 8002182:	d161      	bne.n	8002248 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	699a      	ldr	r2, [r3, #24]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 0210 	bic.w	r2, r2, #16
 8002192:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002194:	6a3b      	ldr	r3, [r7, #32]
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	f003 020f 	and.w	r2, r3, #15
 80021a0:	4613      	mov	r3, r2
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	4413      	add	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	4413      	add	r3, r2
 80021b0:	3304      	adds	r3, #4
 80021b2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	0c5b      	lsrs	r3, r3, #17
 80021b8:	f003 030f 	and.w	r3, r3, #15
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d124      	bne.n	800220a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80021c6:	4013      	ands	r3, r2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d035      	beq.n	8002238 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	091b      	lsrs	r3, r3, #4
 80021d4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80021d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021da:	b29b      	uxth	r3, r3
 80021dc:	461a      	mov	r2, r3
 80021de:	6a38      	ldr	r0, [r7, #32]
 80021e0:	f003 faf2 	bl	80057c8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	691a      	ldr	r2, [r3, #16]
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	091b      	lsrs	r3, r3, #4
 80021ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021f0:	441a      	add	r2, r3
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	6a1a      	ldr	r2, [r3, #32]
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	091b      	lsrs	r3, r3, #4
 80021fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002202:	441a      	add	r2, r3
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	621a      	str	r2, [r3, #32]
 8002208:	e016      	b.n	8002238 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	0c5b      	lsrs	r3, r3, #17
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	2b06      	cmp	r3, #6
 8002214:	d110      	bne.n	8002238 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800221c:	2208      	movs	r2, #8
 800221e:	4619      	mov	r1, r3
 8002220:	6a38      	ldr	r0, [r7, #32]
 8002222:	f003 fad1 	bl	80057c8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	6a1a      	ldr	r2, [r3, #32]
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	091b      	lsrs	r3, r3, #4
 800222e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002232:	441a      	add	r2, r3
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	699a      	ldr	r2, [r3, #24]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f042 0210 	orr.w	r2, r2, #16
 8002246:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	f003 fc4f 	bl	8005af0 <USB_ReadInterrupts>
 8002252:	4603      	mov	r3, r0
 8002254:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002258:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800225c:	f040 80a7 	bne.w	80023ae <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002260:	2300      	movs	r3, #0
 8002262:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	f003 fc54 	bl	8005b16 <USB_ReadDevAllOutEpInterrupt>
 800226e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002270:	e099      	b.n	80023a6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 808e 	beq.w	800239a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002284:	b2d2      	uxtb	r2, r2
 8002286:	4611      	mov	r1, r2
 8002288:	4618      	mov	r0, r3
 800228a:	f003 fc78 	bl	8005b7e <USB_ReadDevOutEPInterrupt>
 800228e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00c      	beq.n	80022b4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229c:	015a      	lsls	r2, r3, #5
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	4413      	add	r3, r2
 80022a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022a6:	461a      	mov	r2, r3
 80022a8:	2301      	movs	r3, #1
 80022aa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80022ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 fef0 	bl	8003094 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	f003 0308 	and.w	r3, r3, #8
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00c      	beq.n	80022d8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80022be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c0:	015a      	lsls	r2, r3, #5
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	4413      	add	r3, r2
 80022c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ca:	461a      	mov	r2, r3
 80022cc:	2308      	movs	r3, #8
 80022ce:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80022d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 ffc6 	bl	8003264 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	f003 0310 	and.w	r3, r3, #16
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d008      	beq.n	80022f4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	015a      	lsls	r2, r3, #5
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	4413      	add	r3, r2
 80022ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ee:	461a      	mov	r2, r3
 80022f0:	2310      	movs	r3, #16
 80022f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d030      	beq.n	8002360 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80022fe:	6a3b      	ldr	r3, [r7, #32]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002306:	2b80      	cmp	r3, #128	; 0x80
 8002308:	d109      	bne.n	800231e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	69fa      	ldr	r2, [r7, #28]
 8002314:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002318:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800231c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800231e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002320:	4613      	mov	r3, r2
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	4413      	add	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	4413      	add	r3, r2
 8002330:	3304      	adds	r3, #4
 8002332:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	78db      	ldrb	r3, [r3, #3]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d108      	bne.n	800234e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	2200      	movs	r2, #0
 8002340:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	b2db      	uxtb	r3, r3
 8002346:	4619      	mov	r1, r3
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f005 ffe1 	bl	8008310 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	015a      	lsls	r2, r3, #5
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	4413      	add	r3, r2
 8002356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800235a:	461a      	mov	r2, r3
 800235c:	2302      	movs	r3, #2
 800235e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	f003 0320 	and.w	r3, r3, #32
 8002366:	2b00      	cmp	r3, #0
 8002368:	d008      	beq.n	800237c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	015a      	lsls	r2, r3, #5
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	4413      	add	r3, r2
 8002372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002376:	461a      	mov	r2, r3
 8002378:	2320      	movs	r3, #32
 800237a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d009      	beq.n	800239a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	015a      	lsls	r2, r3, #5
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	4413      	add	r3, r2
 800238e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002392:	461a      	mov	r2, r3
 8002394:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002398:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	3301      	adds	r3, #1
 800239e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80023a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a2:	085b      	lsrs	r3, r3, #1
 80023a4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80023a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f47f af62 	bne.w	8002272 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f003 fb9c 	bl	8005af0 <USB_ReadInterrupts>
 80023b8:	4603      	mov	r3, r0
 80023ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80023c2:	f040 80db 	bne.w	800257c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f003 fbbd 	bl	8005b4a <USB_ReadDevAllInEpInterrupt>
 80023d0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80023d2:	2300      	movs	r3, #0
 80023d4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80023d6:	e0cd      	b.n	8002574 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80023d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f000 80c2 	beq.w	8002568 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	4611      	mov	r1, r2
 80023ee:	4618      	mov	r0, r3
 80023f0:	f003 fbe3 	bl	8005bba <USB_ReadDevInEPInterrupt>
 80023f4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d057      	beq.n	80024b0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	2201      	movs	r2, #1
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002414:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	43db      	mvns	r3, r3
 800241a:	69f9      	ldr	r1, [r7, #28]
 800241c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002420:	4013      	ands	r3, r2
 8002422:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	015a      	lsls	r2, r3, #5
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	4413      	add	r3, r2
 800242c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002430:	461a      	mov	r2, r3
 8002432:	2301      	movs	r3, #1
 8002434:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d132      	bne.n	80024a4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002442:	4613      	mov	r3, r2
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	4413      	add	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	440b      	add	r3, r1
 800244c:	334c      	adds	r3, #76	; 0x4c
 800244e:	6819      	ldr	r1, [r3, #0]
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002454:	4613      	mov	r3, r2
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	4413      	add	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4403      	add	r3, r0
 800245e:	3348      	adds	r3, #72	; 0x48
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4419      	add	r1, r3
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002468:	4613      	mov	r3, r2
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	4413      	add	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4403      	add	r3, r0
 8002472:	334c      	adds	r3, #76	; 0x4c
 8002474:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	2b00      	cmp	r3, #0
 800247a:	d113      	bne.n	80024a4 <HAL_PCD_IRQHandler+0x3a2>
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002480:	4613      	mov	r3, r2
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	4413      	add	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	440b      	add	r3, r1
 800248a:	3354      	adds	r3, #84	; 0x54
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d108      	bne.n	80024a4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6818      	ldr	r0, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800249c:	461a      	mov	r2, r3
 800249e:	2101      	movs	r1, #1
 80024a0:	f003 fbec 	bl	8005c7c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80024a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	4619      	mov	r1, r3
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f005 feab 	bl	8008206 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	f003 0308 	and.w	r3, r3, #8
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d008      	beq.n	80024cc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	015a      	lsls	r2, r3, #5
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	4413      	add	r3, r2
 80024c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024c6:	461a      	mov	r2, r3
 80024c8:	2308      	movs	r3, #8
 80024ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	f003 0310 	and.w	r3, r3, #16
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d008      	beq.n	80024e8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	015a      	lsls	r2, r3, #5
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	4413      	add	r3, r2
 80024de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024e2:	461a      	mov	r2, r3
 80024e4:	2310      	movs	r3, #16
 80024e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d008      	beq.n	8002504 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	015a      	lsls	r2, r3, #5
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	4413      	add	r3, r2
 80024fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024fe:	461a      	mov	r2, r3
 8002500:	2340      	movs	r3, #64	; 0x40
 8002502:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d023      	beq.n	8002556 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800250e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002510:	6a38      	ldr	r0, [r7, #32]
 8002512:	f002 fabf 	bl	8004a94 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002518:	4613      	mov	r3, r2
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	4413      	add	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	3338      	adds	r3, #56	; 0x38
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	4413      	add	r3, r2
 8002526:	3304      	adds	r3, #4
 8002528:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	78db      	ldrb	r3, [r3, #3]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d108      	bne.n	8002544 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	2200      	movs	r2, #0
 8002536:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	b2db      	uxtb	r3, r3
 800253c:	4619      	mov	r1, r3
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f005 fef8 	bl	8008334 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	015a      	lsls	r2, r3, #5
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	4413      	add	r3, r2
 800254c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002550:	461a      	mov	r2, r3
 8002552:	2302      	movs	r3, #2
 8002554:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800255c:	2b00      	cmp	r3, #0
 800255e:	d003      	beq.n	8002568 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002560:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 fd08 	bl	8002f78 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	3301      	adds	r3, #1
 800256c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800256e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002570:	085b      	lsrs	r3, r3, #1
 8002572:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002576:	2b00      	cmp	r3, #0
 8002578:	f47f af2e 	bne.w	80023d8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f003 fab5 	bl	8005af0 <USB_ReadInterrupts>
 8002586:	4603      	mov	r3, r0
 8002588:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800258c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002590:	d122      	bne.n	80025d8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	69fa      	ldr	r2, [r7, #28]
 800259c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025a0:	f023 0301 	bic.w	r3, r3, #1
 80025a4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d108      	bne.n	80025c2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80025b8:	2100      	movs	r1, #0
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f006 f878 	bl	80086b0 <HAL_PCDEx_LPM_Callback>
 80025c0:	e002      	b.n	80025c8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f005 fe96 	bl	80082f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	695a      	ldr	r2, [r3, #20]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80025d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	f003 fa87 	bl	8005af0 <USB_ReadInterrupts>
 80025e2:	4603      	mov	r3, r0
 80025e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025ec:	d112      	bne.n	8002614 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d102      	bne.n	8002604 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f005 fe52 	bl	80082a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	695a      	ldr	r2, [r3, #20]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002612:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f003 fa69 	bl	8005af0 <USB_ReadInterrupts>
 800261e:	4603      	mov	r3, r0
 8002620:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002624:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002628:	d121      	bne.n	800266e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	695a      	ldr	r2, [r3, #20]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002638:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002640:	2b00      	cmp	r3, #0
 8002642:	d111      	bne.n	8002668 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002652:	089b      	lsrs	r3, r3, #2
 8002654:	f003 020f 	and.w	r2, r3, #15
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800265e:	2101      	movs	r1, #1
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f006 f825 	bl	80086b0 <HAL_PCDEx_LPM_Callback>
 8002666:	e002      	b.n	800266e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f005 fe1d 	bl	80082a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4618      	mov	r0, r3
 8002674:	f003 fa3c 	bl	8005af0 <USB_ReadInterrupts>
 8002678:	4603      	mov	r3, r0
 800267a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800267e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002682:	f040 80b7 	bne.w	80027f4 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	69fa      	ldr	r2, [r7, #28]
 8002690:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002694:	f023 0301 	bic.w	r3, r3, #1
 8002698:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2110      	movs	r1, #16
 80026a0:	4618      	mov	r0, r3
 80026a2:	f002 f9f7 	bl	8004a94 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026a6:	2300      	movs	r3, #0
 80026a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026aa:	e046      	b.n	800273a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80026ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ae:	015a      	lsls	r2, r3, #5
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	4413      	add	r3, r2
 80026b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026b8:	461a      	mov	r2, r3
 80026ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80026be:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80026c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c2:	015a      	lsls	r2, r3, #5
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	4413      	add	r3, r2
 80026c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026d0:	0151      	lsls	r1, r2, #5
 80026d2:	69fa      	ldr	r2, [r7, #28]
 80026d4:	440a      	add	r2, r1
 80026d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80026da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80026de:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80026e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e2:	015a      	lsls	r2, r3, #5
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	4413      	add	r3, r2
 80026e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026ec:	461a      	mov	r2, r3
 80026ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80026f2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80026f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f6:	015a      	lsls	r2, r3, #5
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	4413      	add	r3, r2
 80026fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002704:	0151      	lsls	r1, r2, #5
 8002706:	69fa      	ldr	r2, [r7, #28]
 8002708:	440a      	add	r2, r1
 800270a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800270e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002712:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002716:	015a      	lsls	r2, r3, #5
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	4413      	add	r3, r2
 800271c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002724:	0151      	lsls	r1, r2, #5
 8002726:	69fa      	ldr	r2, [r7, #28]
 8002728:	440a      	add	r2, r1
 800272a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800272e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002732:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002736:	3301      	adds	r3, #1
 8002738:	62fb      	str	r3, [r7, #44]	; 0x2c
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002740:	429a      	cmp	r2, r3
 8002742:	d3b3      	bcc.n	80026ac <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800274a:	69db      	ldr	r3, [r3, #28]
 800274c:	69fa      	ldr	r2, [r7, #28]
 800274e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002752:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002756:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275c:	2b00      	cmp	r3, #0
 800275e:	d016      	beq.n	800278e <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002766:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800276a:	69fa      	ldr	r2, [r7, #28]
 800276c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002770:	f043 030b 	orr.w	r3, r3, #11
 8002774:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800277e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002780:	69fa      	ldr	r2, [r7, #28]
 8002782:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002786:	f043 030b 	orr.w	r3, r3, #11
 800278a:	6453      	str	r3, [r2, #68]	; 0x44
 800278c:	e015      	b.n	80027ba <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002794:	695a      	ldr	r2, [r3, #20]
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800279c:	4619      	mov	r1, r3
 800279e:	f242 032b 	movw	r3, #8235	; 0x202b
 80027a2:	4313      	orrs	r3, r2
 80027a4:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	69fa      	ldr	r2, [r7, #28]
 80027b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027b4:	f043 030b 	orr.w	r3, r3, #11
 80027b8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	69fa      	ldr	r2, [r7, #28]
 80027c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027c8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80027cc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6818      	ldr	r0, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80027de:	461a      	mov	r2, r3
 80027e0:	f003 fa4c 	bl	8005c7c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	695a      	ldr	r2, [r3, #20]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80027f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f003 f979 	bl	8005af0 <USB_ReadInterrupts>
 80027fe:	4603      	mov	r3, r0
 8002800:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002804:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002808:	d124      	bne.n	8002854 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f003 fa10 	bl	8005c34 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4618      	mov	r0, r3
 800281a:	f002 f9b8 	bl	8004b8e <USB_GetDevSpeed>
 800281e:	4603      	mov	r3, r0
 8002820:	461a      	mov	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681c      	ldr	r4, [r3, #0]
 800282a:	f001 fa71 	bl	8003d10 <HAL_RCC_GetHCLKFreq>
 800282e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002834:	b2db      	uxtb	r3, r3
 8002836:	461a      	mov	r2, r3
 8002838:	4620      	mov	r0, r4
 800283a:	f001 febd 	bl	80045b8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f005 fd09 	bl	8008256 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	695a      	ldr	r2, [r3, #20]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002852:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f003 f949 	bl	8005af0 <USB_ReadInterrupts>
 800285e:	4603      	mov	r3, r0
 8002860:	f003 0308 	and.w	r3, r3, #8
 8002864:	2b08      	cmp	r3, #8
 8002866:	d10a      	bne.n	800287e <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f005 fce6 	bl	800823a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	695a      	ldr	r2, [r3, #20]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f002 0208 	and.w	r2, r2, #8
 800287c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f003 f934 	bl	8005af0 <USB_ReadInterrupts>
 8002888:	4603      	mov	r3, r0
 800288a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800288e:	2b80      	cmp	r3, #128	; 0x80
 8002890:	d122      	bne.n	80028d8 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002892:	6a3b      	ldr	r3, [r7, #32]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800289a:	6a3b      	ldr	r3, [r7, #32]
 800289c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800289e:	2301      	movs	r3, #1
 80028a0:	627b      	str	r3, [r7, #36]	; 0x24
 80028a2:	e014      	b.n	80028ce <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80028a4:	6879      	ldr	r1, [r7, #4]
 80028a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a8:	4613      	mov	r3, r2
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	4413      	add	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	440b      	add	r3, r1
 80028b2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d105      	bne.n	80028c8 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	4619      	mov	r1, r3
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f000 fb27 	bl	8002f16 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	3301      	adds	r3, #1
 80028cc:	627b      	str	r3, [r7, #36]	; 0x24
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d3e5      	bcc.n	80028a4 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4618      	mov	r0, r3
 80028de:	f003 f907 	bl	8005af0 <USB_ReadInterrupts>
 80028e2:	4603      	mov	r3, r0
 80028e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028ec:	d13b      	bne.n	8002966 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028ee:	2301      	movs	r3, #1
 80028f0:	627b      	str	r3, [r7, #36]	; 0x24
 80028f2:	e02b      	b.n	800294c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	015a      	lsls	r2, r3, #5
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	4413      	add	r3, r2
 80028fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002904:	6879      	ldr	r1, [r7, #4]
 8002906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002908:	4613      	mov	r3, r2
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	4413      	add	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	3340      	adds	r3, #64	; 0x40
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d115      	bne.n	8002946 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800291a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800291c:	2b00      	cmp	r3, #0
 800291e:	da12      	bge.n	8002946 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002924:	4613      	mov	r3, r2
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	4413      	add	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	440b      	add	r3, r1
 800292e:	333f      	adds	r3, #63	; 0x3f
 8002930:	2201      	movs	r2, #1
 8002932:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	b2db      	uxtb	r3, r3
 8002938:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800293c:	b2db      	uxtb	r3, r3
 800293e:	4619      	mov	r1, r3
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 fae8 	bl	8002f16 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002948:	3301      	adds	r3, #1
 800294a:	627b      	str	r3, [r7, #36]	; 0x24
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002952:	429a      	cmp	r2, r3
 8002954:	d3ce      	bcc.n	80028f4 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	695a      	ldr	r2, [r3, #20]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002964:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f003 f8c0 	bl	8005af0 <USB_ReadInterrupts>
 8002970:	4603      	mov	r3, r0
 8002972:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002976:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800297a:	d155      	bne.n	8002a28 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800297c:	2301      	movs	r3, #1
 800297e:	627b      	str	r3, [r7, #36]	; 0x24
 8002980:	e045      	b.n	8002a0e <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	015a      	lsls	r2, r3, #5
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	4413      	add	r3, r2
 800298a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002996:	4613      	mov	r3, r2
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	4413      	add	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	440b      	add	r3, r1
 80029a0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d12e      	bne.n	8002a08 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80029aa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	da2b      	bge.n	8002a08 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80029bc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d121      	bne.n	8002a08 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c8:	4613      	mov	r3, r2
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	4413      	add	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80029d6:	2201      	movs	r2, #1
 80029d8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80029da:	6a3b      	ldr	r3, [r7, #32]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80029e2:	6a3b      	ldr	r3, [r7, #32]
 80029e4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80029e6:	6a3b      	ldr	r3, [r7, #32]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10a      	bne.n	8002a08 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	69fa      	ldr	r2, [r7, #28]
 80029fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a04:	6053      	str	r3, [r2, #4]
            break;
 8002a06:	e007      	b.n	8002a18 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d3b4      	bcc.n	8002982 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	695a      	ldr	r2, [r3, #20]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002a26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f003 f85f 	bl	8005af0 <USB_ReadInterrupts>
 8002a32:	4603      	mov	r3, r0
 8002a34:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a3c:	d10a      	bne.n	8002a54 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f005 fc8a 	bl	8008358 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	695a      	ldr	r2, [r3, #20]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002a52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f003 f849 	bl	8005af0 <USB_ReadInterrupts>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b04      	cmp	r3, #4
 8002a66:	d115      	bne.n	8002a94 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	f003 0304 	and.w	r3, r3, #4
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d002      	beq.n	8002a80 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f005 fc7a 	bl	8008374 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6859      	ldr	r1, [r3, #4]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	605a      	str	r2, [r3, #4]
 8002a90:	e000      	b.n	8002a94 <HAL_PCD_IRQHandler+0x992>
      return;
 8002a92:	bf00      	nop
    }
  }
}
 8002a94:	3734      	adds	r7, #52	; 0x34
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd90      	pop	{r4, r7, pc}

08002a9a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b082      	sub	sp, #8
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d101      	bne.n	8002ab4 <HAL_PCD_SetAddress+0x1a>
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	e013      	b.n	8002adc <HAL_PCD_SetAddress+0x42>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	78fa      	ldrb	r2, [r7, #3]
 8002ac0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	78fa      	ldrb	r2, [r7, #3]
 8002aca:	4611      	mov	r1, r2
 8002acc:	4618      	mov	r0, r3
 8002ace:	f002 ffa7 	bl	8005a20 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	4608      	mov	r0, r1
 8002aee:	4611      	mov	r1, r2
 8002af0:	461a      	mov	r2, r3
 8002af2:	4603      	mov	r3, r0
 8002af4:	70fb      	strb	r3, [r7, #3]
 8002af6:	460b      	mov	r3, r1
 8002af8:	803b      	strh	r3, [r7, #0]
 8002afa:	4613      	mov	r3, r2
 8002afc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002afe:	2300      	movs	r3, #0
 8002b00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	da0f      	bge.n	8002b2a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b0a:	78fb      	ldrb	r3, [r7, #3]
 8002b0c:	f003 020f 	and.w	r2, r3, #15
 8002b10:	4613      	mov	r3, r2
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	4413      	add	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	3338      	adds	r3, #56	; 0x38
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	3304      	adds	r3, #4
 8002b20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2201      	movs	r2, #1
 8002b26:	705a      	strb	r2, [r3, #1]
 8002b28:	e00f      	b.n	8002b4a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b2a:	78fb      	ldrb	r3, [r7, #3]
 8002b2c:	f003 020f 	and.w	r2, r3, #15
 8002b30:	4613      	mov	r3, r2
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	4413      	add	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	4413      	add	r3, r2
 8002b40:	3304      	adds	r3, #4
 8002b42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002b4a:	78fb      	ldrb	r3, [r7, #3]
 8002b4c:	f003 030f 	and.w	r3, r3, #15
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002b56:	883a      	ldrh	r2, [r7, #0]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	78ba      	ldrb	r2, [r7, #2]
 8002b60:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	785b      	ldrb	r3, [r3, #1]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d004      	beq.n	8002b74 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002b74:	78bb      	ldrb	r3, [r7, #2]
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d102      	bne.n	8002b80 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d101      	bne.n	8002b8e <HAL_PCD_EP_Open+0xaa>
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	e00e      	b.n	8002bac <HAL_PCD_EP_Open+0xc8>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68f9      	ldr	r1, [r7, #12]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f002 f81b 	bl	8004bd8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002baa:	7afb      	ldrb	r3, [r7, #11]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002bc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	da0f      	bge.n	8002be8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bc8:	78fb      	ldrb	r3, [r7, #3]
 8002bca:	f003 020f 	and.w	r2, r3, #15
 8002bce:	4613      	mov	r3, r2
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	3338      	adds	r3, #56	; 0x38
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	4413      	add	r3, r2
 8002bdc:	3304      	adds	r3, #4
 8002bde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2201      	movs	r2, #1
 8002be4:	705a      	strb	r2, [r3, #1]
 8002be6:	e00f      	b.n	8002c08 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002be8:	78fb      	ldrb	r3, [r7, #3]
 8002bea:	f003 020f 	and.w	r2, r3, #15
 8002bee:	4613      	mov	r3, r2
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	4413      	add	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	3304      	adds	r3, #4
 8002c00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002c08:	78fb      	ldrb	r3, [r7, #3]
 8002c0a:	f003 030f 	and.w	r3, r3, #15
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d101      	bne.n	8002c22 <HAL_PCD_EP_Close+0x6e>
 8002c1e:	2302      	movs	r3, #2
 8002c20:	e00e      	b.n	8002c40 <HAL_PCD_EP_Close+0x8c>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68f9      	ldr	r1, [r7, #12]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f002 f859 	bl	8004ce8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	607a      	str	r2, [r7, #4]
 8002c52:	603b      	str	r3, [r7, #0]
 8002c54:	460b      	mov	r3, r1
 8002c56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c58:	7afb      	ldrb	r3, [r7, #11]
 8002c5a:	f003 020f 	and.w	r2, r3, #15
 8002c5e:	4613      	mov	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	4413      	add	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	3304      	adds	r3, #4
 8002c70:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	2200      	movs	r2, #0
 8002c82:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	2200      	movs	r2, #0
 8002c88:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c8a:	7afb      	ldrb	r3, [r7, #11]
 8002c8c:	f003 030f 	and.w	r3, r3, #15
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d102      	bne.n	8002ca4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ca4:	7afb      	ldrb	r3, [r7, #11]
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d109      	bne.n	8002cc2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6818      	ldr	r0, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	461a      	mov	r2, r3
 8002cba:	6979      	ldr	r1, [r7, #20]
 8002cbc:	f002 fb40 	bl	8005340 <USB_EP0StartXfer>
 8002cc0:	e008      	b.n	8002cd4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6818      	ldr	r0, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	461a      	mov	r2, r3
 8002cce:	6979      	ldr	r1, [r7, #20]
 8002cd0:	f002 f8e6 	bl	8004ea0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3718      	adds	r7, #24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b083      	sub	sp, #12
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002cea:	78fb      	ldrb	r3, [r7, #3]
 8002cec:	f003 020f 	and.w	r2, r3, #15
 8002cf0:	6879      	ldr	r1, [r7, #4]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	4413      	add	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	440b      	add	r3, r1
 8002cfc:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002d00:	681b      	ldr	r3, [r3, #0]
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr

08002d0e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b086      	sub	sp, #24
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	60f8      	str	r0, [r7, #12]
 8002d16:	607a      	str	r2, [r7, #4]
 8002d18:	603b      	str	r3, [r7, #0]
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d1e:	7afb      	ldrb	r3, [r7, #11]
 8002d20:	f003 020f 	and.w	r2, r3, #15
 8002d24:	4613      	mov	r3, r2
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	4413      	add	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	3338      	adds	r3, #56	; 0x38
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	4413      	add	r3, r2
 8002d32:	3304      	adds	r3, #4
 8002d34:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	2200      	movs	r2, #0
 8002d46:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d4e:	7afb      	ldrb	r3, [r7, #11]
 8002d50:	f003 030f 	and.w	r3, r3, #15
 8002d54:	b2da      	uxtb	r2, r3
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d102      	bne.n	8002d68 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d68:	7afb      	ldrb	r3, [r7, #11]
 8002d6a:	f003 030f 	and.w	r3, r3, #15
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d109      	bne.n	8002d86 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6818      	ldr	r0, [r3, #0]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	6979      	ldr	r1, [r7, #20]
 8002d80:	f002 fade 	bl	8005340 <USB_EP0StartXfer>
 8002d84:	e008      	b.n	8002d98 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6818      	ldr	r0, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	461a      	mov	r2, r3
 8002d92:	6979      	ldr	r1, [r7, #20]
 8002d94:	f002 f884 	bl	8004ea0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3718      	adds	r7, #24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b084      	sub	sp, #16
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
 8002daa:	460b      	mov	r3, r1
 8002dac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002dae:	78fb      	ldrb	r3, [r7, #3]
 8002db0:	f003 020f 	and.w	r2, r3, #15
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d901      	bls.n	8002dc0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e050      	b.n	8002e62 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002dc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	da0f      	bge.n	8002de8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dc8:	78fb      	ldrb	r3, [r7, #3]
 8002dca:	f003 020f 	and.w	r2, r3, #15
 8002dce:	4613      	mov	r3, r2
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	4413      	add	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	3338      	adds	r3, #56	; 0x38
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	4413      	add	r3, r2
 8002ddc:	3304      	adds	r3, #4
 8002dde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2201      	movs	r2, #1
 8002de4:	705a      	strb	r2, [r3, #1]
 8002de6:	e00d      	b.n	8002e04 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002de8:	78fa      	ldrb	r2, [r7, #3]
 8002dea:	4613      	mov	r3, r2
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	4413      	add	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	4413      	add	r3, r2
 8002dfa:	3304      	adds	r3, #4
 8002dfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2201      	movs	r2, #1
 8002e08:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e0a:	78fb      	ldrb	r3, [r7, #3]
 8002e0c:	f003 030f 	and.w	r3, r3, #15
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d101      	bne.n	8002e24 <HAL_PCD_EP_SetStall+0x82>
 8002e20:	2302      	movs	r3, #2
 8002e22:	e01e      	b.n	8002e62 <HAL_PCD_EP_SetStall+0xc0>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68f9      	ldr	r1, [r7, #12]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f002 fd20 	bl	8005878 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e38:	78fb      	ldrb	r3, [r7, #3]
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10a      	bne.n	8002e58 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6818      	ldr	r0, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	b2d9      	uxtb	r1, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e52:	461a      	mov	r2, r3
 8002e54:	f002 ff12 	bl	8005c7c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b084      	sub	sp, #16
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
 8002e72:	460b      	mov	r3, r1
 8002e74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e76:	78fb      	ldrb	r3, [r7, #3]
 8002e78:	f003 020f 	and.w	r2, r3, #15
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d901      	bls.n	8002e88 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e042      	b.n	8002f0e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	da0f      	bge.n	8002eb0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e90:	78fb      	ldrb	r3, [r7, #3]
 8002e92:	f003 020f 	and.w	r2, r3, #15
 8002e96:	4613      	mov	r3, r2
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	4413      	add	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	3338      	adds	r3, #56	; 0x38
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	3304      	adds	r3, #4
 8002ea6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	705a      	strb	r2, [r3, #1]
 8002eae:	e00f      	b.n	8002ed0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002eb0:	78fb      	ldrb	r3, [r7, #3]
 8002eb2:	f003 020f 	and.w	r2, r3, #15
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	4413      	add	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	3304      	adds	r3, #4
 8002ec8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ed6:	78fb      	ldrb	r3, [r7, #3]
 8002ed8:	f003 030f 	and.w	r3, r3, #15
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d101      	bne.n	8002ef0 <HAL_PCD_EP_ClrStall+0x86>
 8002eec:	2302      	movs	r3, #2
 8002eee:	e00e      	b.n	8002f0e <HAL_PCD_EP_ClrStall+0xa4>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68f9      	ldr	r1, [r7, #12]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f002 fd28 	bl	8005954 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b084      	sub	sp, #16
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
 8002f1e:	460b      	mov	r3, r1
 8002f20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002f22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	da0c      	bge.n	8002f44 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f2a:	78fb      	ldrb	r3, [r7, #3]
 8002f2c:	f003 020f 	and.w	r2, r3, #15
 8002f30:	4613      	mov	r3, r2
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	4413      	add	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	3338      	adds	r3, #56	; 0x38
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	3304      	adds	r3, #4
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	e00c      	b.n	8002f5e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f44:	78fb      	ldrb	r3, [r7, #3]
 8002f46:	f003 020f 	and.w	r2, r3, #15
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	4413      	add	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	4413      	add	r3, r2
 8002f5a:	3304      	adds	r3, #4
 8002f5c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68f9      	ldr	r1, [r7, #12]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f002 fb47 	bl	80055f8 <USB_EPStopXfer>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002f6e:	7afb      	ldrb	r3, [r7, #11]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b08a      	sub	sp, #40	; 0x28
 8002f7c:	af02      	add	r7, sp, #8
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	4413      	add	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	3338      	adds	r3, #56	; 0x38
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	3304      	adds	r3, #4
 8002f9e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6a1a      	ldr	r2, [r3, #32]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d901      	bls.n	8002fb0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e06c      	b.n	800308a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	699a      	ldr	r2, [r3, #24]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	69fa      	ldr	r2, [r7, #28]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d902      	bls.n	8002fcc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	3303      	adds	r3, #3
 8002fd0:	089b      	lsrs	r3, r3, #2
 8002fd2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fd4:	e02b      	b.n	800302e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	699a      	ldr	r2, [r3, #24]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	69fa      	ldr	r2, [r7, #28]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d902      	bls.n	8002ff2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	3303      	adds	r3, #3
 8002ff6:	089b      	lsrs	r3, r3, #2
 8002ff8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6919      	ldr	r1, [r3, #16]
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	b2da      	uxtb	r2, r3
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800300a:	b2db      	uxtb	r3, r3
 800300c:	9300      	str	r3, [sp, #0]
 800300e:	4603      	mov	r3, r0
 8003010:	6978      	ldr	r0, [r7, #20]
 8003012:	f002 fb9b 	bl	800574c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	691a      	ldr	r2, [r3, #16]
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	441a      	add	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6a1a      	ldr	r2, [r3, #32]
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	441a      	add	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	015a      	lsls	r2, r3, #5
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	4413      	add	r3, r2
 8003036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	429a      	cmp	r2, r3
 8003042:	d809      	bhi.n	8003058 <PCD_WriteEmptyTxFifo+0xe0>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6a1a      	ldr	r2, [r3, #32]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800304c:	429a      	cmp	r2, r3
 800304e:	d203      	bcs.n	8003058 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1be      	bne.n	8002fd6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	699a      	ldr	r2, [r3, #24]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	429a      	cmp	r2, r3
 8003062:	d811      	bhi.n	8003088 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	f003 030f 	and.w	r3, r3, #15
 800306a:	2201      	movs	r2, #1
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003078:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	43db      	mvns	r3, r3
 800307e:	6939      	ldr	r1, [r7, #16]
 8003080:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003084:	4013      	ands	r3, r2
 8003086:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3720      	adds	r7, #32
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
	...

08003094 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b088      	sub	sp, #32
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	333c      	adds	r3, #60	; 0x3c
 80030ac:	3304      	adds	r3, #4
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	015a      	lsls	r2, r3, #5
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	4413      	add	r3, r2
 80030ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d17b      	bne.n	80031c2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	f003 0308 	and.w	r3, r3, #8
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d015      	beq.n	8003100 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	4a61      	ldr	r2, [pc, #388]	; (800325c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	f240 80b9 	bls.w	8003250 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f000 80b3 	beq.w	8003250 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	015a      	lsls	r2, r3, #5
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	4413      	add	r3, r2
 80030f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030f6:	461a      	mov	r2, r3
 80030f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030fc:	6093      	str	r3, [r2, #8]
 80030fe:	e0a7      	b.n	8003250 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	f003 0320 	and.w	r3, r3, #32
 8003106:	2b00      	cmp	r3, #0
 8003108:	d009      	beq.n	800311e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	015a      	lsls	r2, r3, #5
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	4413      	add	r3, r2
 8003112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003116:	461a      	mov	r2, r3
 8003118:	2320      	movs	r3, #32
 800311a:	6093      	str	r3, [r2, #8]
 800311c:	e098      	b.n	8003250 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003124:	2b00      	cmp	r3, #0
 8003126:	f040 8093 	bne.w	8003250 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	4a4b      	ldr	r2, [pc, #300]	; (800325c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d90f      	bls.n	8003152 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00a      	beq.n	8003152 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	015a      	lsls	r2, r3, #5
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	4413      	add	r3, r2
 8003144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003148:	461a      	mov	r2, r3
 800314a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800314e:	6093      	str	r3, [r2, #8]
 8003150:	e07e      	b.n	8003250 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	4613      	mov	r3, r2
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	4413      	add	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	4413      	add	r3, r2
 8003164:	3304      	adds	r3, #4
 8003166:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	69da      	ldr	r2, [r3, #28]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	0159      	lsls	r1, r3, #5
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	440b      	add	r3, r1
 8003174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800317e:	1ad2      	subs	r2, r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d114      	bne.n	80031b4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d109      	bne.n	80031a6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6818      	ldr	r0, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800319c:	461a      	mov	r2, r3
 800319e:	2101      	movs	r1, #1
 80031a0:	f002 fd6c 	bl	8005c7c <USB_EP0_OutStart>
 80031a4:	e006      	b.n	80031b4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	691a      	ldr	r2, [r3, #16]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	441a      	add	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	4619      	mov	r1, r3
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f005 f808 	bl	80081d0 <HAL_PCD_DataOutStageCallback>
 80031c0:	e046      	b.n	8003250 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	4a26      	ldr	r2, [pc, #152]	; (8003260 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d124      	bne.n	8003214 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00a      	beq.n	80031ea <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	015a      	lsls	r2, r3, #5
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	4413      	add	r3, r2
 80031dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031e0:	461a      	mov	r2, r3
 80031e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031e6:	6093      	str	r3, [r2, #8]
 80031e8:	e032      	b.n	8003250 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	f003 0320 	and.w	r3, r3, #32
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d008      	beq.n	8003206 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	015a      	lsls	r2, r3, #5
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	4413      	add	r3, r2
 80031fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003200:	461a      	mov	r2, r3
 8003202:	2320      	movs	r3, #32
 8003204:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	b2db      	uxtb	r3, r3
 800320a:	4619      	mov	r1, r3
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f004 ffdf 	bl	80081d0 <HAL_PCD_DataOutStageCallback>
 8003212:	e01d      	b.n	8003250 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d114      	bne.n	8003244 <PCD_EP_OutXfrComplete_int+0x1b0>
 800321a:	6879      	ldr	r1, [r7, #4]
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	4613      	mov	r3, r2
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	4413      	add	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	440b      	add	r3, r1
 8003228:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d108      	bne.n	8003244 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6818      	ldr	r0, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800323c:	461a      	mov	r2, r3
 800323e:	2100      	movs	r1, #0
 8003240:	f002 fd1c 	bl	8005c7c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	b2db      	uxtb	r3, r3
 8003248:	4619      	mov	r1, r3
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f004 ffc0 	bl	80081d0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3720      	adds	r7, #32
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	4f54300a 	.word	0x4f54300a
 8003260:	4f54310a 	.word	0x4f54310a

08003264 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	333c      	adds	r3, #60	; 0x3c
 800327c:	3304      	adds	r3, #4
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	015a      	lsls	r2, r3, #5
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	4413      	add	r3, r2
 800328a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	4a15      	ldr	r2, [pc, #84]	; (80032ec <PCD_EP_OutSetupPacket_int+0x88>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d90e      	bls.n	80032b8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d009      	beq.n	80032b8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	015a      	lsls	r2, r3, #5
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	4413      	add	r3, r2
 80032ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032b0:	461a      	mov	r2, r3
 80032b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032b6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f004 ff77 	bl	80081ac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	4a0a      	ldr	r2, [pc, #40]	; (80032ec <PCD_EP_OutSetupPacket_int+0x88>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d90c      	bls.n	80032e0 <PCD_EP_OutSetupPacket_int+0x7c>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d108      	bne.n	80032e0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6818      	ldr	r0, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80032d8:	461a      	mov	r2, r3
 80032da:	2101      	movs	r1, #1
 80032dc:	f002 fcce 	bl	8005c7c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3718      	adds	r7, #24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	4f54300a 	.word	0x4f54300a

080032f0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	460b      	mov	r3, r1
 80032fa:	70fb      	strb	r3, [r7, #3]
 80032fc:	4613      	mov	r3, r2
 80032fe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003306:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003308:	78fb      	ldrb	r3, [r7, #3]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d107      	bne.n	800331e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800330e:	883b      	ldrh	r3, [r7, #0]
 8003310:	0419      	lsls	r1, r3, #16
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68ba      	ldr	r2, [r7, #8]
 8003318:	430a      	orrs	r2, r1
 800331a:	629a      	str	r2, [r3, #40]	; 0x28
 800331c:	e028      	b.n	8003370 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003324:	0c1b      	lsrs	r3, r3, #16
 8003326:	68ba      	ldr	r2, [r7, #8]
 8003328:	4413      	add	r3, r2
 800332a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800332c:	2300      	movs	r3, #0
 800332e:	73fb      	strb	r3, [r7, #15]
 8003330:	e00d      	b.n	800334e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	7bfb      	ldrb	r3, [r7, #15]
 8003338:	3340      	adds	r3, #64	; 0x40
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4413      	add	r3, r2
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	0c1b      	lsrs	r3, r3, #16
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	4413      	add	r3, r2
 8003346:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003348:	7bfb      	ldrb	r3, [r7, #15]
 800334a:	3301      	adds	r3, #1
 800334c:	73fb      	strb	r3, [r7, #15]
 800334e:	7bfa      	ldrb	r2, [r7, #15]
 8003350:	78fb      	ldrb	r3, [r7, #3]
 8003352:	3b01      	subs	r3, #1
 8003354:	429a      	cmp	r2, r3
 8003356:	d3ec      	bcc.n	8003332 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003358:	883b      	ldrh	r3, [r7, #0]
 800335a:	0418      	lsls	r0, r3, #16
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6819      	ldr	r1, [r3, #0]
 8003360:	78fb      	ldrb	r3, [r7, #3]
 8003362:	3b01      	subs	r3, #1
 8003364:	68ba      	ldr	r2, [r7, #8]
 8003366:	4302      	orrs	r2, r0
 8003368:	3340      	adds	r3, #64	; 0x40
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	440b      	add	r3, r1
 800336e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3714      	adds	r7, #20
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr

0800337e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800337e:	b480      	push	{r7}
 8003380:	b083      	sub	sp, #12
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
 8003386:	460b      	mov	r3, r1
 8003388:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	887a      	ldrh	r2, [r7, #2]
 8003390:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033ce:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <HAL_PCDEx_ActivateLPM+0x44>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3714      	adds	r7, #20
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	10000003 	.word	0x10000003

080033e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80033f0:	2300      	movs	r3, #0
 80033f2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e291      	b.n	8003922 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	2b00      	cmp	r3, #0
 8003408:	f000 8087 	beq.w	800351a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800340c:	4b96      	ldr	r3, [pc, #600]	; (8003668 <HAL_RCC_OscConfig+0x280>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f003 030c 	and.w	r3, r3, #12
 8003414:	2b04      	cmp	r3, #4
 8003416:	d00c      	beq.n	8003432 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003418:	4b93      	ldr	r3, [pc, #588]	; (8003668 <HAL_RCC_OscConfig+0x280>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f003 030c 	and.w	r3, r3, #12
 8003420:	2b08      	cmp	r3, #8
 8003422:	d112      	bne.n	800344a <HAL_RCC_OscConfig+0x62>
 8003424:	4b90      	ldr	r3, [pc, #576]	; (8003668 <HAL_RCC_OscConfig+0x280>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800342c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003430:	d10b      	bne.n	800344a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003432:	4b8d      	ldr	r3, [pc, #564]	; (8003668 <HAL_RCC_OscConfig+0x280>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d06c      	beq.n	8003518 <HAL_RCC_OscConfig+0x130>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d168      	bne.n	8003518 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e26b      	b.n	8003922 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003452:	d106      	bne.n	8003462 <HAL_RCC_OscConfig+0x7a>
 8003454:	4b84      	ldr	r3, [pc, #528]	; (8003668 <HAL_RCC_OscConfig+0x280>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a83      	ldr	r2, [pc, #524]	; (8003668 <HAL_RCC_OscConfig+0x280>)
 800345a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800345e:	6013      	str	r3, [r2, #0]
 8003460:	e02e      	b.n	80034c0 <HAL_RCC_OscConfig+0xd8>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d10c      	bne.n	8003484 <HAL_RCC_OscConfig+0x9c>
 800346a:	4b7f      	ldr	r3, [pc, #508]	; (8003668 <HAL_RCC_OscConfig+0x280>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a7e      	ldr	r2, [pc, #504]	; (8003668 <HAL_RCC_OscConfig+0x280>)
 8003470:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003474:	6013      	str	r3, [r2, #0]
 8003476:	4b7c      	ldr	r3, [pc, #496]	; (8003668 <HAL_RCC_OscConfig+0x280>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a7b      	ldr	r2, [pc, #492]	; (8003668 <HAL_RCC_OscConfig+0x280>)
 800347c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003480:	6013      	str	r3, [r2, #0]
 8003482:	e01d      	b.n	80034c0 <HAL_RCC_OscConfig+0xd8>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800348c:	d10c      	bne.n	80034a8 <HAL_RCC_OscConfig+0xc0>
 800348e:	4b76      	ldr	r3, [pc, #472]	; (8003668 <HAL_RCC_OscConfig+0x280>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a75      	ldr	r2, [pc, #468]	; (8003668 <HAL_RCC_OscConfig+0x280>)
 8003494:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003498:	6013      	str	r3, [r2, #0]
 800349a:	4b73      	ldr	r3, [pc, #460]	; (8003668 <HAL_RCC_OscConfig+0x280>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a72      	ldr	r2, [pc, #456]	; (8003668 <HAL_RCC_OscConfig+0x280>)
 80034a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034a4:	6013      	str	r3, [r2, #0]
 80034a6:	e00b      	b.n	80034c0 <HAL_RCC_OscConfig+0xd8>
 80034a8:	4b6f      	ldr	r3, [pc, #444]	; (8003668 <HAL_RCC_OscConfig+0x280>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a6e      	ldr	r2, [pc, #440]	; (8003668 <HAL_RCC_OscConfig+0x280>)
 80034ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034b2:	6013      	str	r3, [r2, #0]
 80034b4:	4b6c      	ldr	r3, [pc, #432]	; (8003668 <HAL_RCC_OscConfig+0x280>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a6b      	ldr	r2, [pc, #428]	; (8003668 <HAL_RCC_OscConfig+0x280>)
 80034ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d013      	beq.n	80034f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c8:	f7fd fb5c 	bl	8000b84 <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034d0:	f7fd fb58 	bl	8000b84 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b64      	cmp	r3, #100	; 0x64
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e21f      	b.n	8003922 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034e2:	4b61      	ldr	r3, [pc, #388]	; (8003668 <HAL_RCC_OscConfig+0x280>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d0f0      	beq.n	80034d0 <HAL_RCC_OscConfig+0xe8>
 80034ee:	e014      	b.n	800351a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f0:	f7fd fb48 	bl	8000b84 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034f8:	f7fd fb44 	bl	8000b84 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b64      	cmp	r3, #100	; 0x64
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e20b      	b.n	8003922 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800350a:	4b57      	ldr	r3, [pc, #348]	; (8003668 <HAL_RCC_OscConfig+0x280>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1f0      	bne.n	80034f8 <HAL_RCC_OscConfig+0x110>
 8003516:	e000      	b.n	800351a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003518:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d069      	beq.n	80035fa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003526:	4b50      	ldr	r3, [pc, #320]	; (8003668 <HAL_RCC_OscConfig+0x280>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f003 030c 	and.w	r3, r3, #12
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00b      	beq.n	800354a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003532:	4b4d      	ldr	r3, [pc, #308]	; (8003668 <HAL_RCC_OscConfig+0x280>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f003 030c 	and.w	r3, r3, #12
 800353a:	2b08      	cmp	r3, #8
 800353c:	d11c      	bne.n	8003578 <HAL_RCC_OscConfig+0x190>
 800353e:	4b4a      	ldr	r3, [pc, #296]	; (8003668 <HAL_RCC_OscConfig+0x280>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d116      	bne.n	8003578 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800354a:	4b47      	ldr	r3, [pc, #284]	; (8003668 <HAL_RCC_OscConfig+0x280>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d005      	beq.n	8003562 <HAL_RCC_OscConfig+0x17a>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d001      	beq.n	8003562 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e1df      	b.n	8003922 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003562:	4b41      	ldr	r3, [pc, #260]	; (8003668 <HAL_RCC_OscConfig+0x280>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	493d      	ldr	r1, [pc, #244]	; (8003668 <HAL_RCC_OscConfig+0x280>)
 8003572:	4313      	orrs	r3, r2
 8003574:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003576:	e040      	b.n	80035fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d023      	beq.n	80035c8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003580:	4b39      	ldr	r3, [pc, #228]	; (8003668 <HAL_RCC_OscConfig+0x280>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a38      	ldr	r2, [pc, #224]	; (8003668 <HAL_RCC_OscConfig+0x280>)
 8003586:	f043 0301 	orr.w	r3, r3, #1
 800358a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358c:	f7fd fafa 	bl	8000b84 <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003594:	f7fd faf6 	bl	8000b84 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e1bd      	b.n	8003922 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a6:	4b30      	ldr	r3, [pc, #192]	; (8003668 <HAL_RCC_OscConfig+0x280>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0f0      	beq.n	8003594 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035b2:	4b2d      	ldr	r3, [pc, #180]	; (8003668 <HAL_RCC_OscConfig+0x280>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	4929      	ldr	r1, [pc, #164]	; (8003668 <HAL_RCC_OscConfig+0x280>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	600b      	str	r3, [r1, #0]
 80035c6:	e018      	b.n	80035fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035c8:	4b27      	ldr	r3, [pc, #156]	; (8003668 <HAL_RCC_OscConfig+0x280>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a26      	ldr	r2, [pc, #152]	; (8003668 <HAL_RCC_OscConfig+0x280>)
 80035ce:	f023 0301 	bic.w	r3, r3, #1
 80035d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d4:	f7fd fad6 	bl	8000b84 <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035da:	e008      	b.n	80035ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035dc:	f7fd fad2 	bl	8000b84 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e199      	b.n	8003922 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ee:	4b1e      	ldr	r3, [pc, #120]	; (8003668 <HAL_RCC_OscConfig+0x280>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1f0      	bne.n	80035dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0308 	and.w	r3, r3, #8
 8003602:	2b00      	cmp	r3, #0
 8003604:	d038      	beq.n	8003678 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d019      	beq.n	8003642 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800360e:	4b16      	ldr	r3, [pc, #88]	; (8003668 <HAL_RCC_OscConfig+0x280>)
 8003610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003612:	4a15      	ldr	r2, [pc, #84]	; (8003668 <HAL_RCC_OscConfig+0x280>)
 8003614:	f043 0301 	orr.w	r3, r3, #1
 8003618:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800361a:	f7fd fab3 	bl	8000b84 <HAL_GetTick>
 800361e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003620:	e008      	b.n	8003634 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003622:	f7fd faaf 	bl	8000b84 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e176      	b.n	8003922 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003634:	4b0c      	ldr	r3, [pc, #48]	; (8003668 <HAL_RCC_OscConfig+0x280>)
 8003636:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d0f0      	beq.n	8003622 <HAL_RCC_OscConfig+0x23a>
 8003640:	e01a      	b.n	8003678 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003642:	4b09      	ldr	r3, [pc, #36]	; (8003668 <HAL_RCC_OscConfig+0x280>)
 8003644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003646:	4a08      	ldr	r2, [pc, #32]	; (8003668 <HAL_RCC_OscConfig+0x280>)
 8003648:	f023 0301 	bic.w	r3, r3, #1
 800364c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800364e:	f7fd fa99 	bl	8000b84 <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003654:	e00a      	b.n	800366c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003656:	f7fd fa95 	bl	8000b84 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d903      	bls.n	800366c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e15c      	b.n	8003922 <HAL_RCC_OscConfig+0x53a>
 8003668:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800366c:	4b91      	ldr	r3, [pc, #580]	; (80038b4 <HAL_RCC_OscConfig+0x4cc>)
 800366e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1ee      	bne.n	8003656 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0304 	and.w	r3, r3, #4
 8003680:	2b00      	cmp	r3, #0
 8003682:	f000 80a4 	beq.w	80037ce <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003686:	4b8b      	ldr	r3, [pc, #556]	; (80038b4 <HAL_RCC_OscConfig+0x4cc>)
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10d      	bne.n	80036ae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003692:	4b88      	ldr	r3, [pc, #544]	; (80038b4 <HAL_RCC_OscConfig+0x4cc>)
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	4a87      	ldr	r2, [pc, #540]	; (80038b4 <HAL_RCC_OscConfig+0x4cc>)
 8003698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800369c:	6413      	str	r3, [r2, #64]	; 0x40
 800369e:	4b85      	ldr	r3, [pc, #532]	; (80038b4 <HAL_RCC_OscConfig+0x4cc>)
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a6:	60bb      	str	r3, [r7, #8]
 80036a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036aa:	2301      	movs	r3, #1
 80036ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036ae:	4b82      	ldr	r3, [pc, #520]	; (80038b8 <HAL_RCC_OscConfig+0x4d0>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d118      	bne.n	80036ec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80036ba:	4b7f      	ldr	r3, [pc, #508]	; (80038b8 <HAL_RCC_OscConfig+0x4d0>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a7e      	ldr	r2, [pc, #504]	; (80038b8 <HAL_RCC_OscConfig+0x4d0>)
 80036c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036c6:	f7fd fa5d 	bl	8000b84 <HAL_GetTick>
 80036ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036cc:	e008      	b.n	80036e0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ce:	f7fd fa59 	bl	8000b84 <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	2b64      	cmp	r3, #100	; 0x64
 80036da:	d901      	bls.n	80036e0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e120      	b.n	8003922 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036e0:	4b75      	ldr	r3, [pc, #468]	; (80038b8 <HAL_RCC_OscConfig+0x4d0>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d0f0      	beq.n	80036ce <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d106      	bne.n	8003702 <HAL_RCC_OscConfig+0x31a>
 80036f4:	4b6f      	ldr	r3, [pc, #444]	; (80038b4 <HAL_RCC_OscConfig+0x4cc>)
 80036f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f8:	4a6e      	ldr	r2, [pc, #440]	; (80038b4 <HAL_RCC_OscConfig+0x4cc>)
 80036fa:	f043 0301 	orr.w	r3, r3, #1
 80036fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003700:	e02d      	b.n	800375e <HAL_RCC_OscConfig+0x376>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10c      	bne.n	8003724 <HAL_RCC_OscConfig+0x33c>
 800370a:	4b6a      	ldr	r3, [pc, #424]	; (80038b4 <HAL_RCC_OscConfig+0x4cc>)
 800370c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370e:	4a69      	ldr	r2, [pc, #420]	; (80038b4 <HAL_RCC_OscConfig+0x4cc>)
 8003710:	f023 0301 	bic.w	r3, r3, #1
 8003714:	6713      	str	r3, [r2, #112]	; 0x70
 8003716:	4b67      	ldr	r3, [pc, #412]	; (80038b4 <HAL_RCC_OscConfig+0x4cc>)
 8003718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371a:	4a66      	ldr	r2, [pc, #408]	; (80038b4 <HAL_RCC_OscConfig+0x4cc>)
 800371c:	f023 0304 	bic.w	r3, r3, #4
 8003720:	6713      	str	r3, [r2, #112]	; 0x70
 8003722:	e01c      	b.n	800375e <HAL_RCC_OscConfig+0x376>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	2b05      	cmp	r3, #5
 800372a:	d10c      	bne.n	8003746 <HAL_RCC_OscConfig+0x35e>
 800372c:	4b61      	ldr	r3, [pc, #388]	; (80038b4 <HAL_RCC_OscConfig+0x4cc>)
 800372e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003730:	4a60      	ldr	r2, [pc, #384]	; (80038b4 <HAL_RCC_OscConfig+0x4cc>)
 8003732:	f043 0304 	orr.w	r3, r3, #4
 8003736:	6713      	str	r3, [r2, #112]	; 0x70
 8003738:	4b5e      	ldr	r3, [pc, #376]	; (80038b4 <HAL_RCC_OscConfig+0x4cc>)
 800373a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373c:	4a5d      	ldr	r2, [pc, #372]	; (80038b4 <HAL_RCC_OscConfig+0x4cc>)
 800373e:	f043 0301 	orr.w	r3, r3, #1
 8003742:	6713      	str	r3, [r2, #112]	; 0x70
 8003744:	e00b      	b.n	800375e <HAL_RCC_OscConfig+0x376>
 8003746:	4b5b      	ldr	r3, [pc, #364]	; (80038b4 <HAL_RCC_OscConfig+0x4cc>)
 8003748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374a:	4a5a      	ldr	r2, [pc, #360]	; (80038b4 <HAL_RCC_OscConfig+0x4cc>)
 800374c:	f023 0301 	bic.w	r3, r3, #1
 8003750:	6713      	str	r3, [r2, #112]	; 0x70
 8003752:	4b58      	ldr	r3, [pc, #352]	; (80038b4 <HAL_RCC_OscConfig+0x4cc>)
 8003754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003756:	4a57      	ldr	r2, [pc, #348]	; (80038b4 <HAL_RCC_OscConfig+0x4cc>)
 8003758:	f023 0304 	bic.w	r3, r3, #4
 800375c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d015      	beq.n	8003792 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003766:	f7fd fa0d 	bl	8000b84 <HAL_GetTick>
 800376a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800376c:	e00a      	b.n	8003784 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800376e:	f7fd fa09 	bl	8000b84 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	f241 3288 	movw	r2, #5000	; 0x1388
 800377c:	4293      	cmp	r3, r2
 800377e:	d901      	bls.n	8003784 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e0ce      	b.n	8003922 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003784:	4b4b      	ldr	r3, [pc, #300]	; (80038b4 <HAL_RCC_OscConfig+0x4cc>)
 8003786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d0ee      	beq.n	800376e <HAL_RCC_OscConfig+0x386>
 8003790:	e014      	b.n	80037bc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003792:	f7fd f9f7 	bl	8000b84 <HAL_GetTick>
 8003796:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003798:	e00a      	b.n	80037b0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800379a:	f7fd f9f3 	bl	8000b84 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d901      	bls.n	80037b0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e0b8      	b.n	8003922 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037b0:	4b40      	ldr	r3, [pc, #256]	; (80038b4 <HAL_RCC_OscConfig+0x4cc>)
 80037b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1ee      	bne.n	800379a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037bc:	7dfb      	ldrb	r3, [r7, #23]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d105      	bne.n	80037ce <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037c2:	4b3c      	ldr	r3, [pc, #240]	; (80038b4 <HAL_RCC_OscConfig+0x4cc>)
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	4a3b      	ldr	r2, [pc, #236]	; (80038b4 <HAL_RCC_OscConfig+0x4cc>)
 80037c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f000 80a4 	beq.w	8003920 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037d8:	4b36      	ldr	r3, [pc, #216]	; (80038b4 <HAL_RCC_OscConfig+0x4cc>)
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f003 030c 	and.w	r3, r3, #12
 80037e0:	2b08      	cmp	r3, #8
 80037e2:	d06b      	beq.n	80038bc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d149      	bne.n	8003880 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ec:	4b31      	ldr	r3, [pc, #196]	; (80038b4 <HAL_RCC_OscConfig+0x4cc>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a30      	ldr	r2, [pc, #192]	; (80038b4 <HAL_RCC_OscConfig+0x4cc>)
 80037f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f8:	f7fd f9c4 	bl	8000b84 <HAL_GetTick>
 80037fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037fe:	e008      	b.n	8003812 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003800:	f7fd f9c0 	bl	8000b84 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b02      	cmp	r3, #2
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e087      	b.n	8003922 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003812:	4b28      	ldr	r3, [pc, #160]	; (80038b4 <HAL_RCC_OscConfig+0x4cc>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1f0      	bne.n	8003800 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	69da      	ldr	r2, [r3, #28]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	431a      	orrs	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382c:	019b      	lsls	r3, r3, #6
 800382e:	431a      	orrs	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003834:	085b      	lsrs	r3, r3, #1
 8003836:	3b01      	subs	r3, #1
 8003838:	041b      	lsls	r3, r3, #16
 800383a:	431a      	orrs	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003840:	061b      	lsls	r3, r3, #24
 8003842:	4313      	orrs	r3, r2
 8003844:	4a1b      	ldr	r2, [pc, #108]	; (80038b4 <HAL_RCC_OscConfig+0x4cc>)
 8003846:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800384a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800384c:	4b19      	ldr	r3, [pc, #100]	; (80038b4 <HAL_RCC_OscConfig+0x4cc>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a18      	ldr	r2, [pc, #96]	; (80038b4 <HAL_RCC_OscConfig+0x4cc>)
 8003852:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003856:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003858:	f7fd f994 	bl	8000b84 <HAL_GetTick>
 800385c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800385e:	e008      	b.n	8003872 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003860:	f7fd f990 	bl	8000b84 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b02      	cmp	r3, #2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e057      	b.n	8003922 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003872:	4b10      	ldr	r3, [pc, #64]	; (80038b4 <HAL_RCC_OscConfig+0x4cc>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d0f0      	beq.n	8003860 <HAL_RCC_OscConfig+0x478>
 800387e:	e04f      	b.n	8003920 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003880:	4b0c      	ldr	r3, [pc, #48]	; (80038b4 <HAL_RCC_OscConfig+0x4cc>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a0b      	ldr	r2, [pc, #44]	; (80038b4 <HAL_RCC_OscConfig+0x4cc>)
 8003886:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800388a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388c:	f7fd f97a 	bl	8000b84 <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003894:	f7fd f976 	bl	8000b84 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e03d      	b.n	8003922 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038a6:	4b03      	ldr	r3, [pc, #12]	; (80038b4 <HAL_RCC_OscConfig+0x4cc>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1f0      	bne.n	8003894 <HAL_RCC_OscConfig+0x4ac>
 80038b2:	e035      	b.n	8003920 <HAL_RCC_OscConfig+0x538>
 80038b4:	40023800 	.word	0x40023800
 80038b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80038bc:	4b1b      	ldr	r3, [pc, #108]	; (800392c <HAL_RCC_OscConfig+0x544>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d028      	beq.n	800391c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d121      	bne.n	800391c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d11a      	bne.n	800391c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038ec:	4013      	ands	r3, r2
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038f2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d111      	bne.n	800391c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003902:	085b      	lsrs	r3, r3, #1
 8003904:	3b01      	subs	r3, #1
 8003906:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003908:	429a      	cmp	r2, r3
 800390a:	d107      	bne.n	800391c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003916:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003918:	429a      	cmp	r2, r3
 800391a:	d001      	beq.n	8003920 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e000      	b.n	8003922 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3718      	adds	r7, #24
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	40023800 	.word	0x40023800

08003930 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800393a:	2300      	movs	r3, #0
 800393c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d101      	bne.n	8003948 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e0d0      	b.n	8003aea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003948:	4b6a      	ldr	r3, [pc, #424]	; (8003af4 <HAL_RCC_ClockConfig+0x1c4>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 030f 	and.w	r3, r3, #15
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	429a      	cmp	r2, r3
 8003954:	d910      	bls.n	8003978 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003956:	4b67      	ldr	r3, [pc, #412]	; (8003af4 <HAL_RCC_ClockConfig+0x1c4>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f023 020f 	bic.w	r2, r3, #15
 800395e:	4965      	ldr	r1, [pc, #404]	; (8003af4 <HAL_RCC_ClockConfig+0x1c4>)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	4313      	orrs	r3, r2
 8003964:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003966:	4b63      	ldr	r3, [pc, #396]	; (8003af4 <HAL_RCC_ClockConfig+0x1c4>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 030f 	and.w	r3, r3, #15
 800396e:	683a      	ldr	r2, [r7, #0]
 8003970:	429a      	cmp	r2, r3
 8003972:	d001      	beq.n	8003978 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e0b8      	b.n	8003aea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d020      	beq.n	80039c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0304 	and.w	r3, r3, #4
 800398c:	2b00      	cmp	r3, #0
 800398e:	d005      	beq.n	800399c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003990:	4b59      	ldr	r3, [pc, #356]	; (8003af8 <HAL_RCC_ClockConfig+0x1c8>)
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	4a58      	ldr	r2, [pc, #352]	; (8003af8 <HAL_RCC_ClockConfig+0x1c8>)
 8003996:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800399a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0308 	and.w	r3, r3, #8
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d005      	beq.n	80039b4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039a8:	4b53      	ldr	r3, [pc, #332]	; (8003af8 <HAL_RCC_ClockConfig+0x1c8>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	4a52      	ldr	r2, [pc, #328]	; (8003af8 <HAL_RCC_ClockConfig+0x1c8>)
 80039ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039b4:	4b50      	ldr	r3, [pc, #320]	; (8003af8 <HAL_RCC_ClockConfig+0x1c8>)
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	494d      	ldr	r1, [pc, #308]	; (8003af8 <HAL_RCC_ClockConfig+0x1c8>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d040      	beq.n	8003a54 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d107      	bne.n	80039ea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039da:	4b47      	ldr	r3, [pc, #284]	; (8003af8 <HAL_RCC_ClockConfig+0x1c8>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d115      	bne.n	8003a12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e07f      	b.n	8003aea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d107      	bne.n	8003a02 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039f2:	4b41      	ldr	r3, [pc, #260]	; (8003af8 <HAL_RCC_ClockConfig+0x1c8>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d109      	bne.n	8003a12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e073      	b.n	8003aea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a02:	4b3d      	ldr	r3, [pc, #244]	; (8003af8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e06b      	b.n	8003aea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a12:	4b39      	ldr	r3, [pc, #228]	; (8003af8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f023 0203 	bic.w	r2, r3, #3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	4936      	ldr	r1, [pc, #216]	; (8003af8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a24:	f7fd f8ae 	bl	8000b84 <HAL_GetTick>
 8003a28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a2a:	e00a      	b.n	8003a42 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a2c:	f7fd f8aa 	bl	8000b84 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e053      	b.n	8003aea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a42:	4b2d      	ldr	r3, [pc, #180]	; (8003af8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f003 020c 	and.w	r2, r3, #12
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d1eb      	bne.n	8003a2c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a54:	4b27      	ldr	r3, [pc, #156]	; (8003af4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 030f 	and.w	r3, r3, #15
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d210      	bcs.n	8003a84 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a62:	4b24      	ldr	r3, [pc, #144]	; (8003af4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f023 020f 	bic.w	r2, r3, #15
 8003a6a:	4922      	ldr	r1, [pc, #136]	; (8003af4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a72:	4b20      	ldr	r3, [pc, #128]	; (8003af4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 030f 	and.w	r3, r3, #15
 8003a7a:	683a      	ldr	r2, [r7, #0]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d001      	beq.n	8003a84 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e032      	b.n	8003aea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0304 	and.w	r3, r3, #4
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d008      	beq.n	8003aa2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a90:	4b19      	ldr	r3, [pc, #100]	; (8003af8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	4916      	ldr	r1, [pc, #88]	; (8003af8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0308 	and.w	r3, r3, #8
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d009      	beq.n	8003ac2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003aae:	4b12      	ldr	r3, [pc, #72]	; (8003af8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	490e      	ldr	r1, [pc, #56]	; (8003af8 <HAL_RCC_ClockConfig+0x1c8>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ac2:	f000 f821 	bl	8003b08 <HAL_RCC_GetSysClockFreq>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	4b0b      	ldr	r3, [pc, #44]	; (8003af8 <HAL_RCC_ClockConfig+0x1c8>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	091b      	lsrs	r3, r3, #4
 8003ace:	f003 030f 	and.w	r3, r3, #15
 8003ad2:	490a      	ldr	r1, [pc, #40]	; (8003afc <HAL_RCC_ClockConfig+0x1cc>)
 8003ad4:	5ccb      	ldrb	r3, [r1, r3]
 8003ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8003ada:	4a09      	ldr	r2, [pc, #36]	; (8003b00 <HAL_RCC_ClockConfig+0x1d0>)
 8003adc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ade:	4b09      	ldr	r3, [pc, #36]	; (8003b04 <HAL_RCC_ClockConfig+0x1d4>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7fd f80a 	bl	8000afc <HAL_InitTick>

  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	40023c00 	.word	0x40023c00
 8003af8:	40023800 	.word	0x40023800
 8003afc:	08008aa8 	.word	0x08008aa8
 8003b00:	20000000 	.word	0x20000000
 8003b04:	20000004 	.word	0x20000004

08003b08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b0c:	b094      	sub	sp, #80	; 0x50
 8003b0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003b10:	2300      	movs	r3, #0
 8003b12:	647b      	str	r3, [r7, #68]	; 0x44
 8003b14:	2300      	movs	r3, #0
 8003b16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b18:	2300      	movs	r3, #0
 8003b1a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b20:	4b79      	ldr	r3, [pc, #484]	; (8003d08 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f003 030c 	and.w	r3, r3, #12
 8003b28:	2b08      	cmp	r3, #8
 8003b2a:	d00d      	beq.n	8003b48 <HAL_RCC_GetSysClockFreq+0x40>
 8003b2c:	2b08      	cmp	r3, #8
 8003b2e:	f200 80e1 	bhi.w	8003cf4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d002      	beq.n	8003b3c <HAL_RCC_GetSysClockFreq+0x34>
 8003b36:	2b04      	cmp	r3, #4
 8003b38:	d003      	beq.n	8003b42 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b3a:	e0db      	b.n	8003cf4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b3c:	4b73      	ldr	r3, [pc, #460]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x204>)
 8003b3e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b40:	e0db      	b.n	8003cfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b42:	4b72      	ldr	r3, [pc, #456]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x204>)
 8003b44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b46:	e0d8      	b.n	8003cfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b48:	4b6f      	ldr	r3, [pc, #444]	; (8003d08 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b50:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003b52:	4b6d      	ldr	r3, [pc, #436]	; (8003d08 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d063      	beq.n	8003c26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b5e:	4b6a      	ldr	r3, [pc, #424]	; (8003d08 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	099b      	lsrs	r3, r3, #6
 8003b64:	2200      	movs	r2, #0
 8003b66:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b68:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b70:	633b      	str	r3, [r7, #48]	; 0x30
 8003b72:	2300      	movs	r3, #0
 8003b74:	637b      	str	r3, [r7, #52]	; 0x34
 8003b76:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003b7a:	4622      	mov	r2, r4
 8003b7c:	462b      	mov	r3, r5
 8003b7e:	f04f 0000 	mov.w	r0, #0
 8003b82:	f04f 0100 	mov.w	r1, #0
 8003b86:	0159      	lsls	r1, r3, #5
 8003b88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b8c:	0150      	lsls	r0, r2, #5
 8003b8e:	4602      	mov	r2, r0
 8003b90:	460b      	mov	r3, r1
 8003b92:	4621      	mov	r1, r4
 8003b94:	1a51      	subs	r1, r2, r1
 8003b96:	6139      	str	r1, [r7, #16]
 8003b98:	4629      	mov	r1, r5
 8003b9a:	eb63 0301 	sbc.w	r3, r3, r1
 8003b9e:	617b      	str	r3, [r7, #20]
 8003ba0:	f04f 0200 	mov.w	r2, #0
 8003ba4:	f04f 0300 	mov.w	r3, #0
 8003ba8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bac:	4659      	mov	r1, fp
 8003bae:	018b      	lsls	r3, r1, #6
 8003bb0:	4651      	mov	r1, sl
 8003bb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bb6:	4651      	mov	r1, sl
 8003bb8:	018a      	lsls	r2, r1, #6
 8003bba:	4651      	mov	r1, sl
 8003bbc:	ebb2 0801 	subs.w	r8, r2, r1
 8003bc0:	4659      	mov	r1, fp
 8003bc2:	eb63 0901 	sbc.w	r9, r3, r1
 8003bc6:	f04f 0200 	mov.w	r2, #0
 8003bca:	f04f 0300 	mov.w	r3, #0
 8003bce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bda:	4690      	mov	r8, r2
 8003bdc:	4699      	mov	r9, r3
 8003bde:	4623      	mov	r3, r4
 8003be0:	eb18 0303 	adds.w	r3, r8, r3
 8003be4:	60bb      	str	r3, [r7, #8]
 8003be6:	462b      	mov	r3, r5
 8003be8:	eb49 0303 	adc.w	r3, r9, r3
 8003bec:	60fb      	str	r3, [r7, #12]
 8003bee:	f04f 0200 	mov.w	r2, #0
 8003bf2:	f04f 0300 	mov.w	r3, #0
 8003bf6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003bfa:	4629      	mov	r1, r5
 8003bfc:	028b      	lsls	r3, r1, #10
 8003bfe:	4621      	mov	r1, r4
 8003c00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c04:	4621      	mov	r1, r4
 8003c06:	028a      	lsls	r2, r1, #10
 8003c08:	4610      	mov	r0, r2
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c0e:	2200      	movs	r2, #0
 8003c10:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c18:	f7fc faf6 	bl	8000208 <__aeabi_uldivmod>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	460b      	mov	r3, r1
 8003c20:	4613      	mov	r3, r2
 8003c22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c24:	e058      	b.n	8003cd8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c26:	4b38      	ldr	r3, [pc, #224]	; (8003d08 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	099b      	lsrs	r3, r3, #6
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	4618      	mov	r0, r3
 8003c30:	4611      	mov	r1, r2
 8003c32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c36:	623b      	str	r3, [r7, #32]
 8003c38:	2300      	movs	r3, #0
 8003c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c40:	4642      	mov	r2, r8
 8003c42:	464b      	mov	r3, r9
 8003c44:	f04f 0000 	mov.w	r0, #0
 8003c48:	f04f 0100 	mov.w	r1, #0
 8003c4c:	0159      	lsls	r1, r3, #5
 8003c4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c52:	0150      	lsls	r0, r2, #5
 8003c54:	4602      	mov	r2, r0
 8003c56:	460b      	mov	r3, r1
 8003c58:	4641      	mov	r1, r8
 8003c5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c5e:	4649      	mov	r1, r9
 8003c60:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c64:	f04f 0200 	mov.w	r2, #0
 8003c68:	f04f 0300 	mov.w	r3, #0
 8003c6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c78:	ebb2 040a 	subs.w	r4, r2, sl
 8003c7c:	eb63 050b 	sbc.w	r5, r3, fp
 8003c80:	f04f 0200 	mov.w	r2, #0
 8003c84:	f04f 0300 	mov.w	r3, #0
 8003c88:	00eb      	lsls	r3, r5, #3
 8003c8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c8e:	00e2      	lsls	r2, r4, #3
 8003c90:	4614      	mov	r4, r2
 8003c92:	461d      	mov	r5, r3
 8003c94:	4643      	mov	r3, r8
 8003c96:	18e3      	adds	r3, r4, r3
 8003c98:	603b      	str	r3, [r7, #0]
 8003c9a:	464b      	mov	r3, r9
 8003c9c:	eb45 0303 	adc.w	r3, r5, r3
 8003ca0:	607b      	str	r3, [r7, #4]
 8003ca2:	f04f 0200 	mov.w	r2, #0
 8003ca6:	f04f 0300 	mov.w	r3, #0
 8003caa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cae:	4629      	mov	r1, r5
 8003cb0:	028b      	lsls	r3, r1, #10
 8003cb2:	4621      	mov	r1, r4
 8003cb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cb8:	4621      	mov	r1, r4
 8003cba:	028a      	lsls	r2, r1, #10
 8003cbc:	4610      	mov	r0, r2
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	61bb      	str	r3, [r7, #24]
 8003cc6:	61fa      	str	r2, [r7, #28]
 8003cc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ccc:	f7fc fa9c 	bl	8000208 <__aeabi_uldivmod>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003cd8:	4b0b      	ldr	r3, [pc, #44]	; (8003d08 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	0c1b      	lsrs	r3, r3, #16
 8003cde:	f003 0303 	and.w	r3, r3, #3
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003ce8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003cea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cf2:	e002      	b.n	8003cfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cf4:	4b05      	ldr	r3, [pc, #20]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x204>)
 8003cf6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3750      	adds	r7, #80	; 0x50
 8003d00:	46bd      	mov	sp, r7
 8003d02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d06:	bf00      	nop
 8003d08:	40023800 	.word	0x40023800
 8003d0c:	00f42400 	.word	0x00f42400

08003d10 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d10:	b480      	push	{r7}
 8003d12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d14:	4b03      	ldr	r3, [pc, #12]	; (8003d24 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d16:	681b      	ldr	r3, [r3, #0]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	20000000 	.word	0x20000000

08003d28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b088      	sub	sp, #32
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003d30:	2300      	movs	r3, #0
 8003d32:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003d34:	2300      	movs	r3, #0
 8003d36:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003d40:	2300      	movs	r3, #0
 8003d42:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d012      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d50:	4b69      	ldr	r3, [pc, #420]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	4a68      	ldr	r2, [pc, #416]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d56:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003d5a:	6093      	str	r3, [r2, #8]
 8003d5c:	4b66      	ldr	r3, [pc, #408]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d5e:	689a      	ldr	r2, [r3, #8]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d64:	4964      	ldr	r1, [pc, #400]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003d72:	2301      	movs	r3, #1
 8003d74:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d017      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d82:	4b5d      	ldr	r3, [pc, #372]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d90:	4959      	ldr	r1, [pc, #356]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003da0:	d101      	bne.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003da2:	2301      	movs	r3, #1
 8003da4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003dae:	2301      	movs	r3, #1
 8003db0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d017      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003dbe:	4b4e      	ldr	r3, [pc, #312]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dc4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dcc:	494a      	ldr	r1, [pc, #296]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ddc:	d101      	bne.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003dde:	2301      	movs	r3, #1
 8003de0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003dea:	2301      	movs	r3, #1
 8003dec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0320 	and.w	r3, r3, #32
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f000 808b 	beq.w	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e0c:	4b3a      	ldr	r3, [pc, #232]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e10:	4a39      	ldr	r2, [pc, #228]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e16:	6413      	str	r3, [r2, #64]	; 0x40
 8003e18:	4b37      	ldr	r3, [pc, #220]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e20:	60bb      	str	r3, [r7, #8]
 8003e22:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e24:	4b35      	ldr	r3, [pc, #212]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a34      	ldr	r2, [pc, #208]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e30:	f7fc fea8 	bl	8000b84 <HAL_GetTick>
 8003e34:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e36:	e008      	b.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e38:	f7fc fea4 	bl	8000b84 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b64      	cmp	r3, #100	; 0x64
 8003e44:	d901      	bls.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e357      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e4a:	4b2c      	ldr	r3, [pc, #176]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d0f0      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e56:	4b28      	ldr	r3, [pc, #160]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e5e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d035      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d02e      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e74:	4b20      	ldr	r3, [pc, #128]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e7c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e7e:	4b1e      	ldr	r3, [pc, #120]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e82:	4a1d      	ldr	r2, [pc, #116]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e88:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e8a:	4b1b      	ldr	r3, [pc, #108]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8e:	4a1a      	ldr	r2, [pc, #104]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e94:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003e96:	4a18      	ldr	r2, [pc, #96]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e9c:	4b16      	ldr	r3, [pc, #88]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d114      	bne.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea8:	f7fc fe6c 	bl	8000b84 <HAL_GetTick>
 8003eac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eae:	e00a      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eb0:	f7fc fe68 	bl	8000b84 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e319      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ec6:	4b0c      	ldr	r3, [pc, #48]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d0ee      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ede:	d111      	bne.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003ee0:	4b05      	ldr	r3, [pc, #20]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003eec:	4b04      	ldr	r3, [pc, #16]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003eee:	400b      	ands	r3, r1
 8003ef0:	4901      	ldr	r1, [pc, #4]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	608b      	str	r3, [r1, #8]
 8003ef6:	e00b      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003ef8:	40023800 	.word	0x40023800
 8003efc:	40007000 	.word	0x40007000
 8003f00:	0ffffcff 	.word	0x0ffffcff
 8003f04:	4baa      	ldr	r3, [pc, #680]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	4aa9      	ldr	r2, [pc, #676]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f0a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003f0e:	6093      	str	r3, [r2, #8]
 8003f10:	4ba7      	ldr	r3, [pc, #668]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f1c:	49a4      	ldr	r1, [pc, #656]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0310 	and.w	r3, r3, #16
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d010      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f2e:	4ba0      	ldr	r3, [pc, #640]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f34:	4a9e      	ldr	r2, [pc, #632]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f3a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003f3e:	4b9c      	ldr	r3, [pc, #624]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f40:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f48:	4999      	ldr	r1, [pc, #612]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00a      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f5c:	4b94      	ldr	r3, [pc, #592]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f62:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f6a:	4991      	ldr	r1, [pc, #580]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00a      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f7e:	4b8c      	ldr	r3, [pc, #560]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f84:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f8c:	4988      	ldr	r1, [pc, #544]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00a      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fa0:	4b83      	ldr	r3, [pc, #524]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fae:	4980      	ldr	r1, [pc, #512]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00a      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003fc2:	4b7b      	ldr	r3, [pc, #492]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd0:	4977      	ldr	r1, [pc, #476]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00a      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fe4:	4b72      	ldr	r3, [pc, #456]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fea:	f023 0203 	bic.w	r2, r3, #3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff2:	496f      	ldr	r1, [pc, #444]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00a      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004006:	4b6a      	ldr	r3, [pc, #424]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400c:	f023 020c 	bic.w	r2, r3, #12
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004014:	4966      	ldr	r1, [pc, #408]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004016:	4313      	orrs	r3, r2
 8004018:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00a      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004028:	4b61      	ldr	r3, [pc, #388]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800402a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800402e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004036:	495e      	ldr	r1, [pc, #376]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004038:	4313      	orrs	r3, r2
 800403a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00a      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800404a:	4b59      	ldr	r3, [pc, #356]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800404c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004050:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004058:	4955      	ldr	r1, [pc, #340]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800405a:	4313      	orrs	r3, r2
 800405c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00a      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800406c:	4b50      	ldr	r3, [pc, #320]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800406e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004072:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800407a:	494d      	ldr	r1, [pc, #308]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800407c:	4313      	orrs	r3, r2
 800407e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00a      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800408e:	4b48      	ldr	r3, [pc, #288]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004094:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800409c:	4944      	ldr	r1, [pc, #272]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00a      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80040b0:	4b3f      	ldr	r3, [pc, #252]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040be:	493c      	ldr	r1, [pc, #240]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00a      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80040d2:	4b37      	ldr	r3, [pc, #220]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040e0:	4933      	ldr	r1, [pc, #204]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00a      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80040f4:	4b2e      	ldr	r3, [pc, #184]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040fa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004102:	492b      	ldr	r1, [pc, #172]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004104:	4313      	orrs	r3, r2
 8004106:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d011      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004116:	4b26      	ldr	r3, [pc, #152]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004124:	4922      	ldr	r1, [pc, #136]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004126:	4313      	orrs	r3, r2
 8004128:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004130:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004134:	d101      	bne.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004136:	2301      	movs	r3, #1
 8004138:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0308 	and.w	r3, r3, #8
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004146:	2301      	movs	r3, #1
 8004148:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00a      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004156:	4b16      	ldr	r3, [pc, #88]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800415c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004164:	4912      	ldr	r1, [pc, #72]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004166:	4313      	orrs	r3, r2
 8004168:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00b      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004178:	4b0d      	ldr	r3, [pc, #52]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800417a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004188:	4909      	ldr	r1, [pc, #36]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800418a:	4313      	orrs	r3, r2
 800418c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d006      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f000 80d9 	beq.w	8004356 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80041a4:	4b02      	ldr	r3, [pc, #8]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a01      	ldr	r2, [pc, #4]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041ae:	e001      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80041b0:	40023800 	.word	0x40023800
 80041b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041b6:	f7fc fce5 	bl	8000b84 <HAL_GetTick>
 80041ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041bc:	e008      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80041be:	f7fc fce1 	bl	8000b84 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	2b64      	cmp	r3, #100	; 0x64
 80041ca:	d901      	bls.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e194      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041d0:	4b6c      	ldr	r3, [pc, #432]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1f0      	bne.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0301 	and.w	r3, r3, #1
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d021      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x504>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d11d      	bne.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80041f0:	4b64      	ldr	r3, [pc, #400]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041f6:	0c1b      	lsrs	r3, r3, #16
 80041f8:	f003 0303 	and.w	r3, r3, #3
 80041fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80041fe:	4b61      	ldr	r3, [pc, #388]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004200:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004204:	0e1b      	lsrs	r3, r3, #24
 8004206:	f003 030f 	and.w	r3, r3, #15
 800420a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	019a      	lsls	r2, r3, #6
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	041b      	lsls	r3, r3, #16
 8004216:	431a      	orrs	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	061b      	lsls	r3, r3, #24
 800421c:	431a      	orrs	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	071b      	lsls	r3, r3, #28
 8004224:	4957      	ldr	r1, [pc, #348]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004226:	4313      	orrs	r3, r2
 8004228:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d004      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800423c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004240:	d00a      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800424a:	2b00      	cmp	r3, #0
 800424c:	d02e      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004256:	d129      	bne.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004258:	4b4a      	ldr	r3, [pc, #296]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800425a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800425e:	0c1b      	lsrs	r3, r3, #16
 8004260:	f003 0303 	and.w	r3, r3, #3
 8004264:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004266:	4b47      	ldr	r3, [pc, #284]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004268:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800426c:	0f1b      	lsrs	r3, r3, #28
 800426e:	f003 0307 	and.w	r3, r3, #7
 8004272:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	019a      	lsls	r2, r3, #6
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	041b      	lsls	r3, r3, #16
 800427e:	431a      	orrs	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	061b      	lsls	r3, r3, #24
 8004286:	431a      	orrs	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	071b      	lsls	r3, r3, #28
 800428c:	493d      	ldr	r1, [pc, #244]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800428e:	4313      	orrs	r3, r2
 8004290:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004294:	4b3b      	ldr	r3, [pc, #236]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004296:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800429a:	f023 021f 	bic.w	r2, r3, #31
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a2:	3b01      	subs	r3, #1
 80042a4:	4937      	ldr	r1, [pc, #220]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d01d      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80042b8:	4b32      	ldr	r3, [pc, #200]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042be:	0e1b      	lsrs	r3, r3, #24
 80042c0:	f003 030f 	and.w	r3, r3, #15
 80042c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80042c6:	4b2f      	ldr	r3, [pc, #188]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042cc:	0f1b      	lsrs	r3, r3, #28
 80042ce:	f003 0307 	and.w	r3, r3, #7
 80042d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	019a      	lsls	r2, r3, #6
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	041b      	lsls	r3, r3, #16
 80042e0:	431a      	orrs	r2, r3
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	061b      	lsls	r3, r3, #24
 80042e6:	431a      	orrs	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	071b      	lsls	r3, r3, #28
 80042ec:	4925      	ldr	r1, [pc, #148]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d011      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	019a      	lsls	r2, r3, #6
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	041b      	lsls	r3, r3, #16
 800430c:	431a      	orrs	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	061b      	lsls	r3, r3, #24
 8004314:	431a      	orrs	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	071b      	lsls	r3, r3, #28
 800431c:	4919      	ldr	r1, [pc, #100]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800431e:	4313      	orrs	r3, r2
 8004320:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004324:	4b17      	ldr	r3, [pc, #92]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a16      	ldr	r2, [pc, #88]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800432a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800432e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004330:	f7fc fc28 	bl	8000b84 <HAL_GetTick>
 8004334:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004336:	e008      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004338:	f7fc fc24 	bl	8000b84 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b64      	cmp	r3, #100	; 0x64
 8004344:	d901      	bls.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e0d7      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800434a:	4b0e      	ldr	r3, [pc, #56]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d0f0      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	2b01      	cmp	r3, #1
 800435a:	f040 80cd 	bne.w	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800435e:	4b09      	ldr	r3, [pc, #36]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a08      	ldr	r2, [pc, #32]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004364:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004368:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800436a:	f7fc fc0b 	bl	8000b84 <HAL_GetTick>
 800436e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004370:	e00a      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004372:	f7fc fc07 	bl	8000b84 <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	2b64      	cmp	r3, #100	; 0x64
 800437e:	d903      	bls.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e0ba      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004384:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004388:	4b5e      	ldr	r3, [pc, #376]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004390:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004394:	d0ed      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d003      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x682>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d009      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d02e      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d12a      	bne.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80043be:	4b51      	ldr	r3, [pc, #324]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c4:	0c1b      	lsrs	r3, r3, #16
 80043c6:	f003 0303 	and.w	r3, r3, #3
 80043ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80043cc:	4b4d      	ldr	r3, [pc, #308]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d2:	0f1b      	lsrs	r3, r3, #28
 80043d4:	f003 0307 	and.w	r3, r3, #7
 80043d8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	019a      	lsls	r2, r3, #6
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	041b      	lsls	r3, r3, #16
 80043e4:	431a      	orrs	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	061b      	lsls	r3, r3, #24
 80043ec:	431a      	orrs	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	071b      	lsls	r3, r3, #28
 80043f2:	4944      	ldr	r1, [pc, #272]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80043fa:	4b42      	ldr	r3, [pc, #264]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004400:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004408:	3b01      	subs	r3, #1
 800440a:	021b      	lsls	r3, r3, #8
 800440c:	493d      	ldr	r1, [pc, #244]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800440e:	4313      	orrs	r3, r2
 8004410:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d022      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004424:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004428:	d11d      	bne.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800442a:	4b36      	ldr	r3, [pc, #216]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800442c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004430:	0e1b      	lsrs	r3, r3, #24
 8004432:	f003 030f 	and.w	r3, r3, #15
 8004436:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004438:	4b32      	ldr	r3, [pc, #200]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800443a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800443e:	0f1b      	lsrs	r3, r3, #28
 8004440:	f003 0307 	and.w	r3, r3, #7
 8004444:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	019a      	lsls	r2, r3, #6
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a1b      	ldr	r3, [r3, #32]
 8004450:	041b      	lsls	r3, r3, #16
 8004452:	431a      	orrs	r2, r3
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	061b      	lsls	r3, r3, #24
 8004458:	431a      	orrs	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	071b      	lsls	r3, r3, #28
 800445e:	4929      	ldr	r1, [pc, #164]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004460:	4313      	orrs	r3, r2
 8004462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0308 	and.w	r3, r3, #8
 800446e:	2b00      	cmp	r3, #0
 8004470:	d028      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004472:	4b24      	ldr	r3, [pc, #144]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004478:	0e1b      	lsrs	r3, r3, #24
 800447a:	f003 030f 	and.w	r3, r3, #15
 800447e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004480:	4b20      	ldr	r3, [pc, #128]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004486:	0c1b      	lsrs	r3, r3, #16
 8004488:	f003 0303 	and.w	r3, r3, #3
 800448c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	019a      	lsls	r2, r3, #6
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	041b      	lsls	r3, r3, #16
 8004498:	431a      	orrs	r2, r3
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	061b      	lsls	r3, r3, #24
 800449e:	431a      	orrs	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	69db      	ldr	r3, [r3, #28]
 80044a4:	071b      	lsls	r3, r3, #28
 80044a6:	4917      	ldr	r1, [pc, #92]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80044ae:	4b15      	ldr	r3, [pc, #84]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044bc:	4911      	ldr	r1, [pc, #68]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80044c4:	4b0f      	ldr	r3, [pc, #60]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a0e      	ldr	r2, [pc, #56]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044d0:	f7fc fb58 	bl	8000b84 <HAL_GetTick>
 80044d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80044d6:	e008      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80044d8:	f7fc fb54 	bl	8000b84 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b64      	cmp	r3, #100	; 0x64
 80044e4:	d901      	bls.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e007      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80044ea:	4b06      	ldr	r3, [pc, #24]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044f6:	d1ef      	bne.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3720      	adds	r7, #32
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	40023800 	.word	0x40023800

08004508 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004508:	b084      	sub	sp, #16
 800450a:	b580      	push	{r7, lr}
 800450c:	b084      	sub	sp, #16
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
 8004512:	f107 001c 	add.w	r0, r7, #28
 8004516:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800451a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451c:	2b01      	cmp	r3, #1
 800451e:	d120      	bne.n	8004562 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004524:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	68da      	ldr	r2, [r3, #12]
 8004530:	4b20      	ldr	r3, [pc, #128]	; (80045b4 <USB_CoreInit+0xac>)
 8004532:	4013      	ands	r3, r2
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004546:	2b01      	cmp	r3, #1
 8004548:	d105      	bne.n	8004556 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f001 fbee 	bl	8005d38 <USB_CoreReset>
 800455c:	4603      	mov	r3, r0
 800455e:	73fb      	strb	r3, [r7, #15]
 8004560:	e010      	b.n	8004584 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f001 fbe2 	bl	8005d38 <USB_CoreReset>
 8004574:	4603      	mov	r3, r0
 8004576:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004586:	2b01      	cmp	r3, #1
 8004588:	d10b      	bne.n	80045a2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f043 0206 	orr.w	r2, r3, #6
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f043 0220 	orr.w	r2, r3, #32
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80045a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045ae:	b004      	add	sp, #16
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	ffbdffbf 	.word	0xffbdffbf

080045b8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b087      	sub	sp, #28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	4613      	mov	r3, r2
 80045c4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80045c6:	79fb      	ldrb	r3, [r7, #7]
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d165      	bne.n	8004698 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	4a41      	ldr	r2, [pc, #260]	; (80046d4 <USB_SetTurnaroundTime+0x11c>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d906      	bls.n	80045e2 <USB_SetTurnaroundTime+0x2a>
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	4a40      	ldr	r2, [pc, #256]	; (80046d8 <USB_SetTurnaroundTime+0x120>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d202      	bcs.n	80045e2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80045dc:	230f      	movs	r3, #15
 80045de:	617b      	str	r3, [r7, #20]
 80045e0:	e062      	b.n	80046a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	4a3c      	ldr	r2, [pc, #240]	; (80046d8 <USB_SetTurnaroundTime+0x120>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d306      	bcc.n	80045f8 <USB_SetTurnaroundTime+0x40>
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	4a3b      	ldr	r2, [pc, #236]	; (80046dc <USB_SetTurnaroundTime+0x124>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d202      	bcs.n	80045f8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80045f2:	230e      	movs	r3, #14
 80045f4:	617b      	str	r3, [r7, #20]
 80045f6:	e057      	b.n	80046a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	4a38      	ldr	r2, [pc, #224]	; (80046dc <USB_SetTurnaroundTime+0x124>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d306      	bcc.n	800460e <USB_SetTurnaroundTime+0x56>
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	4a37      	ldr	r2, [pc, #220]	; (80046e0 <USB_SetTurnaroundTime+0x128>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d202      	bcs.n	800460e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004608:	230d      	movs	r3, #13
 800460a:	617b      	str	r3, [r7, #20]
 800460c:	e04c      	b.n	80046a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	4a33      	ldr	r2, [pc, #204]	; (80046e0 <USB_SetTurnaroundTime+0x128>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d306      	bcc.n	8004624 <USB_SetTurnaroundTime+0x6c>
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	4a32      	ldr	r2, [pc, #200]	; (80046e4 <USB_SetTurnaroundTime+0x12c>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d802      	bhi.n	8004624 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800461e:	230c      	movs	r3, #12
 8004620:	617b      	str	r3, [r7, #20]
 8004622:	e041      	b.n	80046a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	4a2f      	ldr	r2, [pc, #188]	; (80046e4 <USB_SetTurnaroundTime+0x12c>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d906      	bls.n	800463a <USB_SetTurnaroundTime+0x82>
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	4a2e      	ldr	r2, [pc, #184]	; (80046e8 <USB_SetTurnaroundTime+0x130>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d802      	bhi.n	800463a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004634:	230b      	movs	r3, #11
 8004636:	617b      	str	r3, [r7, #20]
 8004638:	e036      	b.n	80046a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	4a2a      	ldr	r2, [pc, #168]	; (80046e8 <USB_SetTurnaroundTime+0x130>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d906      	bls.n	8004650 <USB_SetTurnaroundTime+0x98>
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	4a29      	ldr	r2, [pc, #164]	; (80046ec <USB_SetTurnaroundTime+0x134>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d802      	bhi.n	8004650 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800464a:	230a      	movs	r3, #10
 800464c:	617b      	str	r3, [r7, #20]
 800464e:	e02b      	b.n	80046a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	4a26      	ldr	r2, [pc, #152]	; (80046ec <USB_SetTurnaroundTime+0x134>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d906      	bls.n	8004666 <USB_SetTurnaroundTime+0xae>
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	4a25      	ldr	r2, [pc, #148]	; (80046f0 <USB_SetTurnaroundTime+0x138>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d202      	bcs.n	8004666 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004660:	2309      	movs	r3, #9
 8004662:	617b      	str	r3, [r7, #20]
 8004664:	e020      	b.n	80046a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	4a21      	ldr	r2, [pc, #132]	; (80046f0 <USB_SetTurnaroundTime+0x138>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d306      	bcc.n	800467c <USB_SetTurnaroundTime+0xc4>
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	4a20      	ldr	r2, [pc, #128]	; (80046f4 <USB_SetTurnaroundTime+0x13c>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d802      	bhi.n	800467c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004676:	2308      	movs	r3, #8
 8004678:	617b      	str	r3, [r7, #20]
 800467a:	e015      	b.n	80046a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	4a1d      	ldr	r2, [pc, #116]	; (80046f4 <USB_SetTurnaroundTime+0x13c>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d906      	bls.n	8004692 <USB_SetTurnaroundTime+0xda>
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	4a1c      	ldr	r2, [pc, #112]	; (80046f8 <USB_SetTurnaroundTime+0x140>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d202      	bcs.n	8004692 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800468c:	2307      	movs	r3, #7
 800468e:	617b      	str	r3, [r7, #20]
 8004690:	e00a      	b.n	80046a8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004692:	2306      	movs	r3, #6
 8004694:	617b      	str	r3, [r7, #20]
 8004696:	e007      	b.n	80046a8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004698:	79fb      	ldrb	r3, [r7, #7]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d102      	bne.n	80046a4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800469e:	2309      	movs	r3, #9
 80046a0:	617b      	str	r3, [r7, #20]
 80046a2:	e001      	b.n	80046a8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80046a4:	2309      	movs	r3, #9
 80046a6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	68da      	ldr	r2, [r3, #12]
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	029b      	lsls	r3, r3, #10
 80046bc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80046c0:	431a      	orrs	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	371c      	adds	r7, #28
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr
 80046d4:	00d8acbf 	.word	0x00d8acbf
 80046d8:	00e4e1c0 	.word	0x00e4e1c0
 80046dc:	00f42400 	.word	0x00f42400
 80046e0:	01067380 	.word	0x01067380
 80046e4:	011a499f 	.word	0x011a499f
 80046e8:	01312cff 	.word	0x01312cff
 80046ec:	014ca43f 	.word	0x014ca43f
 80046f0:	016e3600 	.word	0x016e3600
 80046f4:	01a6ab1f 	.word	0x01a6ab1f
 80046f8:	01e84800 	.word	0x01e84800

080046fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f043 0201 	orr.w	r2, r3, #1
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	370c      	adds	r7, #12
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr

0800471e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800471e:	b480      	push	{r7}
 8004720:	b083      	sub	sp, #12
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f023 0201 	bic.w	r2, r3, #1
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	460b      	mov	r3, r1
 800474a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800474c:	2300      	movs	r3, #0
 800474e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800475c:	78fb      	ldrb	r3, [r7, #3]
 800475e:	2b01      	cmp	r3, #1
 8004760:	d115      	bne.n	800478e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800476e:	2001      	movs	r0, #1
 8004770:	f7fc fa14 	bl	8000b9c <HAL_Delay>
      ms++;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	3301      	adds	r3, #1
 8004778:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f001 fa4b 	bl	8005c16 <USB_GetMode>
 8004780:	4603      	mov	r3, r0
 8004782:	2b01      	cmp	r3, #1
 8004784:	d01e      	beq.n	80047c4 <USB_SetCurrentMode+0x84>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2b31      	cmp	r3, #49	; 0x31
 800478a:	d9f0      	bls.n	800476e <USB_SetCurrentMode+0x2e>
 800478c:	e01a      	b.n	80047c4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800478e:	78fb      	ldrb	r3, [r7, #3]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d115      	bne.n	80047c0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80047a0:	2001      	movs	r0, #1
 80047a2:	f7fc f9fb 	bl	8000b9c <HAL_Delay>
      ms++;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	3301      	adds	r3, #1
 80047aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f001 fa32 	bl	8005c16 <USB_GetMode>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d005      	beq.n	80047c4 <USB_SetCurrentMode+0x84>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2b31      	cmp	r3, #49	; 0x31
 80047bc:	d9f0      	bls.n	80047a0 <USB_SetCurrentMode+0x60>
 80047be:	e001      	b.n	80047c4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e005      	b.n	80047d0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2b32      	cmp	r3, #50	; 0x32
 80047c8:	d101      	bne.n	80047ce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e000      	b.n	80047d0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047d8:	b084      	sub	sp, #16
 80047da:	b580      	push	{r7, lr}
 80047dc:	b086      	sub	sp, #24
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
 80047e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80047e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80047ea:	2300      	movs	r3, #0
 80047ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80047f2:	2300      	movs	r3, #0
 80047f4:	613b      	str	r3, [r7, #16]
 80047f6:	e009      	b.n	800480c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	3340      	adds	r3, #64	; 0x40
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	4413      	add	r3, r2
 8004802:	2200      	movs	r2, #0
 8004804:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	3301      	adds	r3, #1
 800480a:	613b      	str	r3, [r7, #16]
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	2b0e      	cmp	r3, #14
 8004810:	d9f2      	bls.n	80047f8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004814:	2b00      	cmp	r3, #0
 8004816:	d11c      	bne.n	8004852 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004826:	f043 0302 	orr.w	r3, r3, #2
 800482a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004830:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	601a      	str	r2, [r3, #0]
 8004850:	e005      	b.n	800485e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004856:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004864:	461a      	mov	r2, r3
 8004866:	2300      	movs	r3, #0
 8004868:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004870:	4619      	mov	r1, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004878:	461a      	mov	r2, r3
 800487a:	680b      	ldr	r3, [r1, #0]
 800487c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800487e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004880:	2b01      	cmp	r3, #1
 8004882:	d10c      	bne.n	800489e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004886:	2b00      	cmp	r3, #0
 8004888:	d104      	bne.n	8004894 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800488a:	2100      	movs	r1, #0
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 f965 	bl	8004b5c <USB_SetDevSpeed>
 8004892:	e008      	b.n	80048a6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004894:	2101      	movs	r1, #1
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f960 	bl	8004b5c <USB_SetDevSpeed>
 800489c:	e003      	b.n	80048a6 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800489e:	2103      	movs	r1, #3
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 f95b 	bl	8004b5c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80048a6:	2110      	movs	r1, #16
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 f8f3 	bl	8004a94 <USB_FlushTxFifo>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d001      	beq.n	80048b8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 f91f 	bl	8004afc <USB_FlushRxFifo>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d001      	beq.n	80048c8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ce:	461a      	mov	r2, r3
 80048d0:	2300      	movs	r3, #0
 80048d2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048da:	461a      	mov	r2, r3
 80048dc:	2300      	movs	r3, #0
 80048de:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048e6:	461a      	mov	r2, r3
 80048e8:	2300      	movs	r3, #0
 80048ea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048ec:	2300      	movs	r3, #0
 80048ee:	613b      	str	r3, [r7, #16]
 80048f0:	e043      	b.n	800497a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	015a      	lsls	r2, r3, #5
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	4413      	add	r3, r2
 80048fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004904:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004908:	d118      	bne.n	800493c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d10a      	bne.n	8004926 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	015a      	lsls	r2, r3, #5
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	4413      	add	r3, r2
 8004918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800491c:	461a      	mov	r2, r3
 800491e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004922:	6013      	str	r3, [r2, #0]
 8004924:	e013      	b.n	800494e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	015a      	lsls	r2, r3, #5
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	4413      	add	r3, r2
 800492e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004932:	461a      	mov	r2, r3
 8004934:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004938:	6013      	str	r3, [r2, #0]
 800493a:	e008      	b.n	800494e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	015a      	lsls	r2, r3, #5
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	4413      	add	r3, r2
 8004944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004948:	461a      	mov	r2, r3
 800494a:	2300      	movs	r3, #0
 800494c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	015a      	lsls	r2, r3, #5
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	4413      	add	r3, r2
 8004956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800495a:	461a      	mov	r2, r3
 800495c:	2300      	movs	r3, #0
 800495e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	015a      	lsls	r2, r3, #5
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	4413      	add	r3, r2
 8004968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800496c:	461a      	mov	r2, r3
 800496e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004972:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	3301      	adds	r3, #1
 8004978:	613b      	str	r3, [r7, #16]
 800497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	429a      	cmp	r2, r3
 8004980:	d3b7      	bcc.n	80048f2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004982:	2300      	movs	r3, #0
 8004984:	613b      	str	r3, [r7, #16]
 8004986:	e043      	b.n	8004a10 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	015a      	lsls	r2, r3, #5
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	4413      	add	r3, r2
 8004990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800499a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800499e:	d118      	bne.n	80049d2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10a      	bne.n	80049bc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	015a      	lsls	r2, r3, #5
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	4413      	add	r3, r2
 80049ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b2:	461a      	mov	r2, r3
 80049b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049b8:	6013      	str	r3, [r2, #0]
 80049ba:	e013      	b.n	80049e4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	015a      	lsls	r2, r3, #5
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	4413      	add	r3, r2
 80049c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c8:	461a      	mov	r2, r3
 80049ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80049ce:	6013      	str	r3, [r2, #0]
 80049d0:	e008      	b.n	80049e4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	015a      	lsls	r2, r3, #5
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	4413      	add	r3, r2
 80049da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049de:	461a      	mov	r2, r3
 80049e0:	2300      	movs	r3, #0
 80049e2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	015a      	lsls	r2, r3, #5
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	4413      	add	r3, r2
 80049ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f0:	461a      	mov	r2, r3
 80049f2:	2300      	movs	r3, #0
 80049f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	015a      	lsls	r2, r3, #5
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	4413      	add	r3, r2
 80049fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a02:	461a      	mov	r2, r3
 8004a04:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a08:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	613b      	str	r3, [r7, #16]
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d3b7      	bcc.n	8004988 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a2a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004a38:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d105      	bne.n	8004a4c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	f043 0210 	orr.w	r2, r3, #16
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	699a      	ldr	r2, [r3, #24]
 8004a50:	4b0e      	ldr	r3, [pc, #56]	; (8004a8c <USB_DevInit+0x2b4>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d005      	beq.n	8004a6a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	f043 0208 	orr.w	r2, r3, #8
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d105      	bne.n	8004a7c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	699a      	ldr	r2, [r3, #24]
 8004a74:	4b06      	ldr	r3, [pc, #24]	; (8004a90 <USB_DevInit+0x2b8>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004a7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3718      	adds	r7, #24
 8004a82:	46bd      	mov	sp, r7
 8004a84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a88:	b004      	add	sp, #16
 8004a8a:	4770      	bx	lr
 8004a8c:	803c3800 	.word	0x803c3800
 8004a90:	40000004 	.word	0x40000004

08004a94 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	4a13      	ldr	r2, [pc, #76]	; (8004af8 <USB_FlushTxFifo+0x64>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d901      	bls.n	8004ab4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e01b      	b.n	8004aec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	daf2      	bge.n	8004aa2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004abc:	2300      	movs	r3, #0
 8004abe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	019b      	lsls	r3, r3, #6
 8004ac4:	f043 0220 	orr.w	r2, r3, #32
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	3301      	adds	r3, #1
 8004ad0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	4a08      	ldr	r2, [pc, #32]	; (8004af8 <USB_FlushTxFifo+0x64>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d901      	bls.n	8004ade <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e006      	b.n	8004aec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	f003 0320 	and.w	r3, r3, #32
 8004ae6:	2b20      	cmp	r3, #32
 8004ae8:	d0f0      	beq.n	8004acc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3714      	adds	r7, #20
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr
 8004af8:	00030d40 	.word	0x00030d40

08004afc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b04:	2300      	movs	r3, #0
 8004b06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	4a11      	ldr	r2, [pc, #68]	; (8004b58 <USB_FlushRxFifo+0x5c>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d901      	bls.n	8004b1a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e018      	b.n	8004b4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	daf2      	bge.n	8004b08 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004b22:	2300      	movs	r3, #0
 8004b24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2210      	movs	r2, #16
 8004b2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	3301      	adds	r3, #1
 8004b30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	4a08      	ldr	r2, [pc, #32]	; (8004b58 <USB_FlushRxFifo+0x5c>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d901      	bls.n	8004b3e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e006      	b.n	8004b4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	f003 0310 	and.w	r3, r3, #16
 8004b46:	2b10      	cmp	r3, #16
 8004b48:	d0f0      	beq.n	8004b2c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3714      	adds	r7, #20
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr
 8004b58:	00030d40 	.word	0x00030d40

08004b5c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	460b      	mov	r3, r1
 8004b66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	78fb      	ldrb	r3, [r7, #3]
 8004b76:	68f9      	ldr	r1, [r7, #12]
 8004b78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3714      	adds	r7, #20
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr

08004b8e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004b8e:	b480      	push	{r7}
 8004b90:	b087      	sub	sp, #28
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f003 0306 	and.w	r3, r3, #6
 8004ba6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d102      	bne.n	8004bb4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	75fb      	strb	r3, [r7, #23]
 8004bb2:	e00a      	b.n	8004bca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d002      	beq.n	8004bc0 <USB_GetDevSpeed+0x32>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2b06      	cmp	r3, #6
 8004bbe:	d102      	bne.n	8004bc6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	75fb      	strb	r3, [r7, #23]
 8004bc4:	e001      	b.n	8004bca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004bc6:	230f      	movs	r3, #15
 8004bc8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004bca:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	371c      	adds	r7, #28
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	785b      	ldrb	r3, [r3, #1]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d139      	bne.n	8004c68 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bfa:	69da      	ldr	r2, [r3, #28]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	f003 030f 	and.w	r3, r3, #15
 8004c04:	2101      	movs	r1, #1
 8004c06:	fa01 f303 	lsl.w	r3, r1, r3
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	68f9      	ldr	r1, [r7, #12]
 8004c0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c12:	4313      	orrs	r3, r2
 8004c14:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	015a      	lsls	r2, r3, #5
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d153      	bne.n	8004cd4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	015a      	lsls	r2, r3, #5
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	4413      	add	r3, r2
 8004c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	791b      	ldrb	r3, [r3, #4]
 8004c46:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c48:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	059b      	lsls	r3, r3, #22
 8004c4e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c50:	431a      	orrs	r2, r3
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	0159      	lsls	r1, r3, #5
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	440b      	add	r3, r1
 8004c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c5e:	4619      	mov	r1, r3
 8004c60:	4b20      	ldr	r3, [pc, #128]	; (8004ce4 <USB_ActivateEndpoint+0x10c>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	600b      	str	r3, [r1, #0]
 8004c66:	e035      	b.n	8004cd4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c6e:	69da      	ldr	r2, [r3, #28]
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	f003 030f 	and.w	r3, r3, #15
 8004c78:	2101      	movs	r1, #1
 8004c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c7e:	041b      	lsls	r3, r3, #16
 8004c80:	68f9      	ldr	r1, [r7, #12]
 8004c82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c86:	4313      	orrs	r3, r2
 8004c88:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	015a      	lsls	r2, r3, #5
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	4413      	add	r3, r2
 8004c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d119      	bne.n	8004cd4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	015a      	lsls	r2, r3, #5
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	4413      	add	r3, r2
 8004ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	791b      	ldrb	r3, [r3, #4]
 8004cba:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004cbc:	430b      	orrs	r3, r1
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	0159      	lsls	r1, r3, #5
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	440b      	add	r3, r1
 8004cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ccc:	4619      	mov	r1, r3
 8004cce:	4b05      	ldr	r3, [pc, #20]	; (8004ce4 <USB_ActivateEndpoint+0x10c>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3714      	adds	r7, #20
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	10008000 	.word	0x10008000

08004ce8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	785b      	ldrb	r3, [r3, #1]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d161      	bne.n	8004dc8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	015a      	lsls	r2, r3, #5
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d1a:	d11f      	bne.n	8004d5c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	015a      	lsls	r2, r3, #5
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	4413      	add	r3, r2
 8004d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68ba      	ldr	r2, [r7, #8]
 8004d2c:	0151      	lsls	r1, r2, #5
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	440a      	add	r2, r1
 8004d32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d36:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d3a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	015a      	lsls	r2, r3, #5
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	4413      	add	r3, r2
 8004d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	0151      	lsls	r1, r2, #5
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	440a      	add	r2, r1
 8004d52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d5a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	f003 030f 	and.w	r3, r3, #15
 8004d6c:	2101      	movs	r1, #1
 8004d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	43db      	mvns	r3, r3
 8004d76:	68f9      	ldr	r1, [r7, #12]
 8004d78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d86:	69da      	ldr	r2, [r3, #28]
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	f003 030f 	and.w	r3, r3, #15
 8004d90:	2101      	movs	r1, #1
 8004d92:	fa01 f303 	lsl.w	r3, r1, r3
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	43db      	mvns	r3, r3
 8004d9a:	68f9      	ldr	r1, [r7, #12]
 8004d9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004da0:	4013      	ands	r3, r2
 8004da2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	015a      	lsls	r2, r3, #5
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	4413      	add	r3, r2
 8004dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	0159      	lsls	r1, r3, #5
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	440b      	add	r3, r1
 8004dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	4b35      	ldr	r3, [pc, #212]	; (8004e98 <USB_DeactivateEndpoint+0x1b0>)
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	600b      	str	r3, [r1, #0]
 8004dc6:	e060      	b.n	8004e8a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dde:	d11f      	bne.n	8004e20 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	015a      	lsls	r2, r3, #5
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	4413      	add	r3, r2
 8004de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68ba      	ldr	r2, [r7, #8]
 8004df0:	0151      	lsls	r1, r2, #5
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	440a      	add	r2, r1
 8004df6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dfa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004dfe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	015a      	lsls	r2, r3, #5
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	4413      	add	r3, r2
 8004e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68ba      	ldr	r2, [r7, #8]
 8004e10:	0151      	lsls	r1, r2, #5
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	440a      	add	r2, r1
 8004e16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e1e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	f003 030f 	and.w	r3, r3, #15
 8004e30:	2101      	movs	r1, #1
 8004e32:	fa01 f303 	lsl.w	r3, r1, r3
 8004e36:	041b      	lsls	r3, r3, #16
 8004e38:	43db      	mvns	r3, r3
 8004e3a:	68f9      	ldr	r1, [r7, #12]
 8004e3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e40:	4013      	ands	r3, r2
 8004e42:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e4a:	69da      	ldr	r2, [r3, #28]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	f003 030f 	and.w	r3, r3, #15
 8004e54:	2101      	movs	r1, #1
 8004e56:	fa01 f303 	lsl.w	r3, r1, r3
 8004e5a:	041b      	lsls	r3, r3, #16
 8004e5c:	43db      	mvns	r3, r3
 8004e5e:	68f9      	ldr	r1, [r7, #12]
 8004e60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e64:	4013      	ands	r3, r2
 8004e66:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	015a      	lsls	r2, r3, #5
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	4413      	add	r3, r2
 8004e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	0159      	lsls	r1, r3, #5
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	440b      	add	r3, r1
 8004e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e82:	4619      	mov	r1, r3
 8004e84:	4b05      	ldr	r3, [pc, #20]	; (8004e9c <USB_DeactivateEndpoint+0x1b4>)
 8004e86:	4013      	ands	r3, r2
 8004e88:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3714      	adds	r7, #20
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr
 8004e98:	ec337800 	.word	0xec337800
 8004e9c:	eff37800 	.word	0xeff37800

08004ea0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b08a      	sub	sp, #40	; 0x28
 8004ea4:	af02      	add	r7, sp, #8
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	4613      	mov	r3, r2
 8004eac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	785b      	ldrb	r3, [r3, #1]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	f040 8163 	bne.w	8005188 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d132      	bne.n	8004f30 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	015a      	lsls	r2, r3, #5
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ed6:	691a      	ldr	r2, [r3, #16]
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	0159      	lsls	r1, r3, #5
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	440b      	add	r3, r1
 8004ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	4ba5      	ldr	r3, [pc, #660]	; (800517c <USB_EPStartXfer+0x2dc>)
 8004ee8:	4013      	ands	r3, r2
 8004eea:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	015a      	lsls	r2, r3, #5
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	69ba      	ldr	r2, [r7, #24]
 8004efc:	0151      	lsls	r1, r2, #5
 8004efe:	69fa      	ldr	r2, [r7, #28]
 8004f00:	440a      	add	r2, r1
 8004f02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	015a      	lsls	r2, r3, #5
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	4413      	add	r3, r2
 8004f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f18:	691a      	ldr	r2, [r3, #16]
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	0159      	lsls	r1, r3, #5
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	440b      	add	r3, r1
 8004f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f26:	4619      	mov	r1, r3
 8004f28:	4b95      	ldr	r3, [pc, #596]	; (8005180 <USB_EPStartXfer+0x2e0>)
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	610b      	str	r3, [r1, #16]
 8004f2e:	e074      	b.n	800501a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	015a      	lsls	r2, r3, #5
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	4413      	add	r3, r2
 8004f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f3c:	691a      	ldr	r2, [r3, #16]
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	0159      	lsls	r1, r3, #5
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	440b      	add	r3, r1
 8004f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	4b8c      	ldr	r3, [pc, #560]	; (8005180 <USB_EPStartXfer+0x2e0>)
 8004f4e:	4013      	ands	r3, r2
 8004f50:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	015a      	lsls	r2, r3, #5
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	4413      	add	r3, r2
 8004f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f5e:	691a      	ldr	r2, [r3, #16]
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	0159      	lsls	r1, r3, #5
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	440b      	add	r3, r1
 8004f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	4b83      	ldr	r3, [pc, #524]	; (800517c <USB_EPStartXfer+0x2dc>)
 8004f70:	4013      	ands	r3, r2
 8004f72:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	015a      	lsls	r2, r3, #5
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f80:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	6999      	ldr	r1, [r3, #24]
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	440b      	add	r3, r1
 8004f8c:	1e59      	subs	r1, r3, #1
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f96:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004f98:	4b7a      	ldr	r3, [pc, #488]	; (8005184 <USB_EPStartXfer+0x2e4>)
 8004f9a:	400b      	ands	r3, r1
 8004f9c:	69b9      	ldr	r1, [r7, #24]
 8004f9e:	0148      	lsls	r0, r1, #5
 8004fa0:	69f9      	ldr	r1, [r7, #28]
 8004fa2:	4401      	add	r1, r0
 8004fa4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	015a      	lsls	r2, r3, #5
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb8:	691a      	ldr	r2, [r3, #16]
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fc2:	69b9      	ldr	r1, [r7, #24]
 8004fc4:	0148      	lsls	r0, r1, #5
 8004fc6:	69f9      	ldr	r1, [r7, #28]
 8004fc8:	4401      	add	r1, r0
 8004fca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	791b      	ldrb	r3, [r3, #4]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d11f      	bne.n	800501a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	015a      	lsls	r2, r3, #5
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	0151      	lsls	r1, r2, #5
 8004fec:	69fa      	ldr	r2, [r7, #28]
 8004fee:	440a      	add	r2, r1
 8004ff0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ff4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004ff8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	015a      	lsls	r2, r3, #5
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	4413      	add	r3, r2
 8005002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	0151      	lsls	r1, r2, #5
 800500c:	69fa      	ldr	r2, [r7, #28]
 800500e:	440a      	add	r2, r1
 8005010:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005014:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005018:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800501a:	79fb      	ldrb	r3, [r7, #7]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d14b      	bne.n	80050b8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	695b      	ldr	r3, [r3, #20]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d009      	beq.n	800503c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	015a      	lsls	r2, r3, #5
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	4413      	add	r3, r2
 8005030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005034:	461a      	mov	r2, r3
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	791b      	ldrb	r3, [r3, #4]
 8005040:	2b01      	cmp	r3, #1
 8005042:	d128      	bne.n	8005096 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005050:	2b00      	cmp	r3, #0
 8005052:	d110      	bne.n	8005076 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	015a      	lsls	r2, r3, #5
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	4413      	add	r3, r2
 800505c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	69ba      	ldr	r2, [r7, #24]
 8005064:	0151      	lsls	r1, r2, #5
 8005066:	69fa      	ldr	r2, [r7, #28]
 8005068:	440a      	add	r2, r1
 800506a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800506e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005072:	6013      	str	r3, [r2, #0]
 8005074:	e00f      	b.n	8005096 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	015a      	lsls	r2, r3, #5
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	4413      	add	r3, r2
 800507e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	69ba      	ldr	r2, [r7, #24]
 8005086:	0151      	lsls	r1, r2, #5
 8005088:	69fa      	ldr	r2, [r7, #28]
 800508a:	440a      	add	r2, r1
 800508c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005094:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	015a      	lsls	r2, r3, #5
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	4413      	add	r3, r2
 800509e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	69ba      	ldr	r2, [r7, #24]
 80050a6:	0151      	lsls	r1, r2, #5
 80050a8:	69fa      	ldr	r2, [r7, #28]
 80050aa:	440a      	add	r2, r1
 80050ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050b4:	6013      	str	r3, [r2, #0]
 80050b6:	e137      	b.n	8005328 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	015a      	lsls	r2, r3, #5
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	4413      	add	r3, r2
 80050c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	69ba      	ldr	r2, [r7, #24]
 80050c8:	0151      	lsls	r1, r2, #5
 80050ca:	69fa      	ldr	r2, [r7, #28]
 80050cc:	440a      	add	r2, r1
 80050ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050d6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	791b      	ldrb	r3, [r3, #4]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d015      	beq.n	800510c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f000 811f 	beq.w	8005328 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	f003 030f 	and.w	r3, r3, #15
 80050fa:	2101      	movs	r1, #1
 80050fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005100:	69f9      	ldr	r1, [r7, #28]
 8005102:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005106:	4313      	orrs	r3, r2
 8005108:	634b      	str	r3, [r1, #52]	; 0x34
 800510a:	e10d      	b.n	8005328 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005118:	2b00      	cmp	r3, #0
 800511a:	d110      	bne.n	800513e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	015a      	lsls	r2, r3, #5
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	4413      	add	r3, r2
 8005124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	69ba      	ldr	r2, [r7, #24]
 800512c:	0151      	lsls	r1, r2, #5
 800512e:	69fa      	ldr	r2, [r7, #28]
 8005130:	440a      	add	r2, r1
 8005132:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005136:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800513a:	6013      	str	r3, [r2, #0]
 800513c:	e00f      	b.n	800515e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	015a      	lsls	r2, r3, #5
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	4413      	add	r3, r2
 8005146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	69ba      	ldr	r2, [r7, #24]
 800514e:	0151      	lsls	r1, r2, #5
 8005150:	69fa      	ldr	r2, [r7, #28]
 8005152:	440a      	add	r2, r1
 8005154:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800515c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	6919      	ldr	r1, [r3, #16]
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	781a      	ldrb	r2, [r3, #0]
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	b298      	uxth	r0, r3
 800516c:	79fb      	ldrb	r3, [r7, #7]
 800516e:	9300      	str	r3, [sp, #0]
 8005170:	4603      	mov	r3, r0
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f000 faea 	bl	800574c <USB_WritePacket>
 8005178:	e0d6      	b.n	8005328 <USB_EPStartXfer+0x488>
 800517a:	bf00      	nop
 800517c:	e007ffff 	.word	0xe007ffff
 8005180:	fff80000 	.word	0xfff80000
 8005184:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	015a      	lsls	r2, r3, #5
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	4413      	add	r3, r2
 8005190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005194:	691a      	ldr	r2, [r3, #16]
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	0159      	lsls	r1, r3, #5
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	440b      	add	r3, r1
 800519e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a2:	4619      	mov	r1, r3
 80051a4:	4b63      	ldr	r3, [pc, #396]	; (8005334 <USB_EPStartXfer+0x494>)
 80051a6:	4013      	ands	r3, r2
 80051a8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	015a      	lsls	r2, r3, #5
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b6:	691a      	ldr	r2, [r3, #16]
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	0159      	lsls	r1, r3, #5
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	440b      	add	r3, r1
 80051c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c4:	4619      	mov	r1, r3
 80051c6:	4b5c      	ldr	r3, [pc, #368]	; (8005338 <USB_EPStartXfer+0x498>)
 80051c8:	4013      	ands	r3, r2
 80051ca:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d123      	bne.n	800521c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	015a      	lsls	r2, r3, #5
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e0:	691a      	ldr	r2, [r3, #16]
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051ea:	69b9      	ldr	r1, [r7, #24]
 80051ec:	0148      	lsls	r0, r1, #5
 80051ee:	69f9      	ldr	r1, [r7, #28]
 80051f0:	4401      	add	r1, r0
 80051f2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80051f6:	4313      	orrs	r3, r2
 80051f8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	015a      	lsls	r2, r3, #5
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	4413      	add	r3, r2
 8005202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	69ba      	ldr	r2, [r7, #24]
 800520a:	0151      	lsls	r1, r2, #5
 800520c:	69fa      	ldr	r2, [r7, #28]
 800520e:	440a      	add	r2, r1
 8005210:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005214:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005218:	6113      	str	r3, [r2, #16]
 800521a:	e037      	b.n	800528c <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	699a      	ldr	r2, [r3, #24]
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	4413      	add	r3, r2
 8005226:	1e5a      	subs	r2, r3, #1
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005230:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	8afa      	ldrh	r2, [r7, #22]
 8005238:	fb03 f202 	mul.w	r2, r3, r2
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	015a      	lsls	r2, r3, #5
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	4413      	add	r3, r2
 8005248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800524c:	691a      	ldr	r2, [r3, #16]
 800524e:	8afb      	ldrh	r3, [r7, #22]
 8005250:	04d9      	lsls	r1, r3, #19
 8005252:	4b3a      	ldr	r3, [pc, #232]	; (800533c <USB_EPStartXfer+0x49c>)
 8005254:	400b      	ands	r3, r1
 8005256:	69b9      	ldr	r1, [r7, #24]
 8005258:	0148      	lsls	r0, r1, #5
 800525a:	69f9      	ldr	r1, [r7, #28]
 800525c:	4401      	add	r1, r0
 800525e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005262:	4313      	orrs	r3, r2
 8005264:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	015a      	lsls	r2, r3, #5
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	4413      	add	r3, r2
 800526e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005272:	691a      	ldr	r2, [r3, #16]
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	69db      	ldr	r3, [r3, #28]
 8005278:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800527c:	69b9      	ldr	r1, [r7, #24]
 800527e:	0148      	lsls	r0, r1, #5
 8005280:	69f9      	ldr	r1, [r7, #28]
 8005282:	4401      	add	r1, r0
 8005284:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005288:	4313      	orrs	r3, r2
 800528a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800528c:	79fb      	ldrb	r3, [r7, #7]
 800528e:	2b01      	cmp	r3, #1
 8005290:	d10d      	bne.n	80052ae <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d009      	beq.n	80052ae <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	6919      	ldr	r1, [r3, #16]
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	015a      	lsls	r2, r3, #5
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	4413      	add	r3, r2
 80052a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052aa:	460a      	mov	r2, r1
 80052ac:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	791b      	ldrb	r3, [r3, #4]
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d128      	bne.n	8005308 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d110      	bne.n	80052e8 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	015a      	lsls	r2, r3, #5
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	4413      	add	r3, r2
 80052ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	69ba      	ldr	r2, [r7, #24]
 80052d6:	0151      	lsls	r1, r2, #5
 80052d8:	69fa      	ldr	r2, [r7, #28]
 80052da:	440a      	add	r2, r1
 80052dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80052e4:	6013      	str	r3, [r2, #0]
 80052e6:	e00f      	b.n	8005308 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	015a      	lsls	r2, r3, #5
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	4413      	add	r3, r2
 80052f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	69ba      	ldr	r2, [r7, #24]
 80052f8:	0151      	lsls	r1, r2, #5
 80052fa:	69fa      	ldr	r2, [r7, #28]
 80052fc:	440a      	add	r2, r1
 80052fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005306:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	015a      	lsls	r2, r3, #5
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	4413      	add	r3, r2
 8005310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	69ba      	ldr	r2, [r7, #24]
 8005318:	0151      	lsls	r1, r2, #5
 800531a:	69fa      	ldr	r2, [r7, #28]
 800531c:	440a      	add	r2, r1
 800531e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005322:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005326:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3720      	adds	r7, #32
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	fff80000 	.word	0xfff80000
 8005338:	e007ffff 	.word	0xe007ffff
 800533c:	1ff80000 	.word	0x1ff80000

08005340 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005340:	b480      	push	{r7}
 8005342:	b087      	sub	sp, #28
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	4613      	mov	r3, r2
 800534c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	785b      	ldrb	r3, [r3, #1]
 800535c:	2b01      	cmp	r3, #1
 800535e:	f040 80ce 	bne.w	80054fe <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d132      	bne.n	80053d0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	015a      	lsls	r2, r3, #5
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	4413      	add	r3, r2
 8005372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005376:	691a      	ldr	r2, [r3, #16]
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	0159      	lsls	r1, r3, #5
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	440b      	add	r3, r1
 8005380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005384:	4619      	mov	r1, r3
 8005386:	4b9a      	ldr	r3, [pc, #616]	; (80055f0 <USB_EP0StartXfer+0x2b0>)
 8005388:	4013      	ands	r3, r2
 800538a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	015a      	lsls	r2, r3, #5
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	4413      	add	r3, r2
 8005394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	693a      	ldr	r2, [r7, #16]
 800539c:	0151      	lsls	r1, r2, #5
 800539e:	697a      	ldr	r2, [r7, #20]
 80053a0:	440a      	add	r2, r1
 80053a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	015a      	lsls	r2, r3, #5
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	4413      	add	r3, r2
 80053b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053b8:	691a      	ldr	r2, [r3, #16]
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	0159      	lsls	r1, r3, #5
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	440b      	add	r3, r1
 80053c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c6:	4619      	mov	r1, r3
 80053c8:	4b8a      	ldr	r3, [pc, #552]	; (80055f4 <USB_EP0StartXfer+0x2b4>)
 80053ca:	4013      	ands	r3, r2
 80053cc:	610b      	str	r3, [r1, #16]
 80053ce:	e04e      	b.n	800546e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	015a      	lsls	r2, r3, #5
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	4413      	add	r3, r2
 80053d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053dc:	691a      	ldr	r2, [r3, #16]
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	0159      	lsls	r1, r3, #5
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	440b      	add	r3, r1
 80053e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ea:	4619      	mov	r1, r3
 80053ec:	4b81      	ldr	r3, [pc, #516]	; (80055f4 <USB_EP0StartXfer+0x2b4>)
 80053ee:	4013      	ands	r3, r2
 80053f0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	015a      	lsls	r2, r3, #5
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	4413      	add	r3, r2
 80053fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053fe:	691a      	ldr	r2, [r3, #16]
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	0159      	lsls	r1, r3, #5
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	440b      	add	r3, r1
 8005408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800540c:	4619      	mov	r1, r3
 800540e:	4b78      	ldr	r3, [pc, #480]	; (80055f0 <USB_EP0StartXfer+0x2b0>)
 8005410:	4013      	ands	r3, r2
 8005412:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	699a      	ldr	r2, [r3, #24]
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	429a      	cmp	r2, r3
 800541e:	d903      	bls.n	8005428 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	68da      	ldr	r2, [r3, #12]
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	015a      	lsls	r2, r3, #5
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	4413      	add	r3, r2
 8005430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	693a      	ldr	r2, [r7, #16]
 8005438:	0151      	lsls	r1, r2, #5
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	440a      	add	r2, r1
 800543e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005442:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005446:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	015a      	lsls	r2, r3, #5
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	4413      	add	r3, r2
 8005450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005454:	691a      	ldr	r2, [r3, #16]
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800545e:	6939      	ldr	r1, [r7, #16]
 8005460:	0148      	lsls	r0, r1, #5
 8005462:	6979      	ldr	r1, [r7, #20]
 8005464:	4401      	add	r1, r0
 8005466:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800546a:	4313      	orrs	r3, r2
 800546c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800546e:	79fb      	ldrb	r3, [r7, #7]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d11e      	bne.n	80054b2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	695b      	ldr	r3, [r3, #20]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d009      	beq.n	8005490 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	015a      	lsls	r2, r3, #5
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	4413      	add	r3, r2
 8005484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005488:	461a      	mov	r2, r3
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	015a      	lsls	r2, r3, #5
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	4413      	add	r3, r2
 8005498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	0151      	lsls	r1, r2, #5
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	440a      	add	r2, r1
 80054a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054ae:	6013      	str	r3, [r2, #0]
 80054b0:	e097      	b.n	80055e2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	015a      	lsls	r2, r3, #5
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	4413      	add	r3, r2
 80054ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	0151      	lsls	r1, r2, #5
 80054c4:	697a      	ldr	r2, [r7, #20]
 80054c6:	440a      	add	r2, r1
 80054c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054d0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f000 8083 	beq.w	80055e2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	f003 030f 	and.w	r3, r3, #15
 80054ec:	2101      	movs	r1, #1
 80054ee:	fa01 f303 	lsl.w	r3, r1, r3
 80054f2:	6979      	ldr	r1, [r7, #20]
 80054f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054f8:	4313      	orrs	r3, r2
 80054fa:	634b      	str	r3, [r1, #52]	; 0x34
 80054fc:	e071      	b.n	80055e2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	015a      	lsls	r2, r3, #5
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	4413      	add	r3, r2
 8005506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800550a:	691a      	ldr	r2, [r3, #16]
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	0159      	lsls	r1, r3, #5
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	440b      	add	r3, r1
 8005514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005518:	4619      	mov	r1, r3
 800551a:	4b36      	ldr	r3, [pc, #216]	; (80055f4 <USB_EP0StartXfer+0x2b4>)
 800551c:	4013      	ands	r3, r2
 800551e:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	015a      	lsls	r2, r3, #5
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	4413      	add	r3, r2
 8005528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800552c:	691a      	ldr	r2, [r3, #16]
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	0159      	lsls	r1, r3, #5
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	440b      	add	r3, r1
 8005536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800553a:	4619      	mov	r1, r3
 800553c:	4b2c      	ldr	r3, [pc, #176]	; (80055f0 <USB_EP0StartXfer+0x2b0>)
 800553e:	4013      	ands	r3, r2
 8005540:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d003      	beq.n	8005552 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	68da      	ldr	r2, [r3, #12]
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	68da      	ldr	r2, [r3, #12]
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	015a      	lsls	r2, r3, #5
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	4413      	add	r3, r2
 8005562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	0151      	lsls	r1, r2, #5
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	440a      	add	r2, r1
 8005570:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005574:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005578:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	015a      	lsls	r2, r3, #5
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	4413      	add	r3, r2
 8005582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005586:	691a      	ldr	r2, [r3, #16]
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	69db      	ldr	r3, [r3, #28]
 800558c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005590:	6939      	ldr	r1, [r7, #16]
 8005592:	0148      	lsls	r0, r1, #5
 8005594:	6979      	ldr	r1, [r7, #20]
 8005596:	4401      	add	r1, r0
 8005598:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800559c:	4313      	orrs	r3, r2
 800559e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80055a0:	79fb      	ldrb	r3, [r7, #7]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d10d      	bne.n	80055c2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d009      	beq.n	80055c2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	6919      	ldr	r1, [r3, #16]
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	015a      	lsls	r2, r3, #5
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	4413      	add	r3, r2
 80055ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055be:	460a      	mov	r2, r1
 80055c0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	015a      	lsls	r2, r3, #5
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	4413      	add	r3, r2
 80055ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	0151      	lsls	r1, r2, #5
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	440a      	add	r2, r1
 80055d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055e0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	371c      	adds	r7, #28
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr
 80055f0:	e007ffff 	.word	0xe007ffff
 80055f4:	fff80000 	.word	0xfff80000

080055f8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b087      	sub	sp, #28
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005602:	2300      	movs	r3, #0
 8005604:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005606:	2300      	movs	r3, #0
 8005608:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	785b      	ldrb	r3, [r3, #1]
 8005612:	2b01      	cmp	r3, #1
 8005614:	d14a      	bne.n	80056ac <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	015a      	lsls	r2, r3, #5
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	4413      	add	r3, r2
 8005620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800562a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800562e:	f040 8086 	bne.w	800573e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	015a      	lsls	r2, r3, #5
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	4413      	add	r3, r2
 800563c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	683a      	ldr	r2, [r7, #0]
 8005644:	7812      	ldrb	r2, [r2, #0]
 8005646:	0151      	lsls	r1, r2, #5
 8005648:	693a      	ldr	r2, [r7, #16]
 800564a:	440a      	add	r2, r1
 800564c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005650:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005654:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	015a      	lsls	r2, r3, #5
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	4413      	add	r3, r2
 8005660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	683a      	ldr	r2, [r7, #0]
 8005668:	7812      	ldrb	r2, [r2, #0]
 800566a:	0151      	lsls	r1, r2, #5
 800566c:	693a      	ldr	r2, [r7, #16]
 800566e:	440a      	add	r2, r1
 8005670:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005674:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005678:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	3301      	adds	r3, #1
 800567e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f242 7210 	movw	r2, #10000	; 0x2710
 8005686:	4293      	cmp	r3, r2
 8005688:	d902      	bls.n	8005690 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	75fb      	strb	r3, [r7, #23]
          break;
 800568e:	e056      	b.n	800573e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	015a      	lsls	r2, r3, #5
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	4413      	add	r3, r2
 800569a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056a8:	d0e7      	beq.n	800567a <USB_EPStopXfer+0x82>
 80056aa:	e048      	b.n	800573e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	015a      	lsls	r2, r3, #5
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	4413      	add	r3, r2
 80056b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056c4:	d13b      	bne.n	800573e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	015a      	lsls	r2, r3, #5
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	4413      	add	r3, r2
 80056d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	683a      	ldr	r2, [r7, #0]
 80056d8:	7812      	ldrb	r2, [r2, #0]
 80056da:	0151      	lsls	r1, r2, #5
 80056dc:	693a      	ldr	r2, [r7, #16]
 80056de:	440a      	add	r2, r1
 80056e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80056e8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	015a      	lsls	r2, r3, #5
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	683a      	ldr	r2, [r7, #0]
 80056fc:	7812      	ldrb	r2, [r2, #0]
 80056fe:	0151      	lsls	r1, r2, #5
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	440a      	add	r2, r1
 8005704:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005708:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800570c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	3301      	adds	r3, #1
 8005712:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f242 7210 	movw	r2, #10000	; 0x2710
 800571a:	4293      	cmp	r3, r2
 800571c:	d902      	bls.n	8005724 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	75fb      	strb	r3, [r7, #23]
          break;
 8005722:	e00c      	b.n	800573e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	015a      	lsls	r2, r3, #5
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	4413      	add	r3, r2
 800572e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005738:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800573c:	d0e7      	beq.n	800570e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800573e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005740:	4618      	mov	r0, r3
 8005742:	371c      	adds	r7, #28
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800574c:	b480      	push	{r7}
 800574e:	b089      	sub	sp, #36	; 0x24
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	4611      	mov	r1, r2
 8005758:	461a      	mov	r2, r3
 800575a:	460b      	mov	r3, r1
 800575c:	71fb      	strb	r3, [r7, #7]
 800575e:	4613      	mov	r3, r2
 8005760:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800576a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800576e:	2b00      	cmp	r3, #0
 8005770:	d123      	bne.n	80057ba <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005772:	88bb      	ldrh	r3, [r7, #4]
 8005774:	3303      	adds	r3, #3
 8005776:	089b      	lsrs	r3, r3, #2
 8005778:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800577a:	2300      	movs	r3, #0
 800577c:	61bb      	str	r3, [r7, #24]
 800577e:	e018      	b.n	80057b2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005780:	79fb      	ldrb	r3, [r7, #7]
 8005782:	031a      	lsls	r2, r3, #12
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	4413      	add	r3, r2
 8005788:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800578c:	461a      	mov	r2, r3
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	3301      	adds	r3, #1
 8005798:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	3301      	adds	r3, #1
 800579e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	3301      	adds	r3, #1
 80057a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	3301      	adds	r3, #1
 80057aa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	3301      	adds	r3, #1
 80057b0:	61bb      	str	r3, [r7, #24]
 80057b2:	69ba      	ldr	r2, [r7, #24]
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d3e2      	bcc.n	8005780 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3724      	adds	r7, #36	; 0x24
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b08b      	sub	sp, #44	; 0x2c
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	4613      	mov	r3, r2
 80057d4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80057de:	88fb      	ldrh	r3, [r7, #6]
 80057e0:	089b      	lsrs	r3, r3, #2
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80057e6:	88fb      	ldrh	r3, [r7, #6]
 80057e8:	f003 0303 	and.w	r3, r3, #3
 80057ec:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80057ee:	2300      	movs	r3, #0
 80057f0:	623b      	str	r3, [r7, #32]
 80057f2:	e014      	b.n	800581e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fe:	601a      	str	r2, [r3, #0]
    pDest++;
 8005800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005802:	3301      	adds	r3, #1
 8005804:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005808:	3301      	adds	r3, #1
 800580a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800580c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580e:	3301      	adds	r3, #1
 8005810:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005814:	3301      	adds	r3, #1
 8005816:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005818:	6a3b      	ldr	r3, [r7, #32]
 800581a:	3301      	adds	r3, #1
 800581c:	623b      	str	r3, [r7, #32]
 800581e:	6a3a      	ldr	r2, [r7, #32]
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	429a      	cmp	r2, r3
 8005824:	d3e6      	bcc.n	80057f4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005826:	8bfb      	ldrh	r3, [r7, #30]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d01e      	beq.n	800586a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800582c:	2300      	movs	r3, #0
 800582e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005836:	461a      	mov	r2, r3
 8005838:	f107 0310 	add.w	r3, r7, #16
 800583c:	6812      	ldr	r2, [r2, #0]
 800583e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	6a3b      	ldr	r3, [r7, #32]
 8005844:	b2db      	uxtb	r3, r3
 8005846:	00db      	lsls	r3, r3, #3
 8005848:	fa22 f303 	lsr.w	r3, r2, r3
 800584c:	b2da      	uxtb	r2, r3
 800584e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005850:	701a      	strb	r2, [r3, #0]
      i++;
 8005852:	6a3b      	ldr	r3, [r7, #32]
 8005854:	3301      	adds	r3, #1
 8005856:	623b      	str	r3, [r7, #32]
      pDest++;
 8005858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585a:	3301      	adds	r3, #1
 800585c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800585e:	8bfb      	ldrh	r3, [r7, #30]
 8005860:	3b01      	subs	r3, #1
 8005862:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005864:	8bfb      	ldrh	r3, [r7, #30]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1ea      	bne.n	8005840 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800586a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800586c:	4618      	mov	r0, r3
 800586e:	372c      	adds	r7, #44	; 0x2c
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	785b      	ldrb	r3, [r3, #1]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d12c      	bne.n	80058ee <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	015a      	lsls	r2, r3, #5
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	4413      	add	r3, r2
 800589c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	db12      	blt.n	80058cc <USB_EPSetStall+0x54>
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00f      	beq.n	80058cc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	015a      	lsls	r2, r3, #5
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	4413      	add	r3, r2
 80058b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68ba      	ldr	r2, [r7, #8]
 80058bc:	0151      	lsls	r1, r2, #5
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	440a      	add	r2, r1
 80058c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80058ca:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	015a      	lsls	r2, r3, #5
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	4413      	add	r3, r2
 80058d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	0151      	lsls	r1, r2, #5
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	440a      	add	r2, r1
 80058e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80058ea:	6013      	str	r3, [r2, #0]
 80058ec:	e02b      	b.n	8005946 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	015a      	lsls	r2, r3, #5
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	4413      	add	r3, r2
 80058f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	db12      	blt.n	8005926 <USB_EPSetStall+0xae>
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00f      	beq.n	8005926 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	015a      	lsls	r2, r3, #5
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	4413      	add	r3, r2
 800590e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68ba      	ldr	r2, [r7, #8]
 8005916:	0151      	lsls	r1, r2, #5
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	440a      	add	r2, r1
 800591c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005920:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005924:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	015a      	lsls	r2, r3, #5
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	4413      	add	r3, r2
 800592e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68ba      	ldr	r2, [r7, #8]
 8005936:	0151      	lsls	r1, r2, #5
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	440a      	add	r2, r1
 800593c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005940:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005944:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3714      	adds	r7, #20
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005954:	b480      	push	{r7}
 8005956:	b085      	sub	sp, #20
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	785b      	ldrb	r3, [r3, #1]
 800596c:	2b01      	cmp	r3, #1
 800596e:	d128      	bne.n	80059c2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	015a      	lsls	r2, r3, #5
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	4413      	add	r3, r2
 8005978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68ba      	ldr	r2, [r7, #8]
 8005980:	0151      	lsls	r1, r2, #5
 8005982:	68fa      	ldr	r2, [r7, #12]
 8005984:	440a      	add	r2, r1
 8005986:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800598a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800598e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	791b      	ldrb	r3, [r3, #4]
 8005994:	2b03      	cmp	r3, #3
 8005996:	d003      	beq.n	80059a0 <USB_EPClearStall+0x4c>
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	791b      	ldrb	r3, [r3, #4]
 800599c:	2b02      	cmp	r3, #2
 800599e:	d138      	bne.n	8005a12 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	015a      	lsls	r2, r3, #5
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	4413      	add	r3, r2
 80059a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68ba      	ldr	r2, [r7, #8]
 80059b0:	0151      	lsls	r1, r2, #5
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	440a      	add	r2, r1
 80059b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059be:	6013      	str	r3, [r2, #0]
 80059c0:	e027      	b.n	8005a12 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	015a      	lsls	r2, r3, #5
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	4413      	add	r3, r2
 80059ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	0151      	lsls	r1, r2, #5
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	440a      	add	r2, r1
 80059d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80059e0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	791b      	ldrb	r3, [r3, #4]
 80059e6:	2b03      	cmp	r3, #3
 80059e8:	d003      	beq.n	80059f2 <USB_EPClearStall+0x9e>
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	791b      	ldrb	r3, [r3, #4]
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d10f      	bne.n	8005a12 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	015a      	lsls	r2, r3, #5
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	4413      	add	r3, r2
 80059fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68ba      	ldr	r2, [r7, #8]
 8005a02:	0151      	lsls	r1, r2, #5
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	440a      	add	r2, r1
 8005a08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a10:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3714      	adds	r7, #20
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	460b      	mov	r3, r1
 8005a2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a3e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005a42:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	78fb      	ldrb	r3, [r7, #3]
 8005a4e:	011b      	lsls	r3, r3, #4
 8005a50:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005a54:	68f9      	ldr	r1, [r7, #12]
 8005a56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3714      	adds	r7, #20
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005a86:	f023 0303 	bic.w	r3, r3, #3
 8005a8a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a9a:	f023 0302 	bic.w	r3, r3, #2
 8005a9e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3714      	adds	r7, #20
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr

08005aae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005aae:	b480      	push	{r7}
 8005ab0:	b085      	sub	sp, #20
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005ac8:	f023 0303 	bic.w	r3, r3, #3
 8005acc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005adc:	f043 0302 	orr.w	r3, r3, #2
 8005ae0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3714      	adds	r7, #20
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	695b      	ldr	r3, [r3, #20]
 8005afc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	699b      	ldr	r3, [r3, #24]
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	4013      	ands	r3, r2
 8005b06:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005b08:	68fb      	ldr	r3, [r7, #12]
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3714      	adds	r7, #20
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr

08005b16 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b16:	b480      	push	{r7}
 8005b18:	b085      	sub	sp, #20
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b28:	699b      	ldr	r3, [r3, #24]
 8005b2a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b32:	69db      	ldr	r3, [r3, #28]
 8005b34:	68ba      	ldr	r2, [r7, #8]
 8005b36:	4013      	ands	r3, r2
 8005b38:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	0c1b      	lsrs	r3, r3, #16
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3714      	adds	r7, #20
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr

08005b4a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	b085      	sub	sp, #20
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b66:	69db      	ldr	r3, [r3, #28]
 8005b68:	68ba      	ldr	r2, [r7, #8]
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	b29b      	uxth	r3, r3
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3714      	adds	r7, #20
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr

08005b7e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005b7e:	b480      	push	{r7}
 8005b80:	b085      	sub	sp, #20
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
 8005b86:	460b      	mov	r3, r1
 8005b88:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005b8e:	78fb      	ldrb	r3, [r7, #3]
 8005b90:	015a      	lsls	r2, r3, #5
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	4413      	add	r3, r2
 8005b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	68ba      	ldr	r2, [r7, #8]
 8005ba8:	4013      	ands	r3, r2
 8005baa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005bac:	68bb      	ldr	r3, [r7, #8]
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr

08005bba <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005bba:	b480      	push	{r7}
 8005bbc:	b087      	sub	sp, #28
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bdc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005bde:	78fb      	ldrb	r3, [r7, #3]
 8005be0:	f003 030f 	and.w	r3, r3, #15
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	fa22 f303 	lsr.w	r3, r2, r3
 8005bea:	01db      	lsls	r3, r3, #7
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	693a      	ldr	r2, [r7, #16]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005bf4:	78fb      	ldrb	r3, [r7, #3]
 8005bf6:	015a      	lsls	r2, r3, #5
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	693a      	ldr	r2, [r7, #16]
 8005c04:	4013      	ands	r3, r2
 8005c06:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005c08:	68bb      	ldr	r3, [r7, #8]
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	371c      	adds	r7, #28
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr

08005c16 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005c16:	b480      	push	{r7}
 8005c18:	b083      	sub	sp, #12
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	695b      	ldr	r3, [r3, #20]
 8005c22:	f003 0301 	and.w	r3, r3, #1
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	370c      	adds	r7, #12
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr
	...

08005c34 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b085      	sub	sp, #20
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c4e:	4619      	mov	r1, r3
 8005c50:	4b09      	ldr	r3, [pc, #36]	; (8005c78 <USB_ActivateSetup+0x44>)
 8005c52:	4013      	ands	r3, r2
 8005c54:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c68:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3714      	adds	r7, #20
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr
 8005c78:	fffff800 	.word	0xfffff800

08005c7c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b087      	sub	sp, #28
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	460b      	mov	r3, r1
 8005c86:	607a      	str	r2, [r7, #4]
 8005c88:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	333c      	adds	r3, #60	; 0x3c
 8005c92:	3304      	adds	r3, #4
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	4a26      	ldr	r2, [pc, #152]	; (8005d34 <USB_EP0_OutStart+0xb8>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d90a      	bls.n	8005cb6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cb0:	d101      	bne.n	8005cb6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	e037      	b.n	8005d26 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cd0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cd4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	697a      	ldr	r2, [r7, #20]
 8005ce0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ce4:	f043 0318 	orr.w	r3, r3, #24
 8005ce8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cf8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005cfc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005cfe:	7afb      	ldrb	r3, [r7, #11]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d10f      	bne.n	8005d24 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d1e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005d22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	371c      	adds	r7, #28
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	4f54300a 	.word	0x4f54300a

08005d38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d40:	2300      	movs	r3, #0
 8005d42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	3301      	adds	r3, #1
 8005d48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	4a13      	ldr	r2, [pc, #76]	; (8005d9c <USB_CoreReset+0x64>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d901      	bls.n	8005d56 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e01b      	b.n	8005d8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	daf2      	bge.n	8005d44 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	f043 0201 	orr.w	r2, r3, #1
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	3301      	adds	r3, #1
 8005d72:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	4a09      	ldr	r2, [pc, #36]	; (8005d9c <USB_CoreReset+0x64>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d901      	bls.n	8005d80 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e006      	b.n	8005d8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	f003 0301 	and.w	r3, r3, #1
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d0f0      	beq.n	8005d6e <USB_CoreReset+0x36>

  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3714      	adds	r7, #20
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	00030d40 	.word	0x00030d40

08005da0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	460b      	mov	r3, r1
 8005daa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005dac:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005db0:	f002 fcfe 	bl	80087b0 <malloc>
 8005db4:	4603      	mov	r3, r0
 8005db6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d109      	bne.n	8005dd2 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	32b0      	adds	r2, #176	; 0xb0
 8005dc8:	2100      	movs	r1, #0
 8005dca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005dce:	2302      	movs	r3, #2
 8005dd0:	e0d4      	b.n	8005f7c <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005dd2:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005dd6:	2100      	movs	r1, #0
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f002 fda5 	bl	8008928 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	32b0      	adds	r2, #176	; 0xb0
 8005de8:	68f9      	ldr	r1, [r7, #12]
 8005dea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	32b0      	adds	r2, #176	; 0xb0
 8005df8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	7c1b      	ldrb	r3, [r3, #16]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d138      	bne.n	8005e7c <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005e0a:	4b5e      	ldr	r3, [pc, #376]	; (8005f84 <USBD_CDC_Init+0x1e4>)
 8005e0c:	7819      	ldrb	r1, [r3, #0]
 8005e0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e12:	2202      	movs	r2, #2
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f002 fb28 	bl	800846a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005e1a:	4b5a      	ldr	r3, [pc, #360]	; (8005f84 <USBD_CDC_Init+0x1e4>)
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	f003 020f 	and.w	r2, r3, #15
 8005e22:	6879      	ldr	r1, [r7, #4]
 8005e24:	4613      	mov	r3, r2
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	4413      	add	r3, r2
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	440b      	add	r3, r1
 8005e2e:	3324      	adds	r3, #36	; 0x24
 8005e30:	2201      	movs	r2, #1
 8005e32:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005e34:	4b54      	ldr	r3, [pc, #336]	; (8005f88 <USBD_CDC_Init+0x1e8>)
 8005e36:	7819      	ldrb	r1, [r3, #0]
 8005e38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e3c:	2202      	movs	r2, #2
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f002 fb13 	bl	800846a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005e44:	4b50      	ldr	r3, [pc, #320]	; (8005f88 <USBD_CDC_Init+0x1e8>)
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	f003 020f 	and.w	r2, r3, #15
 8005e4c:	6879      	ldr	r1, [r7, #4]
 8005e4e:	4613      	mov	r3, r2
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	4413      	add	r3, r2
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	440b      	add	r3, r1
 8005e58:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005e60:	4b4a      	ldr	r3, [pc, #296]	; (8005f8c <USBD_CDC_Init+0x1ec>)
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	f003 020f 	and.w	r2, r3, #15
 8005e68:	6879      	ldr	r1, [r7, #4]
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	4413      	add	r3, r2
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	440b      	add	r3, r1
 8005e74:	3326      	adds	r3, #38	; 0x26
 8005e76:	2210      	movs	r2, #16
 8005e78:	801a      	strh	r2, [r3, #0]
 8005e7a:	e035      	b.n	8005ee8 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005e7c:	4b41      	ldr	r3, [pc, #260]	; (8005f84 <USBD_CDC_Init+0x1e4>)
 8005e7e:	7819      	ldrb	r1, [r3, #0]
 8005e80:	2340      	movs	r3, #64	; 0x40
 8005e82:	2202      	movs	r2, #2
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f002 faf0 	bl	800846a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005e8a:	4b3e      	ldr	r3, [pc, #248]	; (8005f84 <USBD_CDC_Init+0x1e4>)
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	f003 020f 	and.w	r2, r3, #15
 8005e92:	6879      	ldr	r1, [r7, #4]
 8005e94:	4613      	mov	r3, r2
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	4413      	add	r3, r2
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	440b      	add	r3, r1
 8005e9e:	3324      	adds	r3, #36	; 0x24
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005ea4:	4b38      	ldr	r3, [pc, #224]	; (8005f88 <USBD_CDC_Init+0x1e8>)
 8005ea6:	7819      	ldrb	r1, [r3, #0]
 8005ea8:	2340      	movs	r3, #64	; 0x40
 8005eaa:	2202      	movs	r2, #2
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f002 fadc 	bl	800846a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005eb2:	4b35      	ldr	r3, [pc, #212]	; (8005f88 <USBD_CDC_Init+0x1e8>)
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	f003 020f 	and.w	r2, r3, #15
 8005eba:	6879      	ldr	r1, [r7, #4]
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	4413      	add	r3, r2
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	440b      	add	r3, r1
 8005ec6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005eca:	2201      	movs	r2, #1
 8005ecc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005ece:	4b2f      	ldr	r3, [pc, #188]	; (8005f8c <USBD_CDC_Init+0x1ec>)
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	f003 020f 	and.w	r2, r3, #15
 8005ed6:	6879      	ldr	r1, [r7, #4]
 8005ed8:	4613      	mov	r3, r2
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	4413      	add	r3, r2
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	440b      	add	r3, r1
 8005ee2:	3326      	adds	r3, #38	; 0x26
 8005ee4:	2210      	movs	r2, #16
 8005ee6:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005ee8:	4b28      	ldr	r3, [pc, #160]	; (8005f8c <USBD_CDC_Init+0x1ec>)
 8005eea:	7819      	ldrb	r1, [r3, #0]
 8005eec:	2308      	movs	r3, #8
 8005eee:	2203      	movs	r2, #3
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f002 faba 	bl	800846a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005ef6:	4b25      	ldr	r3, [pc, #148]	; (8005f8c <USBD_CDC_Init+0x1ec>)
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	f003 020f 	and.w	r2, r3, #15
 8005efe:	6879      	ldr	r1, [r7, #4]
 8005f00:	4613      	mov	r3, r2
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	4413      	add	r3, r2
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	440b      	add	r3, r1
 8005f0a:	3324      	adds	r3, #36	; 0x24
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	33b0      	adds	r3, #176	; 0xb0
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4413      	add	r3, r2
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d101      	bne.n	8005f4a <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 8005f46:	2302      	movs	r3, #2
 8005f48:	e018      	b.n	8005f7c <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	7c1b      	ldrb	r3, [r3, #16]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d10a      	bne.n	8005f68 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005f52:	4b0d      	ldr	r3, [pc, #52]	; (8005f88 <USBD_CDC_Init+0x1e8>)
 8005f54:	7819      	ldrb	r1, [r3, #0]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f002 fb71 	bl	8008648 <USBD_LL_PrepareReceive>
 8005f66:	e008      	b.n	8005f7a <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005f68:	4b07      	ldr	r3, [pc, #28]	; (8005f88 <USBD_CDC_Init+0x1e8>)
 8005f6a:	7819      	ldrb	r1, [r3, #0]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f72:	2340      	movs	r3, #64	; 0x40
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f002 fb67 	bl	8008648 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3710      	adds	r7, #16
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	20000093 	.word	0x20000093
 8005f88:	20000094 	.word	0x20000094
 8005f8c:	20000095 	.word	0x20000095

08005f90 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b082      	sub	sp, #8
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	460b      	mov	r3, r1
 8005f9a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005f9c:	4b3a      	ldr	r3, [pc, #232]	; (8006088 <USBD_CDC_DeInit+0xf8>)
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f002 fa87 	bl	80084b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005fa8:	4b37      	ldr	r3, [pc, #220]	; (8006088 <USBD_CDC_DeInit+0xf8>)
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	f003 020f 	and.w	r2, r3, #15
 8005fb0:	6879      	ldr	r1, [r7, #4]
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	4413      	add	r3, r2
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	440b      	add	r3, r1
 8005fbc:	3324      	adds	r3, #36	; 0x24
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005fc2:	4b32      	ldr	r3, [pc, #200]	; (800608c <USBD_CDC_DeInit+0xfc>)
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f002 fa74 	bl	80084b6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005fce:	4b2f      	ldr	r3, [pc, #188]	; (800608c <USBD_CDC_DeInit+0xfc>)
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	f003 020f 	and.w	r2, r3, #15
 8005fd6:	6879      	ldr	r1, [r7, #4]
 8005fd8:	4613      	mov	r3, r2
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	4413      	add	r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	440b      	add	r3, r1
 8005fe2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005fea:	4b29      	ldr	r3, [pc, #164]	; (8006090 <USBD_CDC_DeInit+0x100>)
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	4619      	mov	r1, r3
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f002 fa60 	bl	80084b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005ff6:	4b26      	ldr	r3, [pc, #152]	; (8006090 <USBD_CDC_DeInit+0x100>)
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	f003 020f 	and.w	r2, r3, #15
 8005ffe:	6879      	ldr	r1, [r7, #4]
 8006000:	4613      	mov	r3, r2
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	4413      	add	r3, r2
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	440b      	add	r3, r1
 800600a:	3324      	adds	r3, #36	; 0x24
 800600c:	2200      	movs	r2, #0
 800600e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006010:	4b1f      	ldr	r3, [pc, #124]	; (8006090 <USBD_CDC_DeInit+0x100>)
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	f003 020f 	and.w	r2, r3, #15
 8006018:	6879      	ldr	r1, [r7, #4]
 800601a:	4613      	mov	r3, r2
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	4413      	add	r3, r2
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	440b      	add	r3, r1
 8006024:	3326      	adds	r3, #38	; 0x26
 8006026:	2200      	movs	r2, #0
 8006028:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	32b0      	adds	r2, #176	; 0xb0
 8006034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d01f      	beq.n	800607c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	33b0      	adds	r3, #176	; 0xb0
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	4413      	add	r3, r2
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	32b0      	adds	r2, #176	; 0xb0
 800605a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800605e:	4618      	mov	r0, r3
 8006060:	f002 fbae 	bl	80087c0 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	32b0      	adds	r2, #176	; 0xb0
 800606e:	2100      	movs	r1, #0
 8006070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3708      	adds	r7, #8
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	20000093 	.word	0x20000093
 800608c:	20000094 	.word	0x20000094
 8006090:	20000095 	.word	0x20000095

08006094 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b086      	sub	sp, #24
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	32b0      	adds	r2, #176	; 0xb0
 80060a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ac:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80060ae:	2300      	movs	r3, #0
 80060b0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80060b2:	2300      	movs	r3, #0
 80060b4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80060b6:	2300      	movs	r3, #0
 80060b8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d101      	bne.n	80060c4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80060c0:	2303      	movs	r3, #3
 80060c2:	e0bf      	b.n	8006244 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d050      	beq.n	8006172 <USBD_CDC_Setup+0xde>
 80060d0:	2b20      	cmp	r3, #32
 80060d2:	f040 80af 	bne.w	8006234 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	88db      	ldrh	r3, [r3, #6]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d03a      	beq.n	8006154 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	b25b      	sxtb	r3, r3
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	da1b      	bge.n	8006120 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	33b0      	adds	r3, #176	; 0xb0
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	4413      	add	r3, r2
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80060fe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006100:	683a      	ldr	r2, [r7, #0]
 8006102:	88d2      	ldrh	r2, [r2, #6]
 8006104:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	88db      	ldrh	r3, [r3, #6]
 800610a:	2b07      	cmp	r3, #7
 800610c:	bf28      	it	cs
 800610e:	2307      	movcs	r3, #7
 8006110:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	89fa      	ldrh	r2, [r7, #14]
 8006116:	4619      	mov	r1, r3
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f001 fd6d 	bl	8007bf8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800611e:	e090      	b.n	8006242 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	785a      	ldrb	r2, [r3, #1]
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	88db      	ldrh	r3, [r3, #6]
 800612e:	2b3f      	cmp	r3, #63	; 0x3f
 8006130:	d803      	bhi.n	800613a <USBD_CDC_Setup+0xa6>
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	88db      	ldrh	r3, [r3, #6]
 8006136:	b2da      	uxtb	r2, r3
 8006138:	e000      	b.n	800613c <USBD_CDC_Setup+0xa8>
 800613a:	2240      	movs	r2, #64	; 0x40
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006142:	6939      	ldr	r1, [r7, #16]
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800614a:	461a      	mov	r2, r3
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f001 fd7f 	bl	8007c50 <USBD_CtlPrepareRx>
      break;
 8006152:	e076      	b.n	8006242 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	33b0      	adds	r3, #176	; 0xb0
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4413      	add	r3, r2
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	683a      	ldr	r2, [r7, #0]
 8006168:	7850      	ldrb	r0, [r2, #1]
 800616a:	2200      	movs	r2, #0
 800616c:	6839      	ldr	r1, [r7, #0]
 800616e:	4798      	blx	r3
      break;
 8006170:	e067      	b.n	8006242 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	785b      	ldrb	r3, [r3, #1]
 8006176:	2b0b      	cmp	r3, #11
 8006178:	d851      	bhi.n	800621e <USBD_CDC_Setup+0x18a>
 800617a:	a201      	add	r2, pc, #4	; (adr r2, 8006180 <USBD_CDC_Setup+0xec>)
 800617c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006180:	080061b1 	.word	0x080061b1
 8006184:	0800622d 	.word	0x0800622d
 8006188:	0800621f 	.word	0x0800621f
 800618c:	0800621f 	.word	0x0800621f
 8006190:	0800621f 	.word	0x0800621f
 8006194:	0800621f 	.word	0x0800621f
 8006198:	0800621f 	.word	0x0800621f
 800619c:	0800621f 	.word	0x0800621f
 80061a0:	0800621f 	.word	0x0800621f
 80061a4:	0800621f 	.word	0x0800621f
 80061a8:	080061db 	.word	0x080061db
 80061ac:	08006205 	.word	0x08006205
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	2b03      	cmp	r3, #3
 80061ba:	d107      	bne.n	80061cc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80061bc:	f107 030a 	add.w	r3, r7, #10
 80061c0:	2202      	movs	r2, #2
 80061c2:	4619      	mov	r1, r3
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f001 fd17 	bl	8007bf8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80061ca:	e032      	b.n	8006232 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80061cc:	6839      	ldr	r1, [r7, #0]
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f001 fca1 	bl	8007b16 <USBD_CtlError>
            ret = USBD_FAIL;
 80061d4:	2303      	movs	r3, #3
 80061d6:	75fb      	strb	r3, [r7, #23]
          break;
 80061d8:	e02b      	b.n	8006232 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	2b03      	cmp	r3, #3
 80061e4:	d107      	bne.n	80061f6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80061e6:	f107 030d 	add.w	r3, r7, #13
 80061ea:	2201      	movs	r2, #1
 80061ec:	4619      	mov	r1, r3
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f001 fd02 	bl	8007bf8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80061f4:	e01d      	b.n	8006232 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80061f6:	6839      	ldr	r1, [r7, #0]
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f001 fc8c 	bl	8007b16 <USBD_CtlError>
            ret = USBD_FAIL;
 80061fe:	2303      	movs	r3, #3
 8006200:	75fb      	strb	r3, [r7, #23]
          break;
 8006202:	e016      	b.n	8006232 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800620a:	b2db      	uxtb	r3, r3
 800620c:	2b03      	cmp	r3, #3
 800620e:	d00f      	beq.n	8006230 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006210:	6839      	ldr	r1, [r7, #0]
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f001 fc7f 	bl	8007b16 <USBD_CtlError>
            ret = USBD_FAIL;
 8006218:	2303      	movs	r3, #3
 800621a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800621c:	e008      	b.n	8006230 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800621e:	6839      	ldr	r1, [r7, #0]
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f001 fc78 	bl	8007b16 <USBD_CtlError>
          ret = USBD_FAIL;
 8006226:	2303      	movs	r3, #3
 8006228:	75fb      	strb	r3, [r7, #23]
          break;
 800622a:	e002      	b.n	8006232 <USBD_CDC_Setup+0x19e>
          break;
 800622c:	bf00      	nop
 800622e:	e008      	b.n	8006242 <USBD_CDC_Setup+0x1ae>
          break;
 8006230:	bf00      	nop
      }
      break;
 8006232:	e006      	b.n	8006242 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006234:	6839      	ldr	r1, [r7, #0]
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f001 fc6d 	bl	8007b16 <USBD_CtlError>
      ret = USBD_FAIL;
 800623c:	2303      	movs	r3, #3
 800623e:	75fb      	strb	r3, [r7, #23]
      break;
 8006240:	bf00      	nop
  }

  return (uint8_t)ret;
 8006242:	7dfb      	ldrb	r3, [r7, #23]
}
 8006244:	4618      	mov	r0, r3
 8006246:	3718      	adds	r7, #24
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	460b      	mov	r3, r1
 8006256:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800625e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	32b0      	adds	r2, #176	; 0xb0
 800626a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d101      	bne.n	8006276 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006272:	2303      	movs	r3, #3
 8006274:	e065      	b.n	8006342 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	32b0      	adds	r2, #176	; 0xb0
 8006280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006284:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006286:	78fb      	ldrb	r3, [r7, #3]
 8006288:	f003 020f 	and.w	r2, r3, #15
 800628c:	6879      	ldr	r1, [r7, #4]
 800628e:	4613      	mov	r3, r2
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	4413      	add	r3, r2
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	440b      	add	r3, r1
 8006298:	3318      	adds	r3, #24
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d02f      	beq.n	8006300 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80062a0:	78fb      	ldrb	r3, [r7, #3]
 80062a2:	f003 020f 	and.w	r2, r3, #15
 80062a6:	6879      	ldr	r1, [r7, #4]
 80062a8:	4613      	mov	r3, r2
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	4413      	add	r3, r2
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	440b      	add	r3, r1
 80062b2:	3318      	adds	r3, #24
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	78fb      	ldrb	r3, [r7, #3]
 80062b8:	f003 010f 	and.w	r1, r3, #15
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	460b      	mov	r3, r1
 80062c0:	00db      	lsls	r3, r3, #3
 80062c2:	440b      	add	r3, r1
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	4403      	add	r3, r0
 80062c8:	3348      	adds	r3, #72	; 0x48
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	fbb2 f1f3 	udiv	r1, r2, r3
 80062d0:	fb01 f303 	mul.w	r3, r1, r3
 80062d4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d112      	bne.n	8006300 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80062da:	78fb      	ldrb	r3, [r7, #3]
 80062dc:	f003 020f 	and.w	r2, r3, #15
 80062e0:	6879      	ldr	r1, [r7, #4]
 80062e2:	4613      	mov	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4413      	add	r3, r2
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	440b      	add	r3, r1
 80062ec:	3318      	adds	r3, #24
 80062ee:	2200      	movs	r2, #0
 80062f0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80062f2:	78f9      	ldrb	r1, [r7, #3]
 80062f4:	2300      	movs	r3, #0
 80062f6:	2200      	movs	r2, #0
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f002 f984 	bl	8008606 <USBD_LL_Transmit>
 80062fe:	e01f      	b.n	8006340 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	2200      	movs	r2, #0
 8006304:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	33b0      	adds	r3, #176	; 0xb0
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	4413      	add	r3, r2
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d010      	beq.n	8006340 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	33b0      	adds	r3, #176	; 0xb0
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4413      	add	r3, r2
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	691b      	ldr	r3, [r3, #16]
 8006330:	68ba      	ldr	r2, [r7, #8]
 8006332:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006336:	68ba      	ldr	r2, [r7, #8]
 8006338:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800633c:	78fa      	ldrb	r2, [r7, #3]
 800633e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3710      	adds	r7, #16
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}

0800634a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800634a:	b580      	push	{r7, lr}
 800634c:	b084      	sub	sp, #16
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
 8006352:	460b      	mov	r3, r1
 8006354:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	32b0      	adds	r2, #176	; 0xb0
 8006360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006364:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	32b0      	adds	r2, #176	; 0xb0
 8006370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d101      	bne.n	800637c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006378:	2303      	movs	r3, #3
 800637a:	e01a      	b.n	80063b2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800637c:	78fb      	ldrb	r3, [r7, #3]
 800637e:	4619      	mov	r1, r3
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f002 f982 	bl	800868a <USBD_LL_GetRxDataSize>
 8006386:	4602      	mov	r2, r0
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	33b0      	adds	r3, #176	; 0xb0
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	4413      	add	r3, r2
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80063ac:	4611      	mov	r1, r2
 80063ae:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b084      	sub	sp, #16
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	32b0      	adds	r2, #176	; 0xb0
 80063cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063d0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d101      	bne.n	80063dc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80063d8:	2303      	movs	r3, #3
 80063da:	e025      	b.n	8006428 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	33b0      	adds	r3, #176	; 0xb0
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	4413      	add	r3, r2
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d01a      	beq.n	8006426 <USBD_CDC_EP0_RxReady+0x6c>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80063f6:	2bff      	cmp	r3, #255	; 0xff
 80063f8:	d015      	beq.n	8006426 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	33b0      	adds	r3, #176	; 0xb0
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	4413      	add	r3, r2
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006412:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800641a:	b292      	uxth	r2, r2
 800641c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	22ff      	movs	r2, #255	; 0xff
 8006422:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3710      	adds	r7, #16
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b086      	sub	sp, #24
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006438:	2182      	movs	r1, #130	; 0x82
 800643a:	4818      	ldr	r0, [pc, #96]	; (800649c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800643c:	f000 fd09 	bl	8006e52 <USBD_GetEpDesc>
 8006440:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006442:	2101      	movs	r1, #1
 8006444:	4815      	ldr	r0, [pc, #84]	; (800649c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006446:	f000 fd04 	bl	8006e52 <USBD_GetEpDesc>
 800644a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800644c:	2181      	movs	r1, #129	; 0x81
 800644e:	4813      	ldr	r0, [pc, #76]	; (800649c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006450:	f000 fcff 	bl	8006e52 <USBD_GetEpDesc>
 8006454:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d002      	beq.n	8006462 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	2210      	movs	r2, #16
 8006460:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d006      	beq.n	8006476 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	2200      	movs	r2, #0
 800646c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006470:	711a      	strb	r2, [r3, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d006      	beq.n	800648a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2200      	movs	r2, #0
 8006480:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006484:	711a      	strb	r2, [r3, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2243      	movs	r2, #67	; 0x43
 800648e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006490:	4b02      	ldr	r3, [pc, #8]	; (800649c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006492:	4618      	mov	r0, r3
 8006494:	3718      	adds	r7, #24
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	20000050 	.word	0x20000050

080064a0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b086      	sub	sp, #24
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80064a8:	2182      	movs	r1, #130	; 0x82
 80064aa:	4818      	ldr	r0, [pc, #96]	; (800650c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80064ac:	f000 fcd1 	bl	8006e52 <USBD_GetEpDesc>
 80064b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80064b2:	2101      	movs	r1, #1
 80064b4:	4815      	ldr	r0, [pc, #84]	; (800650c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80064b6:	f000 fccc 	bl	8006e52 <USBD_GetEpDesc>
 80064ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80064bc:	2181      	movs	r1, #129	; 0x81
 80064be:	4813      	ldr	r0, [pc, #76]	; (800650c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80064c0:	f000 fcc7 	bl	8006e52 <USBD_GetEpDesc>
 80064c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d002      	beq.n	80064d2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	2210      	movs	r2, #16
 80064d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d006      	beq.n	80064e6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	2200      	movs	r2, #0
 80064dc:	711a      	strb	r2, [r3, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	f042 0202 	orr.w	r2, r2, #2
 80064e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d006      	beq.n	80064fa <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	711a      	strb	r2, [r3, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f042 0202 	orr.w	r2, r2, #2
 80064f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2243      	movs	r2, #67	; 0x43
 80064fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006500:	4b02      	ldr	r3, [pc, #8]	; (800650c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006502:	4618      	mov	r0, r3
 8006504:	3718      	adds	r7, #24
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	20000050 	.word	0x20000050

08006510 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b086      	sub	sp, #24
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006518:	2182      	movs	r1, #130	; 0x82
 800651a:	4818      	ldr	r0, [pc, #96]	; (800657c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800651c:	f000 fc99 	bl	8006e52 <USBD_GetEpDesc>
 8006520:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006522:	2101      	movs	r1, #1
 8006524:	4815      	ldr	r0, [pc, #84]	; (800657c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006526:	f000 fc94 	bl	8006e52 <USBD_GetEpDesc>
 800652a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800652c:	2181      	movs	r1, #129	; 0x81
 800652e:	4813      	ldr	r0, [pc, #76]	; (800657c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006530:	f000 fc8f 	bl	8006e52 <USBD_GetEpDesc>
 8006534:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d002      	beq.n	8006542 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	2210      	movs	r2, #16
 8006540:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d006      	beq.n	8006556 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	2200      	movs	r2, #0
 800654c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006550:	711a      	strb	r2, [r3, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d006      	beq.n	800656a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006564:	711a      	strb	r2, [r3, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2243      	movs	r2, #67	; 0x43
 800656e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006570:	4b02      	ldr	r3, [pc, #8]	; (800657c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006572:	4618      	mov	r0, r3
 8006574:	3718      	adds	r7, #24
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	20000050 	.word	0x20000050

08006580 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	220a      	movs	r2, #10
 800658c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800658e:	4b03      	ldr	r3, [pc, #12]	; (800659c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006590:	4618      	mov	r0, r3
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr
 800659c:	2000000c 	.word	0x2000000c

080065a0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d101      	bne.n	80065b4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80065b0:	2303      	movs	r3, #3
 80065b2:	e009      	b.n	80065c8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	33b0      	adds	r3, #176	; 0xb0
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	4413      	add	r3, r2
 80065c2:	683a      	ldr	r2, [r7, #0]
 80065c4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	370c      	adds	r7, #12
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b087      	sub	sp, #28
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	32b0      	adds	r2, #176	; 0xb0
 80065ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ee:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d101      	bne.n	80065fa <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e008      	b.n	800660c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	68ba      	ldr	r2, [r7, #8]
 80065fe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	371c      	adds	r7, #28
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006618:	b480      	push	{r7}
 800661a:	b085      	sub	sp, #20
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	32b0      	adds	r2, #176	; 0xb0
 800662c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006630:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d101      	bne.n	800663c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006638:	2303      	movs	r3, #3
 800663a:	e004      	b.n	8006646 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	683a      	ldr	r2, [r7, #0]
 8006640:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3714      	adds	r7, #20
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
	...

08006654 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	32b0      	adds	r2, #176	; 0xb0
 8006666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800666a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	32b0      	adds	r2, #176	; 0xb0
 8006676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d101      	bne.n	8006682 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800667e:	2303      	movs	r3, #3
 8006680:	e018      	b.n	80066b4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	7c1b      	ldrb	r3, [r3, #16]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d10a      	bne.n	80066a0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800668a:	4b0c      	ldr	r3, [pc, #48]	; (80066bc <USBD_CDC_ReceivePacket+0x68>)
 800668c:	7819      	ldrb	r1, [r3, #0]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006694:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f001 ffd5 	bl	8008648 <USBD_LL_PrepareReceive>
 800669e:	e008      	b.n	80066b2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80066a0:	4b06      	ldr	r3, [pc, #24]	; (80066bc <USBD_CDC_ReceivePacket+0x68>)
 80066a2:	7819      	ldrb	r1, [r3, #0]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80066aa:	2340      	movs	r3, #64	; 0x40
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f001 ffcb 	bl	8008648 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80066b2:	2300      	movs	r3, #0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3710      	adds	r7, #16
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	20000094 	.word	0x20000094

080066c0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b086      	sub	sp, #24
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	4613      	mov	r3, r2
 80066cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d101      	bne.n	80066d8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80066d4:	2303      	movs	r3, #3
 80066d6:	e01f      	b.n	8006718 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2200      	movs	r2, #0
 80066dc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d003      	beq.n	80066fe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	68ba      	ldr	r2, [r7, #8]
 80066fa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2201      	movs	r2, #1
 8006702:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	79fa      	ldrb	r2, [r7, #7]
 800670a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f001 fe3f 	bl	8008390 <USBD_LL_Init>
 8006712:	4603      	mov	r3, r0
 8006714:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006716:	7dfb      	ldrb	r3, [r7, #23]
}
 8006718:	4618      	mov	r0, r3
 800671a:	3718      	adds	r7, #24
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800672a:	2300      	movs	r3, #0
 800672c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d101      	bne.n	8006738 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006734:	2303      	movs	r3, #3
 8006736:	e025      	b.n	8006784 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	683a      	ldr	r2, [r7, #0]
 800673c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	32ae      	adds	r2, #174	; 0xae
 800674a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800674e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006750:	2b00      	cmp	r3, #0
 8006752:	d00f      	beq.n	8006774 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	32ae      	adds	r2, #174	; 0xae
 800675e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006764:	f107 020e 	add.w	r2, r7, #14
 8006768:	4610      	mov	r0, r2
 800676a:	4798      	blx	r3
 800676c:	4602      	mov	r2, r0
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800677a:	1c5a      	adds	r2, r3, #1
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	3710      	adds	r7, #16
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f001 fe4d 	bl	8008434 <USBD_LL_Start>
 800679a:	4603      	mov	r3, r0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3708      	adds	r7, #8
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80067ac:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	370c      	adds	r7, #12
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr

080067ba <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067ba:	b580      	push	{r7, lr}
 80067bc:	b084      	sub	sp, #16
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
 80067c2:	460b      	mov	r3, r1
 80067c4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80067c6:	2300      	movs	r3, #0
 80067c8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d009      	beq.n	80067e8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	78fa      	ldrb	r2, [r7, #3]
 80067de:	4611      	mov	r1, r2
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	4798      	blx	r3
 80067e4:	4603      	mov	r3, r0
 80067e6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80067e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3710      	adds	r7, #16
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b084      	sub	sp, #16
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
 80067fa:	460b      	mov	r3, r1
 80067fc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80067fe:	2300      	movs	r3, #0
 8006800:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	78fa      	ldrb	r2, [r7, #3]
 800680c:	4611      	mov	r1, r2
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	4798      	blx	r3
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d001      	beq.n	800681c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006818:	2303      	movs	r3, #3
 800681a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800681c:	7bfb      	ldrb	r3, [r7, #15]
}
 800681e:	4618      	mov	r0, r3
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b084      	sub	sp, #16
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
 800682e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006836:	6839      	ldr	r1, [r7, #0]
 8006838:	4618      	mov	r0, r3
 800683a:	f001 f932 	bl	8007aa2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2201      	movs	r2, #1
 8006842:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800684c:	461a      	mov	r2, r3
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800685a:	f003 031f 	and.w	r3, r3, #31
 800685e:	2b02      	cmp	r3, #2
 8006860:	d01a      	beq.n	8006898 <USBD_LL_SetupStage+0x72>
 8006862:	2b02      	cmp	r3, #2
 8006864:	d822      	bhi.n	80068ac <USBD_LL_SetupStage+0x86>
 8006866:	2b00      	cmp	r3, #0
 8006868:	d002      	beq.n	8006870 <USBD_LL_SetupStage+0x4a>
 800686a:	2b01      	cmp	r3, #1
 800686c:	d00a      	beq.n	8006884 <USBD_LL_SetupStage+0x5e>
 800686e:	e01d      	b.n	80068ac <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006876:	4619      	mov	r1, r3
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 fb5f 	bl	8006f3c <USBD_StdDevReq>
 800687e:	4603      	mov	r3, r0
 8006880:	73fb      	strb	r3, [r7, #15]
      break;
 8006882:	e020      	b.n	80068c6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800688a:	4619      	mov	r1, r3
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 fbc7 	bl	8007020 <USBD_StdItfReq>
 8006892:	4603      	mov	r3, r0
 8006894:	73fb      	strb	r3, [r7, #15]
      break;
 8006896:	e016      	b.n	80068c6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800689e:	4619      	mov	r1, r3
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 fc29 	bl	80070f8 <USBD_StdEPReq>
 80068a6:	4603      	mov	r3, r0
 80068a8:	73fb      	strb	r3, [r7, #15]
      break;
 80068aa:	e00c      	b.n	80068c6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80068b2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	4619      	mov	r1, r3
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f001 fe1a 	bl	80084f4 <USBD_LL_StallEP>
 80068c0:	4603      	mov	r3, r0
 80068c2:	73fb      	strb	r3, [r7, #15]
      break;
 80068c4:	bf00      	nop
  }

  return ret;
 80068c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3710      	adds	r7, #16
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b086      	sub	sp, #24
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	460b      	mov	r3, r1
 80068da:	607a      	str	r2, [r7, #4]
 80068dc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80068de:	2300      	movs	r3, #0
 80068e0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80068e2:	7afb      	ldrb	r3, [r7, #11]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d16e      	bne.n	80069c6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80068ee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80068f6:	2b03      	cmp	r3, #3
 80068f8:	f040 8098 	bne.w	8006a2c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	689a      	ldr	r2, [r3, #8]
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	429a      	cmp	r2, r3
 8006906:	d913      	bls.n	8006930 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	689a      	ldr	r2, [r3, #8]
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	1ad2      	subs	r2, r2, r3
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	68da      	ldr	r2, [r3, #12]
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	4293      	cmp	r3, r2
 8006920:	bf28      	it	cs
 8006922:	4613      	movcs	r3, r2
 8006924:	461a      	mov	r2, r3
 8006926:	6879      	ldr	r1, [r7, #4]
 8006928:	68f8      	ldr	r0, [r7, #12]
 800692a:	f001 f9ae 	bl	8007c8a <USBD_CtlContinueRx>
 800692e:	e07d      	b.n	8006a2c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006936:	f003 031f 	and.w	r3, r3, #31
 800693a:	2b02      	cmp	r3, #2
 800693c:	d014      	beq.n	8006968 <USBD_LL_DataOutStage+0x98>
 800693e:	2b02      	cmp	r3, #2
 8006940:	d81d      	bhi.n	800697e <USBD_LL_DataOutStage+0xae>
 8006942:	2b00      	cmp	r3, #0
 8006944:	d002      	beq.n	800694c <USBD_LL_DataOutStage+0x7c>
 8006946:	2b01      	cmp	r3, #1
 8006948:	d003      	beq.n	8006952 <USBD_LL_DataOutStage+0x82>
 800694a:	e018      	b.n	800697e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800694c:	2300      	movs	r3, #0
 800694e:	75bb      	strb	r3, [r7, #22]
            break;
 8006950:	e018      	b.n	8006984 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006958:	b2db      	uxtb	r3, r3
 800695a:	4619      	mov	r1, r3
 800695c:	68f8      	ldr	r0, [r7, #12]
 800695e:	f000 fa5e 	bl	8006e1e <USBD_CoreFindIF>
 8006962:	4603      	mov	r3, r0
 8006964:	75bb      	strb	r3, [r7, #22]
            break;
 8006966:	e00d      	b.n	8006984 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800696e:	b2db      	uxtb	r3, r3
 8006970:	4619      	mov	r1, r3
 8006972:	68f8      	ldr	r0, [r7, #12]
 8006974:	f000 fa60 	bl	8006e38 <USBD_CoreFindEP>
 8006978:	4603      	mov	r3, r0
 800697a:	75bb      	strb	r3, [r7, #22]
            break;
 800697c:	e002      	b.n	8006984 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800697e:	2300      	movs	r3, #0
 8006980:	75bb      	strb	r3, [r7, #22]
            break;
 8006982:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006984:	7dbb      	ldrb	r3, [r7, #22]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d119      	bne.n	80069be <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006990:	b2db      	uxtb	r3, r3
 8006992:	2b03      	cmp	r3, #3
 8006994:	d113      	bne.n	80069be <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006996:	7dba      	ldrb	r2, [r7, #22]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	32ae      	adds	r2, #174	; 0xae
 800699c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00b      	beq.n	80069be <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80069a6:	7dba      	ldrb	r2, [r7, #22]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80069ae:	7dba      	ldrb	r2, [r7, #22]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	32ae      	adds	r2, #174	; 0xae
 80069b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	68f8      	ldr	r0, [r7, #12]
 80069bc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	f001 f974 	bl	8007cac <USBD_CtlSendStatus>
 80069c4:	e032      	b.n	8006a2c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80069c6:	7afb      	ldrb	r3, [r7, #11]
 80069c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	4619      	mov	r1, r3
 80069d0:	68f8      	ldr	r0, [r7, #12]
 80069d2:	f000 fa31 	bl	8006e38 <USBD_CoreFindEP>
 80069d6:	4603      	mov	r3, r0
 80069d8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80069da:	7dbb      	ldrb	r3, [r7, #22]
 80069dc:	2bff      	cmp	r3, #255	; 0xff
 80069de:	d025      	beq.n	8006a2c <USBD_LL_DataOutStage+0x15c>
 80069e0:	7dbb      	ldrb	r3, [r7, #22]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d122      	bne.n	8006a2c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	2b03      	cmp	r3, #3
 80069f0:	d117      	bne.n	8006a22 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80069f2:	7dba      	ldrb	r2, [r7, #22]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	32ae      	adds	r2, #174	; 0xae
 80069f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069fc:	699b      	ldr	r3, [r3, #24]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00f      	beq.n	8006a22 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006a02:	7dba      	ldrb	r2, [r7, #22]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006a0a:	7dba      	ldrb	r2, [r7, #22]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	32ae      	adds	r2, #174	; 0xae
 8006a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	7afa      	ldrb	r2, [r7, #11]
 8006a18:	4611      	mov	r1, r2
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	4798      	blx	r3
 8006a1e:	4603      	mov	r3, r0
 8006a20:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006a22:	7dfb      	ldrb	r3, [r7, #23]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d001      	beq.n	8006a2c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006a28:	7dfb      	ldrb	r3, [r7, #23]
 8006a2a:	e000      	b.n	8006a2e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3718      	adds	r7, #24
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b086      	sub	sp, #24
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	60f8      	str	r0, [r7, #12]
 8006a3e:	460b      	mov	r3, r1
 8006a40:	607a      	str	r2, [r7, #4]
 8006a42:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006a44:	7afb      	ldrb	r3, [r7, #11]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d16f      	bne.n	8006b2a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	3314      	adds	r3, #20
 8006a4e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d15a      	bne.n	8006b10 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	689a      	ldr	r2, [r3, #8]
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d914      	bls.n	8006a90 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	689a      	ldr	r2, [r3, #8]
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	1ad2      	subs	r2, r2, r3
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	461a      	mov	r2, r3
 8006a7a:	6879      	ldr	r1, [r7, #4]
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f001 f8d6 	bl	8007c2e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a82:	2300      	movs	r3, #0
 8006a84:	2200      	movs	r2, #0
 8006a86:	2100      	movs	r1, #0
 8006a88:	68f8      	ldr	r0, [r7, #12]
 8006a8a:	f001 fddd 	bl	8008648 <USBD_LL_PrepareReceive>
 8006a8e:	e03f      	b.n	8006b10 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	68da      	ldr	r2, [r3, #12]
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d11c      	bne.n	8006ad6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	685a      	ldr	r2, [r3, #4]
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d316      	bcc.n	8006ad6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	685a      	ldr	r2, [r3, #4]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d20f      	bcs.n	8006ad6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	2100      	movs	r1, #0
 8006aba:	68f8      	ldr	r0, [r7, #12]
 8006abc:	f001 f8b7 	bl	8007c2e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ac8:	2300      	movs	r3, #0
 8006aca:	2200      	movs	r2, #0
 8006acc:	2100      	movs	r1, #0
 8006ace:	68f8      	ldr	r0, [r7, #12]
 8006ad0:	f001 fdba 	bl	8008648 <USBD_LL_PrepareReceive>
 8006ad4:	e01c      	b.n	8006b10 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	2b03      	cmp	r3, #3
 8006ae0:	d10f      	bne.n	8006b02 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d009      	beq.n	8006b02 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	68f8      	ldr	r0, [r7, #12]
 8006b00:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b02:	2180      	movs	r1, #128	; 0x80
 8006b04:	68f8      	ldr	r0, [r7, #12]
 8006b06:	f001 fcf5 	bl	80084f4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f001 f8e1 	bl	8007cd2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d03a      	beq.n	8006b90 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006b1a:	68f8      	ldr	r0, [r7, #12]
 8006b1c:	f7ff fe42 	bl	80067a4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006b28:	e032      	b.n	8006b90 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006b2a:	7afb      	ldrb	r3, [r7, #11]
 8006b2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	4619      	mov	r1, r3
 8006b34:	68f8      	ldr	r0, [r7, #12]
 8006b36:	f000 f97f 	bl	8006e38 <USBD_CoreFindEP>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b3e:	7dfb      	ldrb	r3, [r7, #23]
 8006b40:	2bff      	cmp	r3, #255	; 0xff
 8006b42:	d025      	beq.n	8006b90 <USBD_LL_DataInStage+0x15a>
 8006b44:	7dfb      	ldrb	r3, [r7, #23]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d122      	bne.n	8006b90 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b03      	cmp	r3, #3
 8006b54:	d11c      	bne.n	8006b90 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006b56:	7dfa      	ldrb	r2, [r7, #23]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	32ae      	adds	r2, #174	; 0xae
 8006b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b60:	695b      	ldr	r3, [r3, #20]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d014      	beq.n	8006b90 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006b66:	7dfa      	ldrb	r2, [r7, #23]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006b6e:	7dfa      	ldrb	r2, [r7, #23]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	32ae      	adds	r2, #174	; 0xae
 8006b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b78:	695b      	ldr	r3, [r3, #20]
 8006b7a:	7afa      	ldrb	r2, [r7, #11]
 8006b7c:	4611      	mov	r1, r2
 8006b7e:	68f8      	ldr	r0, [r7, #12]
 8006b80:	4798      	blx	r3
 8006b82:	4603      	mov	r3, r0
 8006b84:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006b86:	7dbb      	ldrb	r3, [r7, #22]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d001      	beq.n	8006b90 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006b8c:	7dbb      	ldrb	r3, [r7, #22]
 8006b8e:	e000      	b.n	8006b92 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3718      	adds	r7, #24
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b084      	sub	sp, #16
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d014      	beq.n	8006c00 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00e      	beq.n	8006c00 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	6852      	ldr	r2, [r2, #4]
 8006bee:	b2d2      	uxtb	r2, r2
 8006bf0:	4611      	mov	r1, r2
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	4798      	blx	r3
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d001      	beq.n	8006c00 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006bfc:	2303      	movs	r3, #3
 8006bfe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c00:	2340      	movs	r3, #64	; 0x40
 8006c02:	2200      	movs	r2, #0
 8006c04:	2100      	movs	r1, #0
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f001 fc2f 	bl	800846a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2240      	movs	r2, #64	; 0x40
 8006c18:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c1c:	2340      	movs	r3, #64	; 0x40
 8006c1e:	2200      	movs	r2, #0
 8006c20:	2180      	movs	r1, #128	; 0x80
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f001 fc21 	bl	800846a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2240      	movs	r2, #64	; 0x40
 8006c32:	621a      	str	r2, [r3, #32]

  return ret;
 8006c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3710      	adds	r7, #16
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b083      	sub	sp, #12
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
 8006c46:	460b      	mov	r3, r1
 8006c48:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	78fa      	ldrb	r2, [r7, #3]
 8006c4e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	370c      	adds	r7, #12
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr

08006c5e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006c5e:	b480      	push	{r7}
 8006c60:	b083      	sub	sp, #12
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c6c:	b2da      	uxtb	r2, r3
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2204      	movs	r2, #4
 8006c78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	370c      	adds	r7, #12
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr

08006c8a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006c8a:	b480      	push	{r7}
 8006c8c:	b083      	sub	sp, #12
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	2b04      	cmp	r3, #4
 8006c9c:	d106      	bne.n	8006cac <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006ca4:	b2da      	uxtb	r2, r3
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	370c      	adds	r7, #12
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr

08006cba <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006cba:	b580      	push	{r7, lr}
 8006cbc:	b082      	sub	sp, #8
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	2b03      	cmp	r3, #3
 8006ccc:	d110      	bne.n	8006cf0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d00b      	beq.n	8006cf0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cde:	69db      	ldr	r3, [r3, #28]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d005      	beq.n	8006cf0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cea:	69db      	ldr	r3, [r3, #28]
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3708      	adds	r7, #8
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}

08006cfa <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006cfa:	b580      	push	{r7, lr}
 8006cfc:	b082      	sub	sp, #8
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
 8006d02:	460b      	mov	r3, r1
 8006d04:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	32ae      	adds	r2, #174	; 0xae
 8006d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d101      	bne.n	8006d1c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	e01c      	b.n	8006d56 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	2b03      	cmp	r3, #3
 8006d26:	d115      	bne.n	8006d54 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	32ae      	adds	r2, #174	; 0xae
 8006d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d36:	6a1b      	ldr	r3, [r3, #32]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d00b      	beq.n	8006d54 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	32ae      	adds	r2, #174	; 0xae
 8006d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d4a:	6a1b      	ldr	r3, [r3, #32]
 8006d4c:	78fa      	ldrb	r2, [r7, #3]
 8006d4e:	4611      	mov	r1, r2
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3708      	adds	r7, #8
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b082      	sub	sp, #8
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
 8006d66:	460b      	mov	r3, r1
 8006d68:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	32ae      	adds	r2, #174	; 0xae
 8006d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d101      	bne.n	8006d80 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006d7c:	2303      	movs	r3, #3
 8006d7e:	e01c      	b.n	8006dba <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	2b03      	cmp	r3, #3
 8006d8a:	d115      	bne.n	8006db8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	32ae      	adds	r2, #174	; 0xae
 8006d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00b      	beq.n	8006db8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	32ae      	adds	r2, #174	; 0xae
 8006daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db0:	78fa      	ldrb	r2, [r7, #3]
 8006db2:	4611      	mov	r1, r2
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3708      	adds	r7, #8
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006dc2:	b480      	push	{r7}
 8006dc4:	b083      	sub	sp, #12
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006de0:	2300      	movs	r3, #0
 8006de2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d00e      	beq.n	8006e14 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	6852      	ldr	r2, [r2, #4]
 8006e02:	b2d2      	uxtb	r2, r2
 8006e04:	4611      	mov	r1, r2
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	4798      	blx	r3
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d001      	beq.n	8006e14 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006e10:	2303      	movs	r3, #3
 8006e12:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006e1e:	b480      	push	{r7}
 8006e20:	b083      	sub	sp, #12
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
 8006e26:	460b      	mov	r3, r1
 8006e28:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006e2a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	370c      	adds	r7, #12
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	460b      	mov	r3, r1
 8006e42:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006e44:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	370c      	adds	r7, #12
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr

08006e52 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b086      	sub	sp, #24
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006e66:	2300      	movs	r3, #0
 8006e68:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	885b      	ldrh	r3, [r3, #2]
 8006e6e:	b29a      	uxth	r2, r3
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d920      	bls.n	8006ebc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006e82:	e013      	b.n	8006eac <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006e84:	f107 030a 	add.w	r3, r7, #10
 8006e88:	4619      	mov	r1, r3
 8006e8a:	6978      	ldr	r0, [r7, #20]
 8006e8c:	f000 f81b 	bl	8006ec6 <USBD_GetNextDesc>
 8006e90:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	785b      	ldrb	r3, [r3, #1]
 8006e96:	2b05      	cmp	r3, #5
 8006e98:	d108      	bne.n	8006eac <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	789b      	ldrb	r3, [r3, #2]
 8006ea2:	78fa      	ldrb	r2, [r7, #3]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d008      	beq.n	8006eba <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	885b      	ldrh	r3, [r3, #2]
 8006eb0:	b29a      	uxth	r2, r3
 8006eb2:	897b      	ldrh	r3, [r7, #10]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d8e5      	bhi.n	8006e84 <USBD_GetEpDesc+0x32>
 8006eb8:	e000      	b.n	8006ebc <USBD_GetEpDesc+0x6a>
          break;
 8006eba:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006ebc:	693b      	ldr	r3, [r7, #16]
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3718      	adds	r7, #24
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}

08006ec6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006ec6:	b480      	push	{r7}
 8006ec8:	b085      	sub	sp, #20
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
 8006ece:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	881a      	ldrh	r2, [r3, #0]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	4413      	add	r3, r2
 8006ee0:	b29a      	uxth	r2, r3
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	461a      	mov	r2, r3
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4413      	add	r3, r2
 8006ef0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3714      	adds	r7, #20
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b087      	sub	sp, #28
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	3301      	adds	r3, #1
 8006f16:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006f1e:	8a3b      	ldrh	r3, [r7, #16]
 8006f20:	021b      	lsls	r3, r3, #8
 8006f22:	b21a      	sxth	r2, r3
 8006f24:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	b21b      	sxth	r3, r3
 8006f2c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006f2e:	89fb      	ldrh	r3, [r7, #14]
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	371c      	adds	r7, #28
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f46:	2300      	movs	r3, #0
 8006f48:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f52:	2b40      	cmp	r3, #64	; 0x40
 8006f54:	d005      	beq.n	8006f62 <USBD_StdDevReq+0x26>
 8006f56:	2b40      	cmp	r3, #64	; 0x40
 8006f58:	d857      	bhi.n	800700a <USBD_StdDevReq+0xce>
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00f      	beq.n	8006f7e <USBD_StdDevReq+0x42>
 8006f5e:	2b20      	cmp	r3, #32
 8006f60:	d153      	bne.n	800700a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	32ae      	adds	r2, #174	; 0xae
 8006f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	6839      	ldr	r1, [r7, #0]
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	4798      	blx	r3
 8006f78:	4603      	mov	r3, r0
 8006f7a:	73fb      	strb	r3, [r7, #15]
      break;
 8006f7c:	e04a      	b.n	8007014 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	785b      	ldrb	r3, [r3, #1]
 8006f82:	2b09      	cmp	r3, #9
 8006f84:	d83b      	bhi.n	8006ffe <USBD_StdDevReq+0xc2>
 8006f86:	a201      	add	r2, pc, #4	; (adr r2, 8006f8c <USBD_StdDevReq+0x50>)
 8006f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f8c:	08006fe1 	.word	0x08006fe1
 8006f90:	08006ff5 	.word	0x08006ff5
 8006f94:	08006fff 	.word	0x08006fff
 8006f98:	08006feb 	.word	0x08006feb
 8006f9c:	08006fff 	.word	0x08006fff
 8006fa0:	08006fbf 	.word	0x08006fbf
 8006fa4:	08006fb5 	.word	0x08006fb5
 8006fa8:	08006fff 	.word	0x08006fff
 8006fac:	08006fd7 	.word	0x08006fd7
 8006fb0:	08006fc9 	.word	0x08006fc9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006fb4:	6839      	ldr	r1, [r7, #0]
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 fa3c 	bl	8007434 <USBD_GetDescriptor>
          break;
 8006fbc:	e024      	b.n	8007008 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006fbe:	6839      	ldr	r1, [r7, #0]
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 fbcb 	bl	800775c <USBD_SetAddress>
          break;
 8006fc6:	e01f      	b.n	8007008 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006fc8:	6839      	ldr	r1, [r7, #0]
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 fc0a 	bl	80077e4 <USBD_SetConfig>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	73fb      	strb	r3, [r7, #15]
          break;
 8006fd4:	e018      	b.n	8007008 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006fd6:	6839      	ldr	r1, [r7, #0]
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 fcad 	bl	8007938 <USBD_GetConfig>
          break;
 8006fde:	e013      	b.n	8007008 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006fe0:	6839      	ldr	r1, [r7, #0]
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 fcde 	bl	80079a4 <USBD_GetStatus>
          break;
 8006fe8:	e00e      	b.n	8007008 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006fea:	6839      	ldr	r1, [r7, #0]
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 fd0d 	bl	8007a0c <USBD_SetFeature>
          break;
 8006ff2:	e009      	b.n	8007008 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006ff4:	6839      	ldr	r1, [r7, #0]
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 fd31 	bl	8007a5e <USBD_ClrFeature>
          break;
 8006ffc:	e004      	b.n	8007008 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006ffe:	6839      	ldr	r1, [r7, #0]
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 fd88 	bl	8007b16 <USBD_CtlError>
          break;
 8007006:	bf00      	nop
      }
      break;
 8007008:	e004      	b.n	8007014 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800700a:	6839      	ldr	r1, [r7, #0]
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 fd82 	bl	8007b16 <USBD_CtlError>
      break;
 8007012:	bf00      	nop
  }

  return ret;
 8007014:	7bfb      	ldrb	r3, [r7, #15]
}
 8007016:	4618      	mov	r0, r3
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop

08007020 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800702a:	2300      	movs	r3, #0
 800702c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007036:	2b40      	cmp	r3, #64	; 0x40
 8007038:	d005      	beq.n	8007046 <USBD_StdItfReq+0x26>
 800703a:	2b40      	cmp	r3, #64	; 0x40
 800703c:	d852      	bhi.n	80070e4 <USBD_StdItfReq+0xc4>
 800703e:	2b00      	cmp	r3, #0
 8007040:	d001      	beq.n	8007046 <USBD_StdItfReq+0x26>
 8007042:	2b20      	cmp	r3, #32
 8007044:	d14e      	bne.n	80070e4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800704c:	b2db      	uxtb	r3, r3
 800704e:	3b01      	subs	r3, #1
 8007050:	2b02      	cmp	r3, #2
 8007052:	d840      	bhi.n	80070d6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	889b      	ldrh	r3, [r3, #4]
 8007058:	b2db      	uxtb	r3, r3
 800705a:	2b01      	cmp	r3, #1
 800705c:	d836      	bhi.n	80070cc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	889b      	ldrh	r3, [r3, #4]
 8007062:	b2db      	uxtb	r3, r3
 8007064:	4619      	mov	r1, r3
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f7ff fed9 	bl	8006e1e <USBD_CoreFindIF>
 800706c:	4603      	mov	r3, r0
 800706e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007070:	7bbb      	ldrb	r3, [r7, #14]
 8007072:	2bff      	cmp	r3, #255	; 0xff
 8007074:	d01d      	beq.n	80070b2 <USBD_StdItfReq+0x92>
 8007076:	7bbb      	ldrb	r3, [r7, #14]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d11a      	bne.n	80070b2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800707c:	7bba      	ldrb	r2, [r7, #14]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	32ae      	adds	r2, #174	; 0xae
 8007082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d00f      	beq.n	80070ac <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800708c:	7bba      	ldrb	r2, [r7, #14]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007094:	7bba      	ldrb	r2, [r7, #14]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	32ae      	adds	r2, #174	; 0xae
 800709a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	6839      	ldr	r1, [r7, #0]
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	4798      	blx	r3
 80070a6:	4603      	mov	r3, r0
 80070a8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80070aa:	e004      	b.n	80070b6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80070ac:	2303      	movs	r3, #3
 80070ae:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80070b0:	e001      	b.n	80070b6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80070b2:	2303      	movs	r3, #3
 80070b4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	88db      	ldrh	r3, [r3, #6]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d110      	bne.n	80070e0 <USBD_StdItfReq+0xc0>
 80070be:	7bfb      	ldrb	r3, [r7, #15]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d10d      	bne.n	80070e0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 fdf1 	bl	8007cac <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80070ca:	e009      	b.n	80070e0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80070cc:	6839      	ldr	r1, [r7, #0]
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 fd21 	bl	8007b16 <USBD_CtlError>
          break;
 80070d4:	e004      	b.n	80070e0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80070d6:	6839      	ldr	r1, [r7, #0]
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 fd1c 	bl	8007b16 <USBD_CtlError>
          break;
 80070de:	e000      	b.n	80070e2 <USBD_StdItfReq+0xc2>
          break;
 80070e0:	bf00      	nop
      }
      break;
 80070e2:	e004      	b.n	80070ee <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80070e4:	6839      	ldr	r1, [r7, #0]
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 fd15 	bl	8007b16 <USBD_CtlError>
      break;
 80070ec:	bf00      	nop
  }

  return ret;
 80070ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007102:	2300      	movs	r3, #0
 8007104:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	889b      	ldrh	r3, [r3, #4]
 800710a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007114:	2b40      	cmp	r3, #64	; 0x40
 8007116:	d007      	beq.n	8007128 <USBD_StdEPReq+0x30>
 8007118:	2b40      	cmp	r3, #64	; 0x40
 800711a:	f200 817f 	bhi.w	800741c <USBD_StdEPReq+0x324>
 800711e:	2b00      	cmp	r3, #0
 8007120:	d02a      	beq.n	8007178 <USBD_StdEPReq+0x80>
 8007122:	2b20      	cmp	r3, #32
 8007124:	f040 817a 	bne.w	800741c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007128:	7bbb      	ldrb	r3, [r7, #14]
 800712a:	4619      	mov	r1, r3
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f7ff fe83 	bl	8006e38 <USBD_CoreFindEP>
 8007132:	4603      	mov	r3, r0
 8007134:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007136:	7b7b      	ldrb	r3, [r7, #13]
 8007138:	2bff      	cmp	r3, #255	; 0xff
 800713a:	f000 8174 	beq.w	8007426 <USBD_StdEPReq+0x32e>
 800713e:	7b7b      	ldrb	r3, [r7, #13]
 8007140:	2b00      	cmp	r3, #0
 8007142:	f040 8170 	bne.w	8007426 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007146:	7b7a      	ldrb	r2, [r7, #13]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800714e:	7b7a      	ldrb	r2, [r7, #13]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	32ae      	adds	r2, #174	; 0xae
 8007154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	2b00      	cmp	r3, #0
 800715c:	f000 8163 	beq.w	8007426 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007160:	7b7a      	ldrb	r2, [r7, #13]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	32ae      	adds	r2, #174	; 0xae
 8007166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	6839      	ldr	r1, [r7, #0]
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	4798      	blx	r3
 8007172:	4603      	mov	r3, r0
 8007174:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007176:	e156      	b.n	8007426 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	785b      	ldrb	r3, [r3, #1]
 800717c:	2b03      	cmp	r3, #3
 800717e:	d008      	beq.n	8007192 <USBD_StdEPReq+0x9a>
 8007180:	2b03      	cmp	r3, #3
 8007182:	f300 8145 	bgt.w	8007410 <USBD_StdEPReq+0x318>
 8007186:	2b00      	cmp	r3, #0
 8007188:	f000 809b 	beq.w	80072c2 <USBD_StdEPReq+0x1ca>
 800718c:	2b01      	cmp	r3, #1
 800718e:	d03c      	beq.n	800720a <USBD_StdEPReq+0x112>
 8007190:	e13e      	b.n	8007410 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007198:	b2db      	uxtb	r3, r3
 800719a:	2b02      	cmp	r3, #2
 800719c:	d002      	beq.n	80071a4 <USBD_StdEPReq+0xac>
 800719e:	2b03      	cmp	r3, #3
 80071a0:	d016      	beq.n	80071d0 <USBD_StdEPReq+0xd8>
 80071a2:	e02c      	b.n	80071fe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071a4:	7bbb      	ldrb	r3, [r7, #14]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00d      	beq.n	80071c6 <USBD_StdEPReq+0xce>
 80071aa:	7bbb      	ldrb	r3, [r7, #14]
 80071ac:	2b80      	cmp	r3, #128	; 0x80
 80071ae:	d00a      	beq.n	80071c6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80071b0:	7bbb      	ldrb	r3, [r7, #14]
 80071b2:	4619      	mov	r1, r3
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f001 f99d 	bl	80084f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80071ba:	2180      	movs	r1, #128	; 0x80
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f001 f999 	bl	80084f4 <USBD_LL_StallEP>
 80071c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80071c4:	e020      	b.n	8007208 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80071c6:	6839      	ldr	r1, [r7, #0]
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 fca4 	bl	8007b16 <USBD_CtlError>
              break;
 80071ce:	e01b      	b.n	8007208 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	885b      	ldrh	r3, [r3, #2]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d10e      	bne.n	80071f6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80071d8:	7bbb      	ldrb	r3, [r7, #14]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00b      	beq.n	80071f6 <USBD_StdEPReq+0xfe>
 80071de:	7bbb      	ldrb	r3, [r7, #14]
 80071e0:	2b80      	cmp	r3, #128	; 0x80
 80071e2:	d008      	beq.n	80071f6 <USBD_StdEPReq+0xfe>
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	88db      	ldrh	r3, [r3, #6]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d104      	bne.n	80071f6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80071ec:	7bbb      	ldrb	r3, [r7, #14]
 80071ee:	4619      	mov	r1, r3
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f001 f97f 	bl	80084f4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 fd58 	bl	8007cac <USBD_CtlSendStatus>

              break;
 80071fc:	e004      	b.n	8007208 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80071fe:	6839      	ldr	r1, [r7, #0]
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 fc88 	bl	8007b16 <USBD_CtlError>
              break;
 8007206:	bf00      	nop
          }
          break;
 8007208:	e107      	b.n	800741a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007210:	b2db      	uxtb	r3, r3
 8007212:	2b02      	cmp	r3, #2
 8007214:	d002      	beq.n	800721c <USBD_StdEPReq+0x124>
 8007216:	2b03      	cmp	r3, #3
 8007218:	d016      	beq.n	8007248 <USBD_StdEPReq+0x150>
 800721a:	e04b      	b.n	80072b4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800721c:	7bbb      	ldrb	r3, [r7, #14]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d00d      	beq.n	800723e <USBD_StdEPReq+0x146>
 8007222:	7bbb      	ldrb	r3, [r7, #14]
 8007224:	2b80      	cmp	r3, #128	; 0x80
 8007226:	d00a      	beq.n	800723e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007228:	7bbb      	ldrb	r3, [r7, #14]
 800722a:	4619      	mov	r1, r3
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f001 f961 	bl	80084f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007232:	2180      	movs	r1, #128	; 0x80
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f001 f95d 	bl	80084f4 <USBD_LL_StallEP>
 800723a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800723c:	e040      	b.n	80072c0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800723e:	6839      	ldr	r1, [r7, #0]
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 fc68 	bl	8007b16 <USBD_CtlError>
              break;
 8007246:	e03b      	b.n	80072c0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	885b      	ldrh	r3, [r3, #2]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d136      	bne.n	80072be <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007250:	7bbb      	ldrb	r3, [r7, #14]
 8007252:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007256:	2b00      	cmp	r3, #0
 8007258:	d004      	beq.n	8007264 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800725a:	7bbb      	ldrb	r3, [r7, #14]
 800725c:	4619      	mov	r1, r3
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f001 f967 	bl	8008532 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 fd21 	bl	8007cac <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800726a:	7bbb      	ldrb	r3, [r7, #14]
 800726c:	4619      	mov	r1, r3
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f7ff fde2 	bl	8006e38 <USBD_CoreFindEP>
 8007274:	4603      	mov	r3, r0
 8007276:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007278:	7b7b      	ldrb	r3, [r7, #13]
 800727a:	2bff      	cmp	r3, #255	; 0xff
 800727c:	d01f      	beq.n	80072be <USBD_StdEPReq+0x1c6>
 800727e:	7b7b      	ldrb	r3, [r7, #13]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d11c      	bne.n	80072be <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007284:	7b7a      	ldrb	r2, [r7, #13]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800728c:	7b7a      	ldrb	r2, [r7, #13]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	32ae      	adds	r2, #174	; 0xae
 8007292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d010      	beq.n	80072be <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800729c:	7b7a      	ldrb	r2, [r7, #13]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	32ae      	adds	r2, #174	; 0xae
 80072a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	6839      	ldr	r1, [r7, #0]
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	4798      	blx	r3
 80072ae:	4603      	mov	r3, r0
 80072b0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80072b2:	e004      	b.n	80072be <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80072b4:	6839      	ldr	r1, [r7, #0]
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 fc2d 	bl	8007b16 <USBD_CtlError>
              break;
 80072bc:	e000      	b.n	80072c0 <USBD_StdEPReq+0x1c8>
              break;
 80072be:	bf00      	nop
          }
          break;
 80072c0:	e0ab      	b.n	800741a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	2b02      	cmp	r3, #2
 80072cc:	d002      	beq.n	80072d4 <USBD_StdEPReq+0x1dc>
 80072ce:	2b03      	cmp	r3, #3
 80072d0:	d032      	beq.n	8007338 <USBD_StdEPReq+0x240>
 80072d2:	e097      	b.n	8007404 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072d4:	7bbb      	ldrb	r3, [r7, #14]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d007      	beq.n	80072ea <USBD_StdEPReq+0x1f2>
 80072da:	7bbb      	ldrb	r3, [r7, #14]
 80072dc:	2b80      	cmp	r3, #128	; 0x80
 80072de:	d004      	beq.n	80072ea <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80072e0:	6839      	ldr	r1, [r7, #0]
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 fc17 	bl	8007b16 <USBD_CtlError>
                break;
 80072e8:	e091      	b.n	800740e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	da0b      	bge.n	800730a <USBD_StdEPReq+0x212>
 80072f2:	7bbb      	ldrb	r3, [r7, #14]
 80072f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072f8:	4613      	mov	r3, r2
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	4413      	add	r3, r2
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	3310      	adds	r3, #16
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	4413      	add	r3, r2
 8007306:	3304      	adds	r3, #4
 8007308:	e00b      	b.n	8007322 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800730a:	7bbb      	ldrb	r3, [r7, #14]
 800730c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007310:	4613      	mov	r3, r2
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	4413      	add	r3, r2
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	4413      	add	r3, r2
 8007320:	3304      	adds	r3, #4
 8007322:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	2200      	movs	r2, #0
 8007328:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	2202      	movs	r2, #2
 800732e:	4619      	mov	r1, r3
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 fc61 	bl	8007bf8 <USBD_CtlSendData>
              break;
 8007336:	e06a      	b.n	800740e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007338:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800733c:	2b00      	cmp	r3, #0
 800733e:	da11      	bge.n	8007364 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007340:	7bbb      	ldrb	r3, [r7, #14]
 8007342:	f003 020f 	and.w	r2, r3, #15
 8007346:	6879      	ldr	r1, [r7, #4]
 8007348:	4613      	mov	r3, r2
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	4413      	add	r3, r2
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	440b      	add	r3, r1
 8007352:	3324      	adds	r3, #36	; 0x24
 8007354:	881b      	ldrh	r3, [r3, #0]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d117      	bne.n	800738a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800735a:	6839      	ldr	r1, [r7, #0]
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 fbda 	bl	8007b16 <USBD_CtlError>
                  break;
 8007362:	e054      	b.n	800740e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007364:	7bbb      	ldrb	r3, [r7, #14]
 8007366:	f003 020f 	and.w	r2, r3, #15
 800736a:	6879      	ldr	r1, [r7, #4]
 800736c:	4613      	mov	r3, r2
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	4413      	add	r3, r2
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	440b      	add	r3, r1
 8007376:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800737a:	881b      	ldrh	r3, [r3, #0]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d104      	bne.n	800738a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007380:	6839      	ldr	r1, [r7, #0]
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 fbc7 	bl	8007b16 <USBD_CtlError>
                  break;
 8007388:	e041      	b.n	800740e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800738a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800738e:	2b00      	cmp	r3, #0
 8007390:	da0b      	bge.n	80073aa <USBD_StdEPReq+0x2b2>
 8007392:	7bbb      	ldrb	r3, [r7, #14]
 8007394:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007398:	4613      	mov	r3, r2
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	4413      	add	r3, r2
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	3310      	adds	r3, #16
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	4413      	add	r3, r2
 80073a6:	3304      	adds	r3, #4
 80073a8:	e00b      	b.n	80073c2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80073aa:	7bbb      	ldrb	r3, [r7, #14]
 80073ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073b0:	4613      	mov	r3, r2
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	4413      	add	r3, r2
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	4413      	add	r3, r2
 80073c0:	3304      	adds	r3, #4
 80073c2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80073c4:	7bbb      	ldrb	r3, [r7, #14]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d002      	beq.n	80073d0 <USBD_StdEPReq+0x2d8>
 80073ca:	7bbb      	ldrb	r3, [r7, #14]
 80073cc:	2b80      	cmp	r3, #128	; 0x80
 80073ce:	d103      	bne.n	80073d8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	2200      	movs	r2, #0
 80073d4:	601a      	str	r2, [r3, #0]
 80073d6:	e00e      	b.n	80073f6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80073d8:	7bbb      	ldrb	r3, [r7, #14]
 80073da:	4619      	mov	r1, r3
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f001 f8c7 	bl	8008570 <USBD_LL_IsStallEP>
 80073e2:	4603      	mov	r3, r0
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d003      	beq.n	80073f0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	2201      	movs	r2, #1
 80073ec:	601a      	str	r2, [r3, #0]
 80073ee:	e002      	b.n	80073f6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	2200      	movs	r2, #0
 80073f4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	2202      	movs	r2, #2
 80073fa:	4619      	mov	r1, r3
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 fbfb 	bl	8007bf8 <USBD_CtlSendData>
              break;
 8007402:	e004      	b.n	800740e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007404:	6839      	ldr	r1, [r7, #0]
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 fb85 	bl	8007b16 <USBD_CtlError>
              break;
 800740c:	bf00      	nop
          }
          break;
 800740e:	e004      	b.n	800741a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007410:	6839      	ldr	r1, [r7, #0]
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 fb7f 	bl	8007b16 <USBD_CtlError>
          break;
 8007418:	bf00      	nop
      }
      break;
 800741a:	e005      	b.n	8007428 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800741c:	6839      	ldr	r1, [r7, #0]
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 fb79 	bl	8007b16 <USBD_CtlError>
      break;
 8007424:	e000      	b.n	8007428 <USBD_StdEPReq+0x330>
      break;
 8007426:	bf00      	nop
  }

  return ret;
 8007428:	7bfb      	ldrb	r3, [r7, #15]
}
 800742a:	4618      	mov	r0, r3
 800742c:	3710      	adds	r7, #16
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
	...

08007434 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b084      	sub	sp, #16
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800743e:	2300      	movs	r3, #0
 8007440:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007442:	2300      	movs	r3, #0
 8007444:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007446:	2300      	movs	r3, #0
 8007448:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	885b      	ldrh	r3, [r3, #2]
 800744e:	0a1b      	lsrs	r3, r3, #8
 8007450:	b29b      	uxth	r3, r3
 8007452:	3b01      	subs	r3, #1
 8007454:	2b0e      	cmp	r3, #14
 8007456:	f200 8152 	bhi.w	80076fe <USBD_GetDescriptor+0x2ca>
 800745a:	a201      	add	r2, pc, #4	; (adr r2, 8007460 <USBD_GetDescriptor+0x2c>)
 800745c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007460:	080074d1 	.word	0x080074d1
 8007464:	080074e9 	.word	0x080074e9
 8007468:	08007529 	.word	0x08007529
 800746c:	080076ff 	.word	0x080076ff
 8007470:	080076ff 	.word	0x080076ff
 8007474:	0800769f 	.word	0x0800769f
 8007478:	080076cb 	.word	0x080076cb
 800747c:	080076ff 	.word	0x080076ff
 8007480:	080076ff 	.word	0x080076ff
 8007484:	080076ff 	.word	0x080076ff
 8007488:	080076ff 	.word	0x080076ff
 800748c:	080076ff 	.word	0x080076ff
 8007490:	080076ff 	.word	0x080076ff
 8007494:	080076ff 	.word	0x080076ff
 8007498:	0800749d 	.word	0x0800749d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074a2:	69db      	ldr	r3, [r3, #28]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d00b      	beq.n	80074c0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074ae:	69db      	ldr	r3, [r3, #28]
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	7c12      	ldrb	r2, [r2, #16]
 80074b4:	f107 0108 	add.w	r1, r7, #8
 80074b8:	4610      	mov	r0, r2
 80074ba:	4798      	blx	r3
 80074bc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80074be:	e126      	b.n	800770e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80074c0:	6839      	ldr	r1, [r7, #0]
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 fb27 	bl	8007b16 <USBD_CtlError>
        err++;
 80074c8:	7afb      	ldrb	r3, [r7, #11]
 80074ca:	3301      	adds	r3, #1
 80074cc:	72fb      	strb	r3, [r7, #11]
      break;
 80074ce:	e11e      	b.n	800770e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	7c12      	ldrb	r2, [r2, #16]
 80074dc:	f107 0108 	add.w	r1, r7, #8
 80074e0:	4610      	mov	r0, r2
 80074e2:	4798      	blx	r3
 80074e4:	60f8      	str	r0, [r7, #12]
      break;
 80074e6:	e112      	b.n	800770e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	7c1b      	ldrb	r3, [r3, #16]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d10d      	bne.n	800750c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f8:	f107 0208 	add.w	r2, r7, #8
 80074fc:	4610      	mov	r0, r2
 80074fe:	4798      	blx	r3
 8007500:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	3301      	adds	r3, #1
 8007506:	2202      	movs	r2, #2
 8007508:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800750a:	e100      	b.n	800770e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007514:	f107 0208 	add.w	r2, r7, #8
 8007518:	4610      	mov	r0, r2
 800751a:	4798      	blx	r3
 800751c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	3301      	adds	r3, #1
 8007522:	2202      	movs	r2, #2
 8007524:	701a      	strb	r2, [r3, #0]
      break;
 8007526:	e0f2      	b.n	800770e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	885b      	ldrh	r3, [r3, #2]
 800752c:	b2db      	uxtb	r3, r3
 800752e:	2b05      	cmp	r3, #5
 8007530:	f200 80ac 	bhi.w	800768c <USBD_GetDescriptor+0x258>
 8007534:	a201      	add	r2, pc, #4	; (adr r2, 800753c <USBD_GetDescriptor+0x108>)
 8007536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800753a:	bf00      	nop
 800753c:	08007555 	.word	0x08007555
 8007540:	08007589 	.word	0x08007589
 8007544:	080075bd 	.word	0x080075bd
 8007548:	080075f1 	.word	0x080075f1
 800754c:	08007625 	.word	0x08007625
 8007550:	08007659 	.word	0x08007659
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d00b      	beq.n	8007578 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	7c12      	ldrb	r2, [r2, #16]
 800756c:	f107 0108 	add.w	r1, r7, #8
 8007570:	4610      	mov	r0, r2
 8007572:	4798      	blx	r3
 8007574:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007576:	e091      	b.n	800769c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007578:	6839      	ldr	r1, [r7, #0]
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 facb 	bl	8007b16 <USBD_CtlError>
            err++;
 8007580:	7afb      	ldrb	r3, [r7, #11]
 8007582:	3301      	adds	r3, #1
 8007584:	72fb      	strb	r3, [r7, #11]
          break;
 8007586:	e089      	b.n	800769c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d00b      	beq.n	80075ac <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	7c12      	ldrb	r2, [r2, #16]
 80075a0:	f107 0108 	add.w	r1, r7, #8
 80075a4:	4610      	mov	r0, r2
 80075a6:	4798      	blx	r3
 80075a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075aa:	e077      	b.n	800769c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80075ac:	6839      	ldr	r1, [r7, #0]
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 fab1 	bl	8007b16 <USBD_CtlError>
            err++;
 80075b4:	7afb      	ldrb	r3, [r7, #11]
 80075b6:	3301      	adds	r3, #1
 80075b8:	72fb      	strb	r3, [r7, #11]
          break;
 80075ba:	e06f      	b.n	800769c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d00b      	beq.n	80075e0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	687a      	ldr	r2, [r7, #4]
 80075d2:	7c12      	ldrb	r2, [r2, #16]
 80075d4:	f107 0108 	add.w	r1, r7, #8
 80075d8:	4610      	mov	r0, r2
 80075da:	4798      	blx	r3
 80075dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075de:	e05d      	b.n	800769c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80075e0:	6839      	ldr	r1, [r7, #0]
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 fa97 	bl	8007b16 <USBD_CtlError>
            err++;
 80075e8:	7afb      	ldrb	r3, [r7, #11]
 80075ea:	3301      	adds	r3, #1
 80075ec:	72fb      	strb	r3, [r7, #11]
          break;
 80075ee:	e055      	b.n	800769c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075f6:	691b      	ldr	r3, [r3, #16]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00b      	beq.n	8007614 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007602:	691b      	ldr	r3, [r3, #16]
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	7c12      	ldrb	r2, [r2, #16]
 8007608:	f107 0108 	add.w	r1, r7, #8
 800760c:	4610      	mov	r0, r2
 800760e:	4798      	blx	r3
 8007610:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007612:	e043      	b.n	800769c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007614:	6839      	ldr	r1, [r7, #0]
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 fa7d 	bl	8007b16 <USBD_CtlError>
            err++;
 800761c:	7afb      	ldrb	r3, [r7, #11]
 800761e:	3301      	adds	r3, #1
 8007620:	72fb      	strb	r3, [r7, #11]
          break;
 8007622:	e03b      	b.n	800769c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800762a:	695b      	ldr	r3, [r3, #20]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d00b      	beq.n	8007648 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007636:	695b      	ldr	r3, [r3, #20]
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	7c12      	ldrb	r2, [r2, #16]
 800763c:	f107 0108 	add.w	r1, r7, #8
 8007640:	4610      	mov	r0, r2
 8007642:	4798      	blx	r3
 8007644:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007646:	e029      	b.n	800769c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007648:	6839      	ldr	r1, [r7, #0]
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 fa63 	bl	8007b16 <USBD_CtlError>
            err++;
 8007650:	7afb      	ldrb	r3, [r7, #11]
 8007652:	3301      	adds	r3, #1
 8007654:	72fb      	strb	r3, [r7, #11]
          break;
 8007656:	e021      	b.n	800769c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800765e:	699b      	ldr	r3, [r3, #24]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d00b      	beq.n	800767c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800766a:	699b      	ldr	r3, [r3, #24]
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	7c12      	ldrb	r2, [r2, #16]
 8007670:	f107 0108 	add.w	r1, r7, #8
 8007674:	4610      	mov	r0, r2
 8007676:	4798      	blx	r3
 8007678:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800767a:	e00f      	b.n	800769c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800767c:	6839      	ldr	r1, [r7, #0]
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 fa49 	bl	8007b16 <USBD_CtlError>
            err++;
 8007684:	7afb      	ldrb	r3, [r7, #11]
 8007686:	3301      	adds	r3, #1
 8007688:	72fb      	strb	r3, [r7, #11]
          break;
 800768a:	e007      	b.n	800769c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800768c:	6839      	ldr	r1, [r7, #0]
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 fa41 	bl	8007b16 <USBD_CtlError>
          err++;
 8007694:	7afb      	ldrb	r3, [r7, #11]
 8007696:	3301      	adds	r3, #1
 8007698:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800769a:	bf00      	nop
      }
      break;
 800769c:	e037      	b.n	800770e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	7c1b      	ldrb	r3, [r3, #16]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d109      	bne.n	80076ba <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076ae:	f107 0208 	add.w	r2, r7, #8
 80076b2:	4610      	mov	r0, r2
 80076b4:	4798      	blx	r3
 80076b6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076b8:	e029      	b.n	800770e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80076ba:	6839      	ldr	r1, [r7, #0]
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 fa2a 	bl	8007b16 <USBD_CtlError>
        err++;
 80076c2:	7afb      	ldrb	r3, [r7, #11]
 80076c4:	3301      	adds	r3, #1
 80076c6:	72fb      	strb	r3, [r7, #11]
      break;
 80076c8:	e021      	b.n	800770e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	7c1b      	ldrb	r3, [r3, #16]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d10d      	bne.n	80076ee <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076da:	f107 0208 	add.w	r2, r7, #8
 80076de:	4610      	mov	r0, r2
 80076e0:	4798      	blx	r3
 80076e2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	3301      	adds	r3, #1
 80076e8:	2207      	movs	r2, #7
 80076ea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076ec:	e00f      	b.n	800770e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80076ee:	6839      	ldr	r1, [r7, #0]
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 fa10 	bl	8007b16 <USBD_CtlError>
        err++;
 80076f6:	7afb      	ldrb	r3, [r7, #11]
 80076f8:	3301      	adds	r3, #1
 80076fa:	72fb      	strb	r3, [r7, #11]
      break;
 80076fc:	e007      	b.n	800770e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80076fe:	6839      	ldr	r1, [r7, #0]
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 fa08 	bl	8007b16 <USBD_CtlError>
      err++;
 8007706:	7afb      	ldrb	r3, [r7, #11]
 8007708:	3301      	adds	r3, #1
 800770a:	72fb      	strb	r3, [r7, #11]
      break;
 800770c:	bf00      	nop
  }

  if (err != 0U)
 800770e:	7afb      	ldrb	r3, [r7, #11]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d11e      	bne.n	8007752 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	88db      	ldrh	r3, [r3, #6]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d016      	beq.n	800774a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800771c:	893b      	ldrh	r3, [r7, #8]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d00e      	beq.n	8007740 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	88da      	ldrh	r2, [r3, #6]
 8007726:	893b      	ldrh	r3, [r7, #8]
 8007728:	4293      	cmp	r3, r2
 800772a:	bf28      	it	cs
 800772c:	4613      	movcs	r3, r2
 800772e:	b29b      	uxth	r3, r3
 8007730:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007732:	893b      	ldrh	r3, [r7, #8]
 8007734:	461a      	mov	r2, r3
 8007736:	68f9      	ldr	r1, [r7, #12]
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 fa5d 	bl	8007bf8 <USBD_CtlSendData>
 800773e:	e009      	b.n	8007754 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007740:	6839      	ldr	r1, [r7, #0]
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 f9e7 	bl	8007b16 <USBD_CtlError>
 8007748:	e004      	b.n	8007754 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 faae 	bl	8007cac <USBD_CtlSendStatus>
 8007750:	e000      	b.n	8007754 <USBD_GetDescriptor+0x320>
    return;
 8007752:	bf00      	nop
  }
}
 8007754:	3710      	adds	r7, #16
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop

0800775c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	889b      	ldrh	r3, [r3, #4]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d131      	bne.n	80077d2 <USBD_SetAddress+0x76>
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	88db      	ldrh	r3, [r3, #6]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d12d      	bne.n	80077d2 <USBD_SetAddress+0x76>
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	885b      	ldrh	r3, [r3, #2]
 800777a:	2b7f      	cmp	r3, #127	; 0x7f
 800777c:	d829      	bhi.n	80077d2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	885b      	ldrh	r3, [r3, #2]
 8007782:	b2db      	uxtb	r3, r3
 8007784:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007788:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007790:	b2db      	uxtb	r3, r3
 8007792:	2b03      	cmp	r3, #3
 8007794:	d104      	bne.n	80077a0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007796:	6839      	ldr	r1, [r7, #0]
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 f9bc 	bl	8007b16 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800779e:	e01d      	b.n	80077dc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	7bfa      	ldrb	r2, [r7, #15]
 80077a4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80077a8:	7bfb      	ldrb	r3, [r7, #15]
 80077aa:	4619      	mov	r1, r3
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 ff0b 	bl	80085c8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 fa7a 	bl	8007cac <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80077b8:	7bfb      	ldrb	r3, [r7, #15]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d004      	beq.n	80077c8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2202      	movs	r2, #2
 80077c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077c6:	e009      	b.n	80077dc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2201      	movs	r2, #1
 80077cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077d0:	e004      	b.n	80077dc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80077d2:	6839      	ldr	r1, [r7, #0]
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 f99e 	bl	8007b16 <USBD_CtlError>
  }
}
 80077da:	bf00      	nop
 80077dc:	bf00      	nop
 80077de:	3710      	adds	r7, #16
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077ee:	2300      	movs	r3, #0
 80077f0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	885b      	ldrh	r3, [r3, #2]
 80077f6:	b2da      	uxtb	r2, r3
 80077f8:	4b4e      	ldr	r3, [pc, #312]	; (8007934 <USBD_SetConfig+0x150>)
 80077fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80077fc:	4b4d      	ldr	r3, [pc, #308]	; (8007934 <USBD_SetConfig+0x150>)
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	2b01      	cmp	r3, #1
 8007802:	d905      	bls.n	8007810 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007804:	6839      	ldr	r1, [r7, #0]
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 f985 	bl	8007b16 <USBD_CtlError>
    return USBD_FAIL;
 800780c:	2303      	movs	r3, #3
 800780e:	e08c      	b.n	800792a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007816:	b2db      	uxtb	r3, r3
 8007818:	2b02      	cmp	r3, #2
 800781a:	d002      	beq.n	8007822 <USBD_SetConfig+0x3e>
 800781c:	2b03      	cmp	r3, #3
 800781e:	d029      	beq.n	8007874 <USBD_SetConfig+0x90>
 8007820:	e075      	b.n	800790e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007822:	4b44      	ldr	r3, [pc, #272]	; (8007934 <USBD_SetConfig+0x150>)
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d020      	beq.n	800786c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800782a:	4b42      	ldr	r3, [pc, #264]	; (8007934 <USBD_SetConfig+0x150>)
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	461a      	mov	r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007834:	4b3f      	ldr	r3, [pc, #252]	; (8007934 <USBD_SetConfig+0x150>)
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	4619      	mov	r1, r3
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f7fe ffbd 	bl	80067ba <USBD_SetClassConfig>
 8007840:	4603      	mov	r3, r0
 8007842:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007844:	7bfb      	ldrb	r3, [r7, #15]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d008      	beq.n	800785c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800784a:	6839      	ldr	r1, [r7, #0]
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 f962 	bl	8007b16 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2202      	movs	r2, #2
 8007856:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800785a:	e065      	b.n	8007928 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 fa25 	bl	8007cac <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2203      	movs	r2, #3
 8007866:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800786a:	e05d      	b.n	8007928 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 fa1d 	bl	8007cac <USBD_CtlSendStatus>
      break;
 8007872:	e059      	b.n	8007928 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007874:	4b2f      	ldr	r3, [pc, #188]	; (8007934 <USBD_SetConfig+0x150>)
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d112      	bne.n	80078a2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2202      	movs	r2, #2
 8007880:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007884:	4b2b      	ldr	r3, [pc, #172]	; (8007934 <USBD_SetConfig+0x150>)
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	461a      	mov	r2, r3
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800788e:	4b29      	ldr	r3, [pc, #164]	; (8007934 <USBD_SetConfig+0x150>)
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	4619      	mov	r1, r3
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f7fe ffac 	bl	80067f2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 fa06 	bl	8007cac <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80078a0:	e042      	b.n	8007928 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80078a2:	4b24      	ldr	r3, [pc, #144]	; (8007934 <USBD_SetConfig+0x150>)
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	461a      	mov	r2, r3
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d02a      	beq.n	8007906 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	4619      	mov	r1, r3
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f7fe ff9a 	bl	80067f2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80078be:	4b1d      	ldr	r3, [pc, #116]	; (8007934 <USBD_SetConfig+0x150>)
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	461a      	mov	r2, r3
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80078c8:	4b1a      	ldr	r3, [pc, #104]	; (8007934 <USBD_SetConfig+0x150>)
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	4619      	mov	r1, r3
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f7fe ff73 	bl	80067ba <USBD_SetClassConfig>
 80078d4:	4603      	mov	r3, r0
 80078d6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80078d8:	7bfb      	ldrb	r3, [r7, #15]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d00f      	beq.n	80078fe <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80078de:	6839      	ldr	r1, [r7, #0]
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 f918 	bl	8007b16 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	4619      	mov	r1, r3
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f7fe ff7f 	bl	80067f2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2202      	movs	r2, #2
 80078f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80078fc:	e014      	b.n	8007928 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 f9d4 	bl	8007cac <USBD_CtlSendStatus>
      break;
 8007904:	e010      	b.n	8007928 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 f9d0 	bl	8007cac <USBD_CtlSendStatus>
      break;
 800790c:	e00c      	b.n	8007928 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800790e:	6839      	ldr	r1, [r7, #0]
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 f900 	bl	8007b16 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007916:	4b07      	ldr	r3, [pc, #28]	; (8007934 <USBD_SetConfig+0x150>)
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	4619      	mov	r1, r3
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f7fe ff68 	bl	80067f2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007922:	2303      	movs	r3, #3
 8007924:	73fb      	strb	r3, [r7, #15]
      break;
 8007926:	bf00      	nop
  }

  return ret;
 8007928:	7bfb      	ldrb	r3, [r7, #15]
}
 800792a:	4618      	mov	r0, r3
 800792c:	3710      	adds	r7, #16
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	200001f0 	.word	0x200001f0

08007938 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	88db      	ldrh	r3, [r3, #6]
 8007946:	2b01      	cmp	r3, #1
 8007948:	d004      	beq.n	8007954 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800794a:	6839      	ldr	r1, [r7, #0]
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 f8e2 	bl	8007b16 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007952:	e023      	b.n	800799c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800795a:	b2db      	uxtb	r3, r3
 800795c:	2b02      	cmp	r3, #2
 800795e:	dc02      	bgt.n	8007966 <USBD_GetConfig+0x2e>
 8007960:	2b00      	cmp	r3, #0
 8007962:	dc03      	bgt.n	800796c <USBD_GetConfig+0x34>
 8007964:	e015      	b.n	8007992 <USBD_GetConfig+0x5a>
 8007966:	2b03      	cmp	r3, #3
 8007968:	d00b      	beq.n	8007982 <USBD_GetConfig+0x4a>
 800796a:	e012      	b.n	8007992 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	3308      	adds	r3, #8
 8007976:	2201      	movs	r2, #1
 8007978:	4619      	mov	r1, r3
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 f93c 	bl	8007bf8 <USBD_CtlSendData>
        break;
 8007980:	e00c      	b.n	800799c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	3304      	adds	r3, #4
 8007986:	2201      	movs	r2, #1
 8007988:	4619      	mov	r1, r3
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 f934 	bl	8007bf8 <USBD_CtlSendData>
        break;
 8007990:	e004      	b.n	800799c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007992:	6839      	ldr	r1, [r7, #0]
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 f8be 	bl	8007b16 <USBD_CtlError>
        break;
 800799a:	bf00      	nop
}
 800799c:	bf00      	nop
 800799e:	3708      	adds	r7, #8
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	3b01      	subs	r3, #1
 80079b8:	2b02      	cmp	r3, #2
 80079ba:	d81e      	bhi.n	80079fa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	88db      	ldrh	r3, [r3, #6]
 80079c0:	2b02      	cmp	r3, #2
 80079c2:	d004      	beq.n	80079ce <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80079c4:	6839      	ldr	r1, [r7, #0]
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 f8a5 	bl	8007b16 <USBD_CtlError>
        break;
 80079cc:	e01a      	b.n	8007a04 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2201      	movs	r2, #1
 80079d2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d005      	beq.n	80079ea <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	68db      	ldr	r3, [r3, #12]
 80079e2:	f043 0202 	orr.w	r2, r3, #2
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	330c      	adds	r3, #12
 80079ee:	2202      	movs	r2, #2
 80079f0:	4619      	mov	r1, r3
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 f900 	bl	8007bf8 <USBD_CtlSendData>
      break;
 80079f8:	e004      	b.n	8007a04 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80079fa:	6839      	ldr	r1, [r7, #0]
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 f88a 	bl	8007b16 <USBD_CtlError>
      break;
 8007a02:	bf00      	nop
  }
}
 8007a04:	bf00      	nop
 8007a06:	3708      	adds	r7, #8
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b082      	sub	sp, #8
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	885b      	ldrh	r3, [r3, #2]
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d107      	bne.n	8007a2e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2201      	movs	r2, #1
 8007a22:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 f940 	bl	8007cac <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007a2c:	e013      	b.n	8007a56 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	885b      	ldrh	r3, [r3, #2]
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	d10b      	bne.n	8007a4e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	889b      	ldrh	r3, [r3, #4]
 8007a3a:	0a1b      	lsrs	r3, r3, #8
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	b2da      	uxtb	r2, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 f930 	bl	8007cac <USBD_CtlSendStatus>
}
 8007a4c:	e003      	b.n	8007a56 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007a4e:	6839      	ldr	r1, [r7, #0]
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 f860 	bl	8007b16 <USBD_CtlError>
}
 8007a56:	bf00      	nop
 8007a58:	3708      	adds	r7, #8
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a5e:	b580      	push	{r7, lr}
 8007a60:	b082      	sub	sp, #8
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
 8007a66:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	3b01      	subs	r3, #1
 8007a72:	2b02      	cmp	r3, #2
 8007a74:	d80b      	bhi.n	8007a8e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	885b      	ldrh	r3, [r3, #2]
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d10c      	bne.n	8007a98 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 f910 	bl	8007cac <USBD_CtlSendStatus>
      }
      break;
 8007a8c:	e004      	b.n	8007a98 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007a8e:	6839      	ldr	r1, [r7, #0]
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 f840 	bl	8007b16 <USBD_CtlError>
      break;
 8007a96:	e000      	b.n	8007a9a <USBD_ClrFeature+0x3c>
      break;
 8007a98:	bf00      	nop
  }
}
 8007a9a:	bf00      	nop
 8007a9c:	3708      	adds	r7, #8
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}

08007aa2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007aa2:	b580      	push	{r7, lr}
 8007aa4:	b084      	sub	sp, #16
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
 8007aaa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	781a      	ldrb	r2, [r3, #0]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	3301      	adds	r3, #1
 8007abc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	781a      	ldrb	r2, [r3, #0]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007acc:	68f8      	ldr	r0, [r7, #12]
 8007ace:	f7ff fa17 	bl	8006f00 <SWAPBYTE>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	3301      	adds	r3, #1
 8007ade:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007ae6:	68f8      	ldr	r0, [r7, #12]
 8007ae8:	f7ff fa0a 	bl	8006f00 <SWAPBYTE>
 8007aec:	4603      	mov	r3, r0
 8007aee:	461a      	mov	r2, r3
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	3301      	adds	r3, #1
 8007af8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	3301      	adds	r3, #1
 8007afe:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007b00:	68f8      	ldr	r0, [r7, #12]
 8007b02:	f7ff f9fd 	bl	8006f00 <SWAPBYTE>
 8007b06:	4603      	mov	r3, r0
 8007b08:	461a      	mov	r2, r3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	80da      	strh	r2, [r3, #6]
}
 8007b0e:	bf00      	nop
 8007b10:	3710      	adds	r7, #16
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}

08007b16 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b16:	b580      	push	{r7, lr}
 8007b18:	b082      	sub	sp, #8
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
 8007b1e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b20:	2180      	movs	r1, #128	; 0x80
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 fce6 	bl	80084f4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007b28:	2100      	movs	r1, #0
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 fce2 	bl	80084f4 <USBD_LL_StallEP>
}
 8007b30:	bf00      	nop
 8007b32:	3708      	adds	r7, #8
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b086      	sub	sp, #24
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007b44:	2300      	movs	r3, #0
 8007b46:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d036      	beq.n	8007bbc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007b52:	6938      	ldr	r0, [r7, #16]
 8007b54:	f000 f836 	bl	8007bc4 <USBD_GetLen>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	005b      	lsls	r3, r3, #1
 8007b60:	b29a      	uxth	r2, r3
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007b66:	7dfb      	ldrb	r3, [r7, #23]
 8007b68:	68ba      	ldr	r2, [r7, #8]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	7812      	ldrb	r2, [r2, #0]
 8007b70:	701a      	strb	r2, [r3, #0]
  idx++;
 8007b72:	7dfb      	ldrb	r3, [r7, #23]
 8007b74:	3301      	adds	r3, #1
 8007b76:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007b78:	7dfb      	ldrb	r3, [r7, #23]
 8007b7a:	68ba      	ldr	r2, [r7, #8]
 8007b7c:	4413      	add	r3, r2
 8007b7e:	2203      	movs	r2, #3
 8007b80:	701a      	strb	r2, [r3, #0]
  idx++;
 8007b82:	7dfb      	ldrb	r3, [r7, #23]
 8007b84:	3301      	adds	r3, #1
 8007b86:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007b88:	e013      	b.n	8007bb2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007b8a:	7dfb      	ldrb	r3, [r7, #23]
 8007b8c:	68ba      	ldr	r2, [r7, #8]
 8007b8e:	4413      	add	r3, r2
 8007b90:	693a      	ldr	r2, [r7, #16]
 8007b92:	7812      	ldrb	r2, [r2, #0]
 8007b94:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	3301      	adds	r3, #1
 8007b9a:	613b      	str	r3, [r7, #16]
    idx++;
 8007b9c:	7dfb      	ldrb	r3, [r7, #23]
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007ba2:	7dfb      	ldrb	r3, [r7, #23]
 8007ba4:	68ba      	ldr	r2, [r7, #8]
 8007ba6:	4413      	add	r3, r2
 8007ba8:	2200      	movs	r2, #0
 8007baa:	701a      	strb	r2, [r3, #0]
    idx++;
 8007bac:	7dfb      	ldrb	r3, [r7, #23]
 8007bae:	3301      	adds	r3, #1
 8007bb0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d1e7      	bne.n	8007b8a <USBD_GetString+0x52>
 8007bba:	e000      	b.n	8007bbe <USBD_GetString+0x86>
    return;
 8007bbc:	bf00      	nop
  }
}
 8007bbe:	3718      	adds	r7, #24
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b085      	sub	sp, #20
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007bd4:	e005      	b.n	8007be2 <USBD_GetLen+0x1e>
  {
    len++;
 8007bd6:	7bfb      	ldrb	r3, [r7, #15]
 8007bd8:	3301      	adds	r3, #1
 8007bda:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	3301      	adds	r3, #1
 8007be0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d1f5      	bne.n	8007bd6 <USBD_GetLen+0x12>
  }

  return len;
 8007bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3714      	adds	r7, #20
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2202      	movs	r2, #2
 8007c08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	68ba      	ldr	r2, [r7, #8]
 8007c1c:	2100      	movs	r1, #0
 8007c1e:	68f8      	ldr	r0, [r7, #12]
 8007c20:	f000 fcf1 	bl	8008606 <USBD_LL_Transmit>

  return USBD_OK;
 8007c24:	2300      	movs	r3, #0
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3710      	adds	r7, #16
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b084      	sub	sp, #16
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	60f8      	str	r0, [r7, #12]
 8007c36:	60b9      	str	r1, [r7, #8]
 8007c38:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	68ba      	ldr	r2, [r7, #8]
 8007c3e:	2100      	movs	r1, #0
 8007c40:	68f8      	ldr	r0, [r7, #12]
 8007c42:	f000 fce0 	bl	8008606 <USBD_LL_Transmit>

  return USBD_OK;
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3710      	adds	r7, #16
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	60f8      	str	r0, [r7, #12]
 8007c58:	60b9      	str	r1, [r7, #8]
 8007c5a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2203      	movs	r2, #3
 8007c60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	68ba      	ldr	r2, [r7, #8]
 8007c78:	2100      	movs	r1, #0
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	f000 fce4 	bl	8008648 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c80:	2300      	movs	r3, #0
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3710      	adds	r7, #16
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}

08007c8a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007c8a:	b580      	push	{r7, lr}
 8007c8c:	b084      	sub	sp, #16
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	60f8      	str	r0, [r7, #12]
 8007c92:	60b9      	str	r1, [r7, #8]
 8007c94:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	68ba      	ldr	r2, [r7, #8]
 8007c9a:	2100      	movs	r1, #0
 8007c9c:	68f8      	ldr	r0, [r7, #12]
 8007c9e:	f000 fcd3 	bl	8008648 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ca2:	2300      	movs	r3, #0
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3710      	adds	r7, #16
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2204      	movs	r2, #4
 8007cb8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	2100      	movs	r1, #0
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 fc9f 	bl	8008606 <USBD_LL_Transmit>

  return USBD_OK;
 8007cc8:	2300      	movs	r3, #0
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3708      	adds	r7, #8
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}

08007cd2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007cd2:	b580      	push	{r7, lr}
 8007cd4:	b082      	sub	sp, #8
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2205      	movs	r2, #5
 8007cde:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	2100      	movs	r1, #0
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 fcad 	bl	8008648 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007cee:	2300      	movs	r3, #0
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3708      	adds	r7, #8
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	4912      	ldr	r1, [pc, #72]	; (8007d48 <MX_USB_DEVICE_Init+0x50>)
 8007d00:	4812      	ldr	r0, [pc, #72]	; (8007d4c <MX_USB_DEVICE_Init+0x54>)
 8007d02:	f7fe fcdd 	bl	80066c0 <USBD_Init>
 8007d06:	4603      	mov	r3, r0
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d001      	beq.n	8007d10 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007d0c:	f7f8 fdba 	bl	8000884 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8007d10:	490f      	ldr	r1, [pc, #60]	; (8007d50 <MX_USB_DEVICE_Init+0x58>)
 8007d12:	480e      	ldr	r0, [pc, #56]	; (8007d4c <MX_USB_DEVICE_Init+0x54>)
 8007d14:	f7fe fd04 	bl	8006720 <USBD_RegisterClass>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d001      	beq.n	8007d22 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007d1e:	f7f8 fdb1 	bl	8000884 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8007d22:	490c      	ldr	r1, [pc, #48]	; (8007d54 <MX_USB_DEVICE_Init+0x5c>)
 8007d24:	4809      	ldr	r0, [pc, #36]	; (8007d4c <MX_USB_DEVICE_Init+0x54>)
 8007d26:	f7fe fc3b 	bl	80065a0 <USBD_CDC_RegisterInterface>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d001      	beq.n	8007d34 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007d30:	f7f8 fda8 	bl	8000884 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8007d34:	4805      	ldr	r0, [pc, #20]	; (8007d4c <MX_USB_DEVICE_Init+0x54>)
 8007d36:	f7fe fd29 	bl	800678c <USBD_Start>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d001      	beq.n	8007d44 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007d40:	f7f8 fda0 	bl	8000884 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007d44:	bf00      	nop
 8007d46:	bd80      	pop	{r7, pc}
 8007d48:	200000ac 	.word	0x200000ac
 8007d4c:	200001f4 	.word	0x200001f4
 8007d50:	20000018 	.word	0x20000018
 8007d54:	20000098 	.word	0x20000098

08007d58 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	4905      	ldr	r1, [pc, #20]	; (8007d74 <CDC_Init_HS+0x1c>)
 8007d60:	4805      	ldr	r0, [pc, #20]	; (8007d78 <CDC_Init_HS+0x20>)
 8007d62:	f7fe fc37 	bl	80065d4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8007d66:	4905      	ldr	r1, [pc, #20]	; (8007d7c <CDC_Init_HS+0x24>)
 8007d68:	4803      	ldr	r0, [pc, #12]	; (8007d78 <CDC_Init_HS+0x20>)
 8007d6a:	f7fe fc55 	bl	8006618 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007d6e:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	20000cd0 	.word	0x20000cd0
 8007d78:	200001f4 	.word	0x200001f4
 8007d7c:	200004d0 	.word	0x200004d0

08007d80 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8007d80:	b480      	push	{r7}
 8007d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8007d84:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	4603      	mov	r3, r0
 8007d98:	6039      	str	r1, [r7, #0]
 8007d9a:	71fb      	strb	r3, [r7, #7]
 8007d9c:	4613      	mov	r3, r2
 8007d9e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8007da0:	79fb      	ldrb	r3, [r7, #7]
 8007da2:	2b23      	cmp	r3, #35	; 0x23
 8007da4:	d84a      	bhi.n	8007e3c <CDC_Control_HS+0xac>
 8007da6:	a201      	add	r2, pc, #4	; (adr r2, 8007dac <CDC_Control_HS+0x1c>)
 8007da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dac:	08007e3d 	.word	0x08007e3d
 8007db0:	08007e3d 	.word	0x08007e3d
 8007db4:	08007e3d 	.word	0x08007e3d
 8007db8:	08007e3d 	.word	0x08007e3d
 8007dbc:	08007e3d 	.word	0x08007e3d
 8007dc0:	08007e3d 	.word	0x08007e3d
 8007dc4:	08007e3d 	.word	0x08007e3d
 8007dc8:	08007e3d 	.word	0x08007e3d
 8007dcc:	08007e3d 	.word	0x08007e3d
 8007dd0:	08007e3d 	.word	0x08007e3d
 8007dd4:	08007e3d 	.word	0x08007e3d
 8007dd8:	08007e3d 	.word	0x08007e3d
 8007ddc:	08007e3d 	.word	0x08007e3d
 8007de0:	08007e3d 	.word	0x08007e3d
 8007de4:	08007e3d 	.word	0x08007e3d
 8007de8:	08007e3d 	.word	0x08007e3d
 8007dec:	08007e3d 	.word	0x08007e3d
 8007df0:	08007e3d 	.word	0x08007e3d
 8007df4:	08007e3d 	.word	0x08007e3d
 8007df8:	08007e3d 	.word	0x08007e3d
 8007dfc:	08007e3d 	.word	0x08007e3d
 8007e00:	08007e3d 	.word	0x08007e3d
 8007e04:	08007e3d 	.word	0x08007e3d
 8007e08:	08007e3d 	.word	0x08007e3d
 8007e0c:	08007e3d 	.word	0x08007e3d
 8007e10:	08007e3d 	.word	0x08007e3d
 8007e14:	08007e3d 	.word	0x08007e3d
 8007e18:	08007e3d 	.word	0x08007e3d
 8007e1c:	08007e3d 	.word	0x08007e3d
 8007e20:	08007e3d 	.word	0x08007e3d
 8007e24:	08007e3d 	.word	0x08007e3d
 8007e28:	08007e3d 	.word	0x08007e3d
 8007e2c:	08007e3d 	.word	0x08007e3d
 8007e30:	08007e3d 	.word	0x08007e3d
 8007e34:	08007e3d 	.word	0x08007e3d
 8007e38:	08007e3d 	.word	0x08007e3d
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007e3c:	bf00      	nop
  }

  return (USBD_OK);
 8007e3e:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	370c      	adds	r7, #12
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b082      	sub	sp, #8
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8007e56:	6879      	ldr	r1, [r7, #4]
 8007e58:	4805      	ldr	r0, [pc, #20]	; (8007e70 <CDC_Receive_HS+0x24>)
 8007e5a:	f7fe fbdd 	bl	8006618 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8007e5e:	4804      	ldr	r0, [pc, #16]	; (8007e70 <CDC_Receive_HS+0x24>)
 8007e60:	f7fe fbf8 	bl	8006654 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007e64:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3708      	adds	r7, #8
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop
 8007e70:	200001f4 	.word	0x200001f4

08007e74 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b087      	sub	sp, #28
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	60f8      	str	r0, [r7, #12]
 8007e7c:	60b9      	str	r1, [r7, #8]
 8007e7e:	4613      	mov	r3, r2
 8007e80:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007e82:	2300      	movs	r3, #0
 8007e84:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8007e86:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	371c      	adds	r7, #28
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr
	...

08007e98 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	6039      	str	r1, [r7, #0]
 8007ea2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	2212      	movs	r2, #18
 8007ea8:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8007eaa:	4b03      	ldr	r3, [pc, #12]	; (8007eb8 <USBD_HS_DeviceDescriptor+0x20>)
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr
 8007eb8:	200000cc 	.word	0x200000cc

08007ebc <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	6039      	str	r1, [r7, #0]
 8007ec6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	2204      	movs	r2, #4
 8007ecc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007ece:	4b03      	ldr	r3, [pc, #12]	; (8007edc <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr
 8007edc:	200000ec 	.word	0x200000ec

08007ee0 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b082      	sub	sp, #8
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	6039      	str	r1, [r7, #0]
 8007eea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007eec:	79fb      	ldrb	r3, [r7, #7]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d105      	bne.n	8007efe <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8007ef2:	683a      	ldr	r2, [r7, #0]
 8007ef4:	4907      	ldr	r1, [pc, #28]	; (8007f14 <USBD_HS_ProductStrDescriptor+0x34>)
 8007ef6:	4808      	ldr	r0, [pc, #32]	; (8007f18 <USBD_HS_ProductStrDescriptor+0x38>)
 8007ef8:	f7ff fe1e 	bl	8007b38 <USBD_GetString>
 8007efc:	e004      	b.n	8007f08 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8007efe:	683a      	ldr	r2, [r7, #0]
 8007f00:	4904      	ldr	r1, [pc, #16]	; (8007f14 <USBD_HS_ProductStrDescriptor+0x34>)
 8007f02:	4805      	ldr	r0, [pc, #20]	; (8007f18 <USBD_HS_ProductStrDescriptor+0x38>)
 8007f04:	f7ff fe18 	bl	8007b38 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f08:	4b02      	ldr	r3, [pc, #8]	; (8007f14 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3708      	adds	r7, #8
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}
 8007f12:	bf00      	nop
 8007f14:	200014d0 	.word	0x200014d0
 8007f18:	08008a60 	.word	0x08008a60

08007f1c <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	4603      	mov	r3, r0
 8007f24:	6039      	str	r1, [r7, #0]
 8007f26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007f28:	683a      	ldr	r2, [r7, #0]
 8007f2a:	4904      	ldr	r1, [pc, #16]	; (8007f3c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8007f2c:	4804      	ldr	r0, [pc, #16]	; (8007f40 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8007f2e:	f7ff fe03 	bl	8007b38 <USBD_GetString>
  return USBD_StrDesc;
 8007f32:	4b02      	ldr	r3, [pc, #8]	; (8007f3c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3708      	adds	r7, #8
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	200014d0 	.word	0x200014d0
 8007f40:	08008a78 	.word	0x08008a78

08007f44 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b082      	sub	sp, #8
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	6039      	str	r1, [r7, #0]
 8007f4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	221a      	movs	r2, #26
 8007f54:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007f56:	f000 f855 	bl	8008004 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8007f5a:	4b02      	ldr	r3, [pc, #8]	; (8007f64 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3708      	adds	r7, #8
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	200000f0 	.word	0x200000f0

08007f68 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b082      	sub	sp, #8
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	4603      	mov	r3, r0
 8007f70:	6039      	str	r1, [r7, #0]
 8007f72:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007f74:	79fb      	ldrb	r3, [r7, #7]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d105      	bne.n	8007f86 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8007f7a:	683a      	ldr	r2, [r7, #0]
 8007f7c:	4907      	ldr	r1, [pc, #28]	; (8007f9c <USBD_HS_ConfigStrDescriptor+0x34>)
 8007f7e:	4808      	ldr	r0, [pc, #32]	; (8007fa0 <USBD_HS_ConfigStrDescriptor+0x38>)
 8007f80:	f7ff fdda 	bl	8007b38 <USBD_GetString>
 8007f84:	e004      	b.n	8007f90 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8007f86:	683a      	ldr	r2, [r7, #0]
 8007f88:	4904      	ldr	r1, [pc, #16]	; (8007f9c <USBD_HS_ConfigStrDescriptor+0x34>)
 8007f8a:	4805      	ldr	r0, [pc, #20]	; (8007fa0 <USBD_HS_ConfigStrDescriptor+0x38>)
 8007f8c:	f7ff fdd4 	bl	8007b38 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f90:	4b02      	ldr	r3, [pc, #8]	; (8007f9c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3708      	adds	r7, #8
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	200014d0 	.word	0x200014d0
 8007fa0:	08008a8c 	.word	0x08008a8c

08007fa4 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b082      	sub	sp, #8
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	4603      	mov	r3, r0
 8007fac:	6039      	str	r1, [r7, #0]
 8007fae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007fb0:	79fb      	ldrb	r3, [r7, #7]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d105      	bne.n	8007fc2 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8007fb6:	683a      	ldr	r2, [r7, #0]
 8007fb8:	4907      	ldr	r1, [pc, #28]	; (8007fd8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8007fba:	4808      	ldr	r0, [pc, #32]	; (8007fdc <USBD_HS_InterfaceStrDescriptor+0x38>)
 8007fbc:	f7ff fdbc 	bl	8007b38 <USBD_GetString>
 8007fc0:	e004      	b.n	8007fcc <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8007fc2:	683a      	ldr	r2, [r7, #0]
 8007fc4:	4904      	ldr	r1, [pc, #16]	; (8007fd8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8007fc6:	4805      	ldr	r0, [pc, #20]	; (8007fdc <USBD_HS_InterfaceStrDescriptor+0x38>)
 8007fc8:	f7ff fdb6 	bl	8007b38 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007fcc:	4b02      	ldr	r3, [pc, #8]	; (8007fd8 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3708      	adds	r7, #8
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
 8007fd6:	bf00      	nop
 8007fd8:	200014d0 	.word	0x200014d0
 8007fdc:	08008a98 	.word	0x08008a98

08007fe0 <USBD_HS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	6039      	str	r1, [r7, #0]
 8007fea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_BOSDesc);
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	220c      	movs	r2, #12
 8007ff0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_HS_BOSDesc;
 8007ff2:	4b03      	ldr	r3, [pc, #12]	; (8008000 <USBD_HS_USR_BOSDescriptor+0x20>)
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	370c      	adds	r7, #12
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr
 8008000:	200000e0 	.word	0x200000e0

08008004 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800800a:	4b0f      	ldr	r3, [pc, #60]	; (8008048 <Get_SerialNum+0x44>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008010:	4b0e      	ldr	r3, [pc, #56]	; (800804c <Get_SerialNum+0x48>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008016:	4b0e      	ldr	r3, [pc, #56]	; (8008050 <Get_SerialNum+0x4c>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800801c:	68fa      	ldr	r2, [r7, #12]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	4413      	add	r3, r2
 8008022:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d009      	beq.n	800803e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800802a:	2208      	movs	r2, #8
 800802c:	4909      	ldr	r1, [pc, #36]	; (8008054 <Get_SerialNum+0x50>)
 800802e:	68f8      	ldr	r0, [r7, #12]
 8008030:	f000 f814 	bl	800805c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008034:	2204      	movs	r2, #4
 8008036:	4908      	ldr	r1, [pc, #32]	; (8008058 <Get_SerialNum+0x54>)
 8008038:	68b8      	ldr	r0, [r7, #8]
 800803a:	f000 f80f 	bl	800805c <IntToUnicode>
  }
}
 800803e:	bf00      	nop
 8008040:	3710      	adds	r7, #16
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
 8008046:	bf00      	nop
 8008048:	1ff0f420 	.word	0x1ff0f420
 800804c:	1ff0f424 	.word	0x1ff0f424
 8008050:	1ff0f428 	.word	0x1ff0f428
 8008054:	200000f2 	.word	0x200000f2
 8008058:	20000102 	.word	0x20000102

0800805c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800805c:	b480      	push	{r7}
 800805e:	b087      	sub	sp, #28
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	4613      	mov	r3, r2
 8008068:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800806a:	2300      	movs	r3, #0
 800806c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800806e:	2300      	movs	r3, #0
 8008070:	75fb      	strb	r3, [r7, #23]
 8008072:	e027      	b.n	80080c4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	0f1b      	lsrs	r3, r3, #28
 8008078:	2b09      	cmp	r3, #9
 800807a:	d80b      	bhi.n	8008094 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	0f1b      	lsrs	r3, r3, #28
 8008080:	b2da      	uxtb	r2, r3
 8008082:	7dfb      	ldrb	r3, [r7, #23]
 8008084:	005b      	lsls	r3, r3, #1
 8008086:	4619      	mov	r1, r3
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	440b      	add	r3, r1
 800808c:	3230      	adds	r2, #48	; 0x30
 800808e:	b2d2      	uxtb	r2, r2
 8008090:	701a      	strb	r2, [r3, #0]
 8008092:	e00a      	b.n	80080aa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	0f1b      	lsrs	r3, r3, #28
 8008098:	b2da      	uxtb	r2, r3
 800809a:	7dfb      	ldrb	r3, [r7, #23]
 800809c:	005b      	lsls	r3, r3, #1
 800809e:	4619      	mov	r1, r3
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	440b      	add	r3, r1
 80080a4:	3237      	adds	r2, #55	; 0x37
 80080a6:	b2d2      	uxtb	r2, r2
 80080a8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	011b      	lsls	r3, r3, #4
 80080ae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80080b0:	7dfb      	ldrb	r3, [r7, #23]
 80080b2:	005b      	lsls	r3, r3, #1
 80080b4:	3301      	adds	r3, #1
 80080b6:	68ba      	ldr	r2, [r7, #8]
 80080b8:	4413      	add	r3, r2
 80080ba:	2200      	movs	r2, #0
 80080bc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80080be:	7dfb      	ldrb	r3, [r7, #23]
 80080c0:	3301      	adds	r3, #1
 80080c2:	75fb      	strb	r3, [r7, #23]
 80080c4:	7dfa      	ldrb	r2, [r7, #23]
 80080c6:	79fb      	ldrb	r3, [r7, #7]
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d3d3      	bcc.n	8008074 <IntToUnicode+0x18>
  }
}
 80080cc:	bf00      	nop
 80080ce:	bf00      	nop
 80080d0:	371c      	adds	r7, #28
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr
	...

080080dc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b0aa      	sub	sp, #168	; 0xa8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080e4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80080e8:	2200      	movs	r2, #0
 80080ea:	601a      	str	r2, [r3, #0]
 80080ec:	605a      	str	r2, [r3, #4]
 80080ee:	609a      	str	r2, [r3, #8]
 80080f0:	60da      	str	r2, [r3, #12]
 80080f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80080f4:	f107 0310 	add.w	r3, r7, #16
 80080f8:	2284      	movs	r2, #132	; 0x84
 80080fa:	2100      	movs	r1, #0
 80080fc:	4618      	mov	r0, r3
 80080fe:	f000 fc13 	bl	8008928 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a26      	ldr	r2, [pc, #152]	; (80081a0 <HAL_PCD_MspInit+0xc4>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d145      	bne.n	8008198 <HAL_PCD_MspInit+0xbc>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800810c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008110:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8008112:	2300      	movs	r3, #0
 8008114:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008118:	f107 0310 	add.w	r3, r7, #16
 800811c:	4618      	mov	r0, r3
 800811e:	f7fb fe03 	bl	8003d28 <HAL_RCCEx_PeriphCLKConfig>
 8008122:	4603      	mov	r3, r0
 8008124:	2b00      	cmp	r3, #0
 8008126:	d001      	beq.n	800812c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8008128:	f7f8 fbac 	bl	8000884 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800812c:	4b1d      	ldr	r3, [pc, #116]	; (80081a4 <HAL_PCD_MspInit+0xc8>)
 800812e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008130:	4a1c      	ldr	r2, [pc, #112]	; (80081a4 <HAL_PCD_MspInit+0xc8>)
 8008132:	f043 0302 	orr.w	r3, r3, #2
 8008136:	6313      	str	r3, [r2, #48]	; 0x30
 8008138:	4b1a      	ldr	r3, [pc, #104]	; (80081a4 <HAL_PCD_MspInit+0xc8>)
 800813a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800813c:	f003 0302 	and.w	r3, r3, #2
 8008140:	60fb      	str	r3, [r7, #12]
 8008142:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8008144:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8008148:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800814c:	2302      	movs	r3, #2
 800814e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008152:	2300      	movs	r3, #0
 8008154:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008158:	2303      	movs	r3, #3
 800815a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800815e:	230c      	movs	r3, #12
 8008160:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008164:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8008168:	4619      	mov	r1, r3
 800816a:	480f      	ldr	r0, [pc, #60]	; (80081a8 <HAL_PCD_MspInit+0xcc>)
 800816c:	f7f9 fca4 	bl	8001ab8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8008170:	4b0c      	ldr	r3, [pc, #48]	; (80081a4 <HAL_PCD_MspInit+0xc8>)
 8008172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008174:	4a0b      	ldr	r2, [pc, #44]	; (80081a4 <HAL_PCD_MspInit+0xc8>)
 8008176:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800817a:	6313      	str	r3, [r2, #48]	; 0x30
 800817c:	4b09      	ldr	r3, [pc, #36]	; (80081a4 <HAL_PCD_MspInit+0xc8>)
 800817e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008180:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008184:	60bb      	str	r3, [r7, #8]
 8008186:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8008188:	2200      	movs	r2, #0
 800818a:	2100      	movs	r1, #0
 800818c:	204d      	movs	r0, #77	; 0x4d
 800818e:	f7f9 fc5c 	bl	8001a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8008192:	204d      	movs	r0, #77	; 0x4d
 8008194:	f7f9 fc75 	bl	8001a82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8008198:	bf00      	nop
 800819a:	37a8      	adds	r7, #168	; 0xa8
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	40040000 	.word	0x40040000
 80081a4:	40023800 	.word	0x40023800
 80081a8:	40020400 	.word	0x40020400

080081ac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80081c0:	4619      	mov	r1, r3
 80081c2:	4610      	mov	r0, r2
 80081c4:	f7fe fb2f 	bl	8006826 <USBD_LL_SetupStage>
}
 80081c8:	bf00      	nop
 80081ca:	3708      	adds	r7, #8
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	460b      	mov	r3, r1
 80081da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 80081e2:	78fa      	ldrb	r2, [r7, #3]
 80081e4:	6879      	ldr	r1, [r7, #4]
 80081e6:	4613      	mov	r3, r2
 80081e8:	00db      	lsls	r3, r3, #3
 80081ea:	4413      	add	r3, r2
 80081ec:	009b      	lsls	r3, r3, #2
 80081ee:	440b      	add	r3, r1
 80081f0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	78fb      	ldrb	r3, [r7, #3]
 80081f8:	4619      	mov	r1, r3
 80081fa:	f7fe fb69 	bl	80068d0 <USBD_LL_DataOutStage>
}
 80081fe:	bf00      	nop
 8008200:	3708      	adds	r7, #8
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}

08008206 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008206:	b580      	push	{r7, lr}
 8008208:	b082      	sub	sp, #8
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
 800820e:	460b      	mov	r3, r1
 8008210:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8008218:	78fa      	ldrb	r2, [r7, #3]
 800821a:	6879      	ldr	r1, [r7, #4]
 800821c:	4613      	mov	r3, r2
 800821e:	00db      	lsls	r3, r3, #3
 8008220:	4413      	add	r3, r2
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	440b      	add	r3, r1
 8008226:	334c      	adds	r3, #76	; 0x4c
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	78fb      	ldrb	r3, [r7, #3]
 800822c:	4619      	mov	r1, r3
 800822e:	f7fe fc02 	bl	8006a36 <USBD_LL_DataInStage>
}
 8008232:	bf00      	nop
 8008234:	3708      	adds	r7, #8
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}

0800823a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800823a:	b580      	push	{r7, lr}
 800823c:	b082      	sub	sp, #8
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8008248:	4618      	mov	r0, r3
 800824a:	f7fe fd36 	bl	8006cba <USBD_LL_SOF>
}
 800824e:	bf00      	nop
 8008250:	3708      	adds	r7, #8
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008256:	b580      	push	{r7, lr}
 8008258:	b084      	sub	sp, #16
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800825e:	2301      	movs	r3, #1
 8008260:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	68db      	ldr	r3, [r3, #12]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d102      	bne.n	8008270 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800826a:	2300      	movs	r3, #0
 800826c:	73fb      	strb	r3, [r7, #15]
 800826e:	e008      	b.n	8008282 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	2b02      	cmp	r3, #2
 8008276:	d102      	bne.n	800827e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008278:	2301      	movs	r3, #1
 800827a:	73fb      	strb	r3, [r7, #15]
 800827c:	e001      	b.n	8008282 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800827e:	f7f8 fb01 	bl	8000884 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8008288:	7bfa      	ldrb	r2, [r7, #15]
 800828a:	4611      	mov	r1, r2
 800828c:	4618      	mov	r0, r3
 800828e:	f7fe fcd6 	bl	8006c3e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8008298:	4618      	mov	r0, r3
 800829a:	f7fe fc7e 	bl	8006b9a <USBD_LL_Reset>
}
 800829e:	bf00      	nop
 80082a0:	3710      	adds	r7, #16
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}
	...

080082a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80082b6:	4618      	mov	r0, r3
 80082b8:	f7fe fcd1 	bl	8006c5e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	687a      	ldr	r2, [r7, #4]
 80082c8:	6812      	ldr	r2, [r2, #0]
 80082ca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80082ce:	f043 0301 	orr.w	r3, r3, #1
 80082d2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6a1b      	ldr	r3, [r3, #32]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d005      	beq.n	80082e8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80082dc:	4b04      	ldr	r3, [pc, #16]	; (80082f0 <HAL_PCD_SuspendCallback+0x48>)
 80082de:	691b      	ldr	r3, [r3, #16]
 80082e0:	4a03      	ldr	r2, [pc, #12]	; (80082f0 <HAL_PCD_SuspendCallback+0x48>)
 80082e2:	f043 0306 	orr.w	r3, r3, #6
 80082e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80082e8:	bf00      	nop
 80082ea:	3708      	adds	r7, #8
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	e000ed00 	.word	0xe000ed00

080082f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b082      	sub	sp, #8
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8008302:	4618      	mov	r0, r3
 8008304:	f7fe fcc1 	bl	8006c8a <USBD_LL_Resume>
}
 8008308:	bf00      	nop
 800830a:	3708      	adds	r7, #8
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b082      	sub	sp, #8
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	460b      	mov	r3, r1
 800831a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8008322:	78fa      	ldrb	r2, [r7, #3]
 8008324:	4611      	mov	r1, r2
 8008326:	4618      	mov	r0, r3
 8008328:	f7fe fd19 	bl	8006d5e <USBD_LL_IsoOUTIncomplete>
}
 800832c:	bf00      	nop
 800832e:	3708      	adds	r7, #8
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	460b      	mov	r3, r1
 800833e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8008346:	78fa      	ldrb	r2, [r7, #3]
 8008348:	4611      	mov	r1, r2
 800834a:	4618      	mov	r0, r3
 800834c:	f7fe fcd5 	bl	8006cfa <USBD_LL_IsoINIncomplete>
}
 8008350:	bf00      	nop
 8008352:	3708      	adds	r7, #8
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8008366:	4618      	mov	r0, r3
 8008368:	f7fe fd2b 	bl	8006dc2 <USBD_LL_DevConnected>
}
 800836c:	bf00      	nop
 800836e:	3708      	adds	r7, #8
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8008382:	4618      	mov	r0, r3
 8008384:	f7fe fd28 	bl	8006dd8 <USBD_LL_DevDisconnected>
}
 8008388:	bf00      	nop
 800838a:	3708      	adds	r7, #8
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	2b01      	cmp	r3, #1
 800839e:	d140      	bne.n	8008422 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 80083a0:	4a22      	ldr	r2, [pc, #136]	; (800842c <USBD_LL_Init+0x9c>)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_HS;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4a20      	ldr	r2, [pc, #128]	; (800842c <USBD_LL_Init+0x9c>)
 80083ac:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80083b0:	4b1e      	ldr	r3, [pc, #120]	; (800842c <USBD_LL_Init+0x9c>)
 80083b2:	4a1f      	ldr	r2, [pc, #124]	; (8008430 <USBD_LL_Init+0xa0>)
 80083b4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 8;
 80083b6:	4b1d      	ldr	r3, [pc, #116]	; (800842c <USBD_LL_Init+0x9c>)
 80083b8:	2208      	movs	r2, #8
 80083ba:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 80083bc:	4b1b      	ldr	r3, [pc, #108]	; (800842c <USBD_LL_Init+0x9c>)
 80083be:	2202      	movs	r2, #2
 80083c0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80083c2:	4b1a      	ldr	r3, [pc, #104]	; (800842c <USBD_LL_Init+0x9c>)
 80083c4:	2200      	movs	r2, #0
 80083c6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80083c8:	4b18      	ldr	r3, [pc, #96]	; (800842c <USBD_LL_Init+0x9c>)
 80083ca:	2202      	movs	r2, #2
 80083cc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80083ce:	4b17      	ldr	r3, [pc, #92]	; (800842c <USBD_LL_Init+0x9c>)
 80083d0:	2200      	movs	r2, #0
 80083d2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80083d4:	4b15      	ldr	r3, [pc, #84]	; (800842c <USBD_LL_Init+0x9c>)
 80083d6:	2200      	movs	r2, #0
 80083d8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80083da:	4b14      	ldr	r3, [pc, #80]	; (800842c <USBD_LL_Init+0x9c>)
 80083dc:	2200      	movs	r2, #0
 80083de:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80083e0:	4b12      	ldr	r3, [pc, #72]	; (800842c <USBD_LL_Init+0x9c>)
 80083e2:	2200      	movs	r2, #0
 80083e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80083e6:	4b11      	ldr	r3, [pc, #68]	; (800842c <USBD_LL_Init+0x9c>)
 80083e8:	2200      	movs	r2, #0
 80083ea:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80083ec:	4b0f      	ldr	r3, [pc, #60]	; (800842c <USBD_LL_Init+0x9c>)
 80083ee:	2200      	movs	r2, #0
 80083f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80083f2:	480e      	ldr	r0, [pc, #56]	; (800842c <USBD_LL_Init+0x9c>)
 80083f4:	f7f9 fd3f 	bl	8001e76 <HAL_PCD_Init>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d001      	beq.n	8008402 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80083fe:	f7f8 fa41 	bl	8000884 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8008402:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008406:	4809      	ldr	r0, [pc, #36]	; (800842c <USBD_LL_Init+0x9c>)
 8008408:	f7fa ffb9 	bl	800337e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800840c:	2280      	movs	r2, #128	; 0x80
 800840e:	2100      	movs	r1, #0
 8008410:	4806      	ldr	r0, [pc, #24]	; (800842c <USBD_LL_Init+0x9c>)
 8008412:	f7fa ff6d 	bl	80032f0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8008416:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800841a:	2101      	movs	r1, #1
 800841c:	4803      	ldr	r0, [pc, #12]	; (800842c <USBD_LL_Init+0x9c>)
 800841e:	f7fa ff67 	bl	80032f0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008422:	2300      	movs	r3, #0
}
 8008424:	4618      	mov	r0, r3
 8008426:	3708      	adds	r7, #8
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}
 800842c:	200016d0 	.word	0x200016d0
 8008430:	40040000 	.word	0x40040000

08008434 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800843c:	2300      	movs	r3, #0
 800843e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008440:	2300      	movs	r3, #0
 8008442:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800844a:	4618      	mov	r0, r3
 800844c:	f7f9 fe37 	bl	80020be <HAL_PCD_Start>
 8008450:	4603      	mov	r3, r0
 8008452:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008454:	7bfb      	ldrb	r3, [r7, #15]
 8008456:	4618      	mov	r0, r3
 8008458:	f000 f97e 	bl	8008758 <USBD_Get_USB_Status>
 800845c:	4603      	mov	r3, r0
 800845e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008460:	7bbb      	ldrb	r3, [r7, #14]
}
 8008462:	4618      	mov	r0, r3
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}

0800846a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800846a:	b580      	push	{r7, lr}
 800846c:	b084      	sub	sp, #16
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
 8008472:	4608      	mov	r0, r1
 8008474:	4611      	mov	r1, r2
 8008476:	461a      	mov	r2, r3
 8008478:	4603      	mov	r3, r0
 800847a:	70fb      	strb	r3, [r7, #3]
 800847c:	460b      	mov	r3, r1
 800847e:	70bb      	strb	r3, [r7, #2]
 8008480:	4613      	mov	r3, r2
 8008482:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008484:	2300      	movs	r3, #0
 8008486:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008488:	2300      	movs	r3, #0
 800848a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008492:	78bb      	ldrb	r3, [r7, #2]
 8008494:	883a      	ldrh	r2, [r7, #0]
 8008496:	78f9      	ldrb	r1, [r7, #3]
 8008498:	f7fa fb24 	bl	8002ae4 <HAL_PCD_EP_Open>
 800849c:	4603      	mov	r3, r0
 800849e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084a0:	7bfb      	ldrb	r3, [r7, #15]
 80084a2:	4618      	mov	r0, r3
 80084a4:	f000 f958 	bl	8008758 <USBD_Get_USB_Status>
 80084a8:	4603      	mov	r3, r0
 80084aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3710      	adds	r7, #16
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b084      	sub	sp, #16
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
 80084be:	460b      	mov	r3, r1
 80084c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084c2:	2300      	movs	r3, #0
 80084c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084c6:	2300      	movs	r3, #0
 80084c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80084d0:	78fa      	ldrb	r2, [r7, #3]
 80084d2:	4611      	mov	r1, r2
 80084d4:	4618      	mov	r0, r3
 80084d6:	f7fa fb6d 	bl	8002bb4 <HAL_PCD_EP_Close>
 80084da:	4603      	mov	r3, r0
 80084dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084de:	7bfb      	ldrb	r3, [r7, #15]
 80084e0:	4618      	mov	r0, r3
 80084e2:	f000 f939 	bl	8008758 <USBD_Get_USB_Status>
 80084e6:	4603      	mov	r3, r0
 80084e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3710      	adds	r7, #16
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	460b      	mov	r3, r1
 80084fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008500:	2300      	movs	r3, #0
 8008502:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008504:	2300      	movs	r3, #0
 8008506:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800850e:	78fa      	ldrb	r2, [r7, #3]
 8008510:	4611      	mov	r1, r2
 8008512:	4618      	mov	r0, r3
 8008514:	f7fa fc45 	bl	8002da2 <HAL_PCD_EP_SetStall>
 8008518:	4603      	mov	r3, r0
 800851a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800851c:	7bfb      	ldrb	r3, [r7, #15]
 800851e:	4618      	mov	r0, r3
 8008520:	f000 f91a 	bl	8008758 <USBD_Get_USB_Status>
 8008524:	4603      	mov	r3, r0
 8008526:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008528:	7bbb      	ldrb	r3, [r7, #14]
}
 800852a:	4618      	mov	r0, r3
 800852c:	3710      	adds	r7, #16
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}

08008532 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008532:	b580      	push	{r7, lr}
 8008534:	b084      	sub	sp, #16
 8008536:	af00      	add	r7, sp, #0
 8008538:	6078      	str	r0, [r7, #4]
 800853a:	460b      	mov	r3, r1
 800853c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800853e:	2300      	movs	r3, #0
 8008540:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008542:	2300      	movs	r3, #0
 8008544:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800854c:	78fa      	ldrb	r2, [r7, #3]
 800854e:	4611      	mov	r1, r2
 8008550:	4618      	mov	r0, r3
 8008552:	f7fa fc8a 	bl	8002e6a <HAL_PCD_EP_ClrStall>
 8008556:	4603      	mov	r3, r0
 8008558:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800855a:	7bfb      	ldrb	r3, [r7, #15]
 800855c:	4618      	mov	r0, r3
 800855e:	f000 f8fb 	bl	8008758 <USBD_Get_USB_Status>
 8008562:	4603      	mov	r3, r0
 8008564:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008566:	7bbb      	ldrb	r3, [r7, #14]
}
 8008568:	4618      	mov	r0, r3
 800856a:	3710      	adds	r7, #16
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008570:	b480      	push	{r7}
 8008572:	b085      	sub	sp, #20
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	460b      	mov	r3, r1
 800857a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008582:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008584:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008588:	2b00      	cmp	r3, #0
 800858a:	da0b      	bge.n	80085a4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800858c:	78fb      	ldrb	r3, [r7, #3]
 800858e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008592:	68f9      	ldr	r1, [r7, #12]
 8008594:	4613      	mov	r3, r2
 8008596:	00db      	lsls	r3, r3, #3
 8008598:	4413      	add	r3, r2
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	440b      	add	r3, r1
 800859e:	333e      	adds	r3, #62	; 0x3e
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	e00b      	b.n	80085bc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80085a4:	78fb      	ldrb	r3, [r7, #3]
 80085a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085aa:	68f9      	ldr	r1, [r7, #12]
 80085ac:	4613      	mov	r3, r2
 80085ae:	00db      	lsls	r3, r3, #3
 80085b0:	4413      	add	r3, r2
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	440b      	add	r3, r1
 80085b6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80085ba:	781b      	ldrb	r3, [r3, #0]
  }
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3714      	adds	r7, #20
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b084      	sub	sp, #16
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	460b      	mov	r3, r1
 80085d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085d4:	2300      	movs	r3, #0
 80085d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085d8:	2300      	movs	r3, #0
 80085da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80085e2:	78fa      	ldrb	r2, [r7, #3]
 80085e4:	4611      	mov	r1, r2
 80085e6:	4618      	mov	r0, r3
 80085e8:	f7fa fa57 	bl	8002a9a <HAL_PCD_SetAddress>
 80085ec:	4603      	mov	r3, r0
 80085ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085f0:	7bfb      	ldrb	r3, [r7, #15]
 80085f2:	4618      	mov	r0, r3
 80085f4:	f000 f8b0 	bl	8008758 <USBD_Get_USB_Status>
 80085f8:	4603      	mov	r3, r0
 80085fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3710      	adds	r7, #16
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008606:	b580      	push	{r7, lr}
 8008608:	b086      	sub	sp, #24
 800860a:	af00      	add	r7, sp, #0
 800860c:	60f8      	str	r0, [r7, #12]
 800860e:	607a      	str	r2, [r7, #4]
 8008610:	603b      	str	r3, [r7, #0]
 8008612:	460b      	mov	r3, r1
 8008614:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008616:	2300      	movs	r3, #0
 8008618:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800861a:	2300      	movs	r3, #0
 800861c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008624:	7af9      	ldrb	r1, [r7, #11]
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	f7fa fb70 	bl	8002d0e <HAL_PCD_EP_Transmit>
 800862e:	4603      	mov	r3, r0
 8008630:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008632:	7dfb      	ldrb	r3, [r7, #23]
 8008634:	4618      	mov	r0, r3
 8008636:	f000 f88f 	bl	8008758 <USBD_Get_USB_Status>
 800863a:	4603      	mov	r3, r0
 800863c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800863e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008640:	4618      	mov	r0, r3
 8008642:	3718      	adds	r7, #24
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b086      	sub	sp, #24
 800864c:	af00      	add	r7, sp, #0
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	607a      	str	r2, [r7, #4]
 8008652:	603b      	str	r3, [r7, #0]
 8008654:	460b      	mov	r3, r1
 8008656:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008658:	2300      	movs	r3, #0
 800865a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800865c:	2300      	movs	r3, #0
 800865e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008666:	7af9      	ldrb	r1, [r7, #11]
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	687a      	ldr	r2, [r7, #4]
 800866c:	f7fa faec 	bl	8002c48 <HAL_PCD_EP_Receive>
 8008670:	4603      	mov	r3, r0
 8008672:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008674:	7dfb      	ldrb	r3, [r7, #23]
 8008676:	4618      	mov	r0, r3
 8008678:	f000 f86e 	bl	8008758 <USBD_Get_USB_Status>
 800867c:	4603      	mov	r3, r0
 800867e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008680:	7dbb      	ldrb	r3, [r7, #22]
}
 8008682:	4618      	mov	r0, r3
 8008684:	3718      	adds	r7, #24
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}

0800868a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800868a:	b580      	push	{r7, lr}
 800868c:	b082      	sub	sp, #8
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
 8008692:	460b      	mov	r3, r1
 8008694:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800869c:	78fa      	ldrb	r2, [r7, #3]
 800869e:	4611      	mov	r1, r2
 80086a0:	4618      	mov	r0, r3
 80086a2:	f7fa fb1c 	bl	8002cde <HAL_PCD_EP_GetRxCount>
 80086a6:	4603      	mov	r3, r0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3708      	adds	r7, #8
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b082      	sub	sp, #8
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	460b      	mov	r3, r1
 80086ba:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80086bc:	78fb      	ldrb	r3, [r7, #3]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d002      	beq.n	80086c8 <HAL_PCDEx_LPM_Callback+0x18>
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	d01f      	beq.n	8008706 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80086c6:	e03b      	b.n	8008740 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6a1b      	ldr	r3, [r3, #32]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d007      	beq.n	80086e0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80086d0:	f000 f83c 	bl	800874c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80086d4:	4b1c      	ldr	r3, [pc, #112]	; (8008748 <HAL_PCDEx_LPM_Callback+0x98>)
 80086d6:	691b      	ldr	r3, [r3, #16]
 80086d8:	4a1b      	ldr	r2, [pc, #108]	; (8008748 <HAL_PCDEx_LPM_Callback+0x98>)
 80086da:	f023 0306 	bic.w	r3, r3, #6
 80086de:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	687a      	ldr	r2, [r7, #4]
 80086ec:	6812      	ldr	r2, [r2, #0]
 80086ee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80086f2:	f023 0301 	bic.w	r3, r3, #1
 80086f6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80086fe:	4618      	mov	r0, r3
 8008700:	f7fe fac3 	bl	8006c8a <USBD_LL_Resume>
    break;
 8008704:	e01c      	b.n	8008740 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	6812      	ldr	r2, [r2, #0]
 8008714:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008718:	f043 0301 	orr.w	r3, r3, #1
 800871c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8008724:	4618      	mov	r0, r3
 8008726:	f7fe fa9a 	bl	8006c5e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6a1b      	ldr	r3, [r3, #32]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d005      	beq.n	800873e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008732:	4b05      	ldr	r3, [pc, #20]	; (8008748 <HAL_PCDEx_LPM_Callback+0x98>)
 8008734:	691b      	ldr	r3, [r3, #16]
 8008736:	4a04      	ldr	r2, [pc, #16]	; (8008748 <HAL_PCDEx_LPM_Callback+0x98>)
 8008738:	f043 0306 	orr.w	r3, r3, #6
 800873c:	6113      	str	r3, [r2, #16]
    break;
 800873e:	bf00      	nop
}
 8008740:	bf00      	nop
 8008742:	3708      	adds	r7, #8
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}
 8008748:	e000ed00 	.word	0xe000ed00

0800874c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008750:	f7f7 ff34 	bl	80005bc <SystemClock_Config>
}
 8008754:	bf00      	nop
 8008756:	bd80      	pop	{r7, pc}

08008758 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008758:	b480      	push	{r7}
 800875a:	b085      	sub	sp, #20
 800875c:	af00      	add	r7, sp, #0
 800875e:	4603      	mov	r3, r0
 8008760:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008762:	2300      	movs	r3, #0
 8008764:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008766:	79fb      	ldrb	r3, [r7, #7]
 8008768:	2b03      	cmp	r3, #3
 800876a:	d817      	bhi.n	800879c <USBD_Get_USB_Status+0x44>
 800876c:	a201      	add	r2, pc, #4	; (adr r2, 8008774 <USBD_Get_USB_Status+0x1c>)
 800876e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008772:	bf00      	nop
 8008774:	08008785 	.word	0x08008785
 8008778:	0800878b 	.word	0x0800878b
 800877c:	08008791 	.word	0x08008791
 8008780:	08008797 	.word	0x08008797
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008784:	2300      	movs	r3, #0
 8008786:	73fb      	strb	r3, [r7, #15]
    break;
 8008788:	e00b      	b.n	80087a2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800878a:	2303      	movs	r3, #3
 800878c:	73fb      	strb	r3, [r7, #15]
    break;
 800878e:	e008      	b.n	80087a2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008790:	2301      	movs	r3, #1
 8008792:	73fb      	strb	r3, [r7, #15]
    break;
 8008794:	e005      	b.n	80087a2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008796:	2303      	movs	r3, #3
 8008798:	73fb      	strb	r3, [r7, #15]
    break;
 800879a:	e002      	b.n	80087a2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800879c:	2303      	movs	r3, #3
 800879e:	73fb      	strb	r3, [r7, #15]
    break;
 80087a0:	bf00      	nop
  }
  return usb_status;
 80087a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3714      	adds	r7, #20
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr

080087b0 <malloc>:
 80087b0:	4b02      	ldr	r3, [pc, #8]	; (80087bc <malloc+0xc>)
 80087b2:	4601      	mov	r1, r0
 80087b4:	6818      	ldr	r0, [r3, #0]
 80087b6:	f000 b82b 	b.w	8008810 <_malloc_r>
 80087ba:	bf00      	nop
 80087bc:	20000158 	.word	0x20000158

080087c0 <free>:
 80087c0:	4b02      	ldr	r3, [pc, #8]	; (80087cc <free+0xc>)
 80087c2:	4601      	mov	r1, r0
 80087c4:	6818      	ldr	r0, [r3, #0]
 80087c6:	f000 b8f3 	b.w	80089b0 <_free_r>
 80087ca:	bf00      	nop
 80087cc:	20000158 	.word	0x20000158

080087d0 <sbrk_aligned>:
 80087d0:	b570      	push	{r4, r5, r6, lr}
 80087d2:	4e0e      	ldr	r6, [pc, #56]	; (800880c <sbrk_aligned+0x3c>)
 80087d4:	460c      	mov	r4, r1
 80087d6:	6831      	ldr	r1, [r6, #0]
 80087d8:	4605      	mov	r5, r0
 80087da:	b911      	cbnz	r1, 80087e2 <sbrk_aligned+0x12>
 80087dc:	f000 f8ac 	bl	8008938 <_sbrk_r>
 80087e0:	6030      	str	r0, [r6, #0]
 80087e2:	4621      	mov	r1, r4
 80087e4:	4628      	mov	r0, r5
 80087e6:	f000 f8a7 	bl	8008938 <_sbrk_r>
 80087ea:	1c43      	adds	r3, r0, #1
 80087ec:	d00a      	beq.n	8008804 <sbrk_aligned+0x34>
 80087ee:	1cc4      	adds	r4, r0, #3
 80087f0:	f024 0403 	bic.w	r4, r4, #3
 80087f4:	42a0      	cmp	r0, r4
 80087f6:	d007      	beq.n	8008808 <sbrk_aligned+0x38>
 80087f8:	1a21      	subs	r1, r4, r0
 80087fa:	4628      	mov	r0, r5
 80087fc:	f000 f89c 	bl	8008938 <_sbrk_r>
 8008800:	3001      	adds	r0, #1
 8008802:	d101      	bne.n	8008808 <sbrk_aligned+0x38>
 8008804:	f04f 34ff 	mov.w	r4, #4294967295
 8008808:	4620      	mov	r0, r4
 800880a:	bd70      	pop	{r4, r5, r6, pc}
 800880c:	20001bdc 	.word	0x20001bdc

08008810 <_malloc_r>:
 8008810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008814:	1ccd      	adds	r5, r1, #3
 8008816:	f025 0503 	bic.w	r5, r5, #3
 800881a:	3508      	adds	r5, #8
 800881c:	2d0c      	cmp	r5, #12
 800881e:	bf38      	it	cc
 8008820:	250c      	movcc	r5, #12
 8008822:	2d00      	cmp	r5, #0
 8008824:	4607      	mov	r7, r0
 8008826:	db01      	blt.n	800882c <_malloc_r+0x1c>
 8008828:	42a9      	cmp	r1, r5
 800882a:	d905      	bls.n	8008838 <_malloc_r+0x28>
 800882c:	230c      	movs	r3, #12
 800882e:	603b      	str	r3, [r7, #0]
 8008830:	2600      	movs	r6, #0
 8008832:	4630      	mov	r0, r6
 8008834:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008838:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800890c <_malloc_r+0xfc>
 800883c:	f000 f868 	bl	8008910 <__malloc_lock>
 8008840:	f8d8 3000 	ldr.w	r3, [r8]
 8008844:	461c      	mov	r4, r3
 8008846:	bb5c      	cbnz	r4, 80088a0 <_malloc_r+0x90>
 8008848:	4629      	mov	r1, r5
 800884a:	4638      	mov	r0, r7
 800884c:	f7ff ffc0 	bl	80087d0 <sbrk_aligned>
 8008850:	1c43      	adds	r3, r0, #1
 8008852:	4604      	mov	r4, r0
 8008854:	d155      	bne.n	8008902 <_malloc_r+0xf2>
 8008856:	f8d8 4000 	ldr.w	r4, [r8]
 800885a:	4626      	mov	r6, r4
 800885c:	2e00      	cmp	r6, #0
 800885e:	d145      	bne.n	80088ec <_malloc_r+0xdc>
 8008860:	2c00      	cmp	r4, #0
 8008862:	d048      	beq.n	80088f6 <_malloc_r+0xe6>
 8008864:	6823      	ldr	r3, [r4, #0]
 8008866:	4631      	mov	r1, r6
 8008868:	4638      	mov	r0, r7
 800886a:	eb04 0903 	add.w	r9, r4, r3
 800886e:	f000 f863 	bl	8008938 <_sbrk_r>
 8008872:	4581      	cmp	r9, r0
 8008874:	d13f      	bne.n	80088f6 <_malloc_r+0xe6>
 8008876:	6821      	ldr	r1, [r4, #0]
 8008878:	1a6d      	subs	r5, r5, r1
 800887a:	4629      	mov	r1, r5
 800887c:	4638      	mov	r0, r7
 800887e:	f7ff ffa7 	bl	80087d0 <sbrk_aligned>
 8008882:	3001      	adds	r0, #1
 8008884:	d037      	beq.n	80088f6 <_malloc_r+0xe6>
 8008886:	6823      	ldr	r3, [r4, #0]
 8008888:	442b      	add	r3, r5
 800888a:	6023      	str	r3, [r4, #0]
 800888c:	f8d8 3000 	ldr.w	r3, [r8]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d038      	beq.n	8008906 <_malloc_r+0xf6>
 8008894:	685a      	ldr	r2, [r3, #4]
 8008896:	42a2      	cmp	r2, r4
 8008898:	d12b      	bne.n	80088f2 <_malloc_r+0xe2>
 800889a:	2200      	movs	r2, #0
 800889c:	605a      	str	r2, [r3, #4]
 800889e:	e00f      	b.n	80088c0 <_malloc_r+0xb0>
 80088a0:	6822      	ldr	r2, [r4, #0]
 80088a2:	1b52      	subs	r2, r2, r5
 80088a4:	d41f      	bmi.n	80088e6 <_malloc_r+0xd6>
 80088a6:	2a0b      	cmp	r2, #11
 80088a8:	d917      	bls.n	80088da <_malloc_r+0xca>
 80088aa:	1961      	adds	r1, r4, r5
 80088ac:	42a3      	cmp	r3, r4
 80088ae:	6025      	str	r5, [r4, #0]
 80088b0:	bf18      	it	ne
 80088b2:	6059      	strne	r1, [r3, #4]
 80088b4:	6863      	ldr	r3, [r4, #4]
 80088b6:	bf08      	it	eq
 80088b8:	f8c8 1000 	streq.w	r1, [r8]
 80088bc:	5162      	str	r2, [r4, r5]
 80088be:	604b      	str	r3, [r1, #4]
 80088c0:	4638      	mov	r0, r7
 80088c2:	f104 060b 	add.w	r6, r4, #11
 80088c6:	f000 f829 	bl	800891c <__malloc_unlock>
 80088ca:	f026 0607 	bic.w	r6, r6, #7
 80088ce:	1d23      	adds	r3, r4, #4
 80088d0:	1af2      	subs	r2, r6, r3
 80088d2:	d0ae      	beq.n	8008832 <_malloc_r+0x22>
 80088d4:	1b9b      	subs	r3, r3, r6
 80088d6:	50a3      	str	r3, [r4, r2]
 80088d8:	e7ab      	b.n	8008832 <_malloc_r+0x22>
 80088da:	42a3      	cmp	r3, r4
 80088dc:	6862      	ldr	r2, [r4, #4]
 80088de:	d1dd      	bne.n	800889c <_malloc_r+0x8c>
 80088e0:	f8c8 2000 	str.w	r2, [r8]
 80088e4:	e7ec      	b.n	80088c0 <_malloc_r+0xb0>
 80088e6:	4623      	mov	r3, r4
 80088e8:	6864      	ldr	r4, [r4, #4]
 80088ea:	e7ac      	b.n	8008846 <_malloc_r+0x36>
 80088ec:	4634      	mov	r4, r6
 80088ee:	6876      	ldr	r6, [r6, #4]
 80088f0:	e7b4      	b.n	800885c <_malloc_r+0x4c>
 80088f2:	4613      	mov	r3, r2
 80088f4:	e7cc      	b.n	8008890 <_malloc_r+0x80>
 80088f6:	230c      	movs	r3, #12
 80088f8:	603b      	str	r3, [r7, #0]
 80088fa:	4638      	mov	r0, r7
 80088fc:	f000 f80e 	bl	800891c <__malloc_unlock>
 8008900:	e797      	b.n	8008832 <_malloc_r+0x22>
 8008902:	6025      	str	r5, [r4, #0]
 8008904:	e7dc      	b.n	80088c0 <_malloc_r+0xb0>
 8008906:	605b      	str	r3, [r3, #4]
 8008908:	deff      	udf	#255	; 0xff
 800890a:	bf00      	nop
 800890c:	20001bd8 	.word	0x20001bd8

08008910 <__malloc_lock>:
 8008910:	4801      	ldr	r0, [pc, #4]	; (8008918 <__malloc_lock+0x8>)
 8008912:	f000 b84b 	b.w	80089ac <__retarget_lock_acquire_recursive>
 8008916:	bf00      	nop
 8008918:	20001d1c 	.word	0x20001d1c

0800891c <__malloc_unlock>:
 800891c:	4801      	ldr	r0, [pc, #4]	; (8008924 <__malloc_unlock+0x8>)
 800891e:	f000 b846 	b.w	80089ae <__retarget_lock_release_recursive>
 8008922:	bf00      	nop
 8008924:	20001d1c 	.word	0x20001d1c

08008928 <memset>:
 8008928:	4402      	add	r2, r0
 800892a:	4603      	mov	r3, r0
 800892c:	4293      	cmp	r3, r2
 800892e:	d100      	bne.n	8008932 <memset+0xa>
 8008930:	4770      	bx	lr
 8008932:	f803 1b01 	strb.w	r1, [r3], #1
 8008936:	e7f9      	b.n	800892c <memset+0x4>

08008938 <_sbrk_r>:
 8008938:	b538      	push	{r3, r4, r5, lr}
 800893a:	4d06      	ldr	r5, [pc, #24]	; (8008954 <_sbrk_r+0x1c>)
 800893c:	2300      	movs	r3, #0
 800893e:	4604      	mov	r4, r0
 8008940:	4608      	mov	r0, r1
 8008942:	602b      	str	r3, [r5, #0]
 8008944:	f7f8 f85c 	bl	8000a00 <_sbrk>
 8008948:	1c43      	adds	r3, r0, #1
 800894a:	d102      	bne.n	8008952 <_sbrk_r+0x1a>
 800894c:	682b      	ldr	r3, [r5, #0]
 800894e:	b103      	cbz	r3, 8008952 <_sbrk_r+0x1a>
 8008950:	6023      	str	r3, [r4, #0]
 8008952:	bd38      	pop	{r3, r4, r5, pc}
 8008954:	20001d18 	.word	0x20001d18

08008958 <__errno>:
 8008958:	4b01      	ldr	r3, [pc, #4]	; (8008960 <__errno+0x8>)
 800895a:	6818      	ldr	r0, [r3, #0]
 800895c:	4770      	bx	lr
 800895e:	bf00      	nop
 8008960:	20000158 	.word	0x20000158

08008964 <__libc_init_array>:
 8008964:	b570      	push	{r4, r5, r6, lr}
 8008966:	4d0d      	ldr	r5, [pc, #52]	; (800899c <__libc_init_array+0x38>)
 8008968:	4c0d      	ldr	r4, [pc, #52]	; (80089a0 <__libc_init_array+0x3c>)
 800896a:	1b64      	subs	r4, r4, r5
 800896c:	10a4      	asrs	r4, r4, #2
 800896e:	2600      	movs	r6, #0
 8008970:	42a6      	cmp	r6, r4
 8008972:	d109      	bne.n	8008988 <__libc_init_array+0x24>
 8008974:	4d0b      	ldr	r5, [pc, #44]	; (80089a4 <__libc_init_array+0x40>)
 8008976:	4c0c      	ldr	r4, [pc, #48]	; (80089a8 <__libc_init_array+0x44>)
 8008978:	f000 f866 	bl	8008a48 <_init>
 800897c:	1b64      	subs	r4, r4, r5
 800897e:	10a4      	asrs	r4, r4, #2
 8008980:	2600      	movs	r6, #0
 8008982:	42a6      	cmp	r6, r4
 8008984:	d105      	bne.n	8008992 <__libc_init_array+0x2e>
 8008986:	bd70      	pop	{r4, r5, r6, pc}
 8008988:	f855 3b04 	ldr.w	r3, [r5], #4
 800898c:	4798      	blx	r3
 800898e:	3601      	adds	r6, #1
 8008990:	e7ee      	b.n	8008970 <__libc_init_array+0xc>
 8008992:	f855 3b04 	ldr.w	r3, [r5], #4
 8008996:	4798      	blx	r3
 8008998:	3601      	adds	r6, #1
 800899a:	e7f2      	b.n	8008982 <__libc_init_array+0x1e>
 800899c:	08008ac0 	.word	0x08008ac0
 80089a0:	08008ac0 	.word	0x08008ac0
 80089a4:	08008ac0 	.word	0x08008ac0
 80089a8:	08008ac4 	.word	0x08008ac4

080089ac <__retarget_lock_acquire_recursive>:
 80089ac:	4770      	bx	lr

080089ae <__retarget_lock_release_recursive>:
 80089ae:	4770      	bx	lr

080089b0 <_free_r>:
 80089b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089b2:	2900      	cmp	r1, #0
 80089b4:	d044      	beq.n	8008a40 <_free_r+0x90>
 80089b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089ba:	9001      	str	r0, [sp, #4]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	f1a1 0404 	sub.w	r4, r1, #4
 80089c2:	bfb8      	it	lt
 80089c4:	18e4      	addlt	r4, r4, r3
 80089c6:	f7ff ffa3 	bl	8008910 <__malloc_lock>
 80089ca:	4a1e      	ldr	r2, [pc, #120]	; (8008a44 <_free_r+0x94>)
 80089cc:	9801      	ldr	r0, [sp, #4]
 80089ce:	6813      	ldr	r3, [r2, #0]
 80089d0:	b933      	cbnz	r3, 80089e0 <_free_r+0x30>
 80089d2:	6063      	str	r3, [r4, #4]
 80089d4:	6014      	str	r4, [r2, #0]
 80089d6:	b003      	add	sp, #12
 80089d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80089dc:	f7ff bf9e 	b.w	800891c <__malloc_unlock>
 80089e0:	42a3      	cmp	r3, r4
 80089e2:	d908      	bls.n	80089f6 <_free_r+0x46>
 80089e4:	6825      	ldr	r5, [r4, #0]
 80089e6:	1961      	adds	r1, r4, r5
 80089e8:	428b      	cmp	r3, r1
 80089ea:	bf01      	itttt	eq
 80089ec:	6819      	ldreq	r1, [r3, #0]
 80089ee:	685b      	ldreq	r3, [r3, #4]
 80089f0:	1949      	addeq	r1, r1, r5
 80089f2:	6021      	streq	r1, [r4, #0]
 80089f4:	e7ed      	b.n	80089d2 <_free_r+0x22>
 80089f6:	461a      	mov	r2, r3
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	b10b      	cbz	r3, 8008a00 <_free_r+0x50>
 80089fc:	42a3      	cmp	r3, r4
 80089fe:	d9fa      	bls.n	80089f6 <_free_r+0x46>
 8008a00:	6811      	ldr	r1, [r2, #0]
 8008a02:	1855      	adds	r5, r2, r1
 8008a04:	42a5      	cmp	r5, r4
 8008a06:	d10b      	bne.n	8008a20 <_free_r+0x70>
 8008a08:	6824      	ldr	r4, [r4, #0]
 8008a0a:	4421      	add	r1, r4
 8008a0c:	1854      	adds	r4, r2, r1
 8008a0e:	42a3      	cmp	r3, r4
 8008a10:	6011      	str	r1, [r2, #0]
 8008a12:	d1e0      	bne.n	80089d6 <_free_r+0x26>
 8008a14:	681c      	ldr	r4, [r3, #0]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	6053      	str	r3, [r2, #4]
 8008a1a:	440c      	add	r4, r1
 8008a1c:	6014      	str	r4, [r2, #0]
 8008a1e:	e7da      	b.n	80089d6 <_free_r+0x26>
 8008a20:	d902      	bls.n	8008a28 <_free_r+0x78>
 8008a22:	230c      	movs	r3, #12
 8008a24:	6003      	str	r3, [r0, #0]
 8008a26:	e7d6      	b.n	80089d6 <_free_r+0x26>
 8008a28:	6825      	ldr	r5, [r4, #0]
 8008a2a:	1961      	adds	r1, r4, r5
 8008a2c:	428b      	cmp	r3, r1
 8008a2e:	bf04      	itt	eq
 8008a30:	6819      	ldreq	r1, [r3, #0]
 8008a32:	685b      	ldreq	r3, [r3, #4]
 8008a34:	6063      	str	r3, [r4, #4]
 8008a36:	bf04      	itt	eq
 8008a38:	1949      	addeq	r1, r1, r5
 8008a3a:	6021      	streq	r1, [r4, #0]
 8008a3c:	6054      	str	r4, [r2, #4]
 8008a3e:	e7ca      	b.n	80089d6 <_free_r+0x26>
 8008a40:	b003      	add	sp, #12
 8008a42:	bd30      	pop	{r4, r5, pc}
 8008a44:	20001bd8 	.word	0x20001bd8

08008a48 <_init>:
 8008a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a4a:	bf00      	nop
 8008a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a4e:	bc08      	pop	{r3}
 8008a50:	469e      	mov	lr, r3
 8008a52:	4770      	bx	lr

08008a54 <_fini>:
 8008a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a56:	bf00      	nop
 8008a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a5a:	bc08      	pop	{r3}
 8008a5c:	469e      	mov	lr, r3
 8008a5e:	4770      	bx	lr
