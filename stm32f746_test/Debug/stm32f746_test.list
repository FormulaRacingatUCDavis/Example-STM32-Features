
stm32f746_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008878  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08008a40  08008a40  00009a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a98  08008a98  0000a15c  2**0
                  CONTENTS
  4 .ARM          00000008  08008a98  08008a98  00009a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008aa0  08008aa0  0000a15c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008aa0  08008aa0  00009aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008aa4  08008aa4  00009aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  08008aa8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bc4  2000015c  08008c04  0000a15c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d20  08008c04  0000ad20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a15c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b65  00000000  00000000  0000a18c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000300c  00000000  00000000  0001acf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  0001dd00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009ce  00000000  00000000  0001ea40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027a0e  00000000  00000000  0001f40e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011773  00000000  00000000  00046e1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7338  00000000  00000000  0005858f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013f8c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003858  00000000  00000000  0013f90c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00143164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000015c 	.word	0x2000015c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08008a28 	.word	0x08008a28

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000160 	.word	0x20000160
 8000204:	08008a28 	.word	0x08008a28

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint8_t               TxData[8];
uint32_t              TxMailbox;
uint8_t               RxData[8];

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 8000500:	4b06      	ldr	r3, [pc, #24]	@ (800051c <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8000502:	4a07      	ldr	r2, [pc, #28]	@ (8000520 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000504:	2100      	movs	r1, #0
 8000506:	4807      	ldr	r0, [pc, #28]	@ (8000524 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000508:	f000 fe4e 	bl	80011a8 <HAL_CAN_GetRxMessage>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 800050c:	2102      	movs	r1, #2
 800050e:	4806      	ldr	r0, [pc, #24]	@ (8000528 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000510:	f001 fc89 	bl	8001e26 <HAL_GPIO_TogglePin>
//	print(RxData[0]);
}
 8000514:	bf00      	nop
 8000516:	3708      	adds	r7, #8
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	200001e0 	.word	0x200001e0
 8000520:	200001b8 	.word	0x200001b8
 8000524:	20000178 	.word	0x20000178
 8000528:	40020400 	.word	0x40020400

0800052c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000530:	f000 fac9 	bl	8000ac6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000534:	f000 f832 	bl	800059c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000538:	f000 f900 	bl	800073c <MX_GPIO_Init>
  MX_CAN1_Init();
 800053c:	f000 f894 	bl	8000668 <MX_CAN1_Init>
  MX_USB_DEVICE_Init();
 8000540:	f007 fbca 	bl	8007cd8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  TxHeader.IDE = CAN_ID_STD;
 8000544:	4b11      	ldr	r3, [pc, #68]	@ (800058c <main+0x60>)
 8000546:	2200      	movs	r2, #0
 8000548:	609a      	str	r2, [r3, #8]
  TxHeader.StdId = 0x446;
 800054a:	4b10      	ldr	r3, [pc, #64]	@ (800058c <main+0x60>)
 800054c:	f240 4246 	movw	r2, #1094	@ 0x446
 8000550:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA;
 8000552:	4b0e      	ldr	r3, [pc, #56]	@ (800058c <main+0x60>)
 8000554:	2200      	movs	r2, #0
 8000556:	60da      	str	r2, [r3, #12]
  TxHeader.DLC = 2;
 8000558:	4b0c      	ldr	r3, [pc, #48]	@ (800058c <main+0x60>)
 800055a:	2202      	movs	r2, #2
 800055c:	611a      	str	r2, [r3, #16]

  TxData[0] = 50;
 800055e:	4b0c      	ldr	r3, [pc, #48]	@ (8000590 <main+0x64>)
 8000560:	2232      	movs	r2, #50	@ 0x32
 8000562:	701a      	strb	r2, [r3, #0]
  TxData[1] = 0xAA;
 8000564:	4b0a      	ldr	r3, [pc, #40]	@ (8000590 <main+0x64>)
 8000566:	22aa      	movs	r2, #170	@ 0xaa
 8000568:	705a      	strb	r2, [r3, #1]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 800056a:	4b0a      	ldr	r3, [pc, #40]	@ (8000594 <main+0x68>)
 800056c:	4a08      	ldr	r2, [pc, #32]	@ (8000590 <main+0x64>)
 800056e:	4907      	ldr	r1, [pc, #28]	@ (800058c <main+0x60>)
 8000570:	4809      	ldr	r0, [pc, #36]	@ (8000598 <main+0x6c>)
 8000572:	f000 fd49 	bl	8001008 <HAL_CAN_AddTxMessage>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <main+0x54>
    {
	Error_Handler();
 800057c:	f000 f972 	bl	8000864 <Error_Handler>
    }

	HAL_Delay(1000);
 8000580:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000584:	f000 fafc 	bl	8000b80 <HAL_Delay>
    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8000588:	e7ef      	b.n	800056a <main+0x3e>
 800058a:	bf00      	nop
 800058c:	200001a0 	.word	0x200001a0
 8000590:	200001d4 	.word	0x200001d4
 8000594:	200001dc 	.word	0x200001dc
 8000598:	20000178 	.word	0x20000178

0800059c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b094      	sub	sp, #80	@ 0x50
 80005a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a2:	f107 0320 	add.w	r3, r7, #32
 80005a6:	2230      	movs	r2, #48	@ 0x30
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f008 f9ae 	bl	800890c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b0:	f107 030c 	add.w	r3, r7, #12
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c0:	4b27      	ldr	r3, [pc, #156]	@ (8000660 <SystemClock_Config+0xc4>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c4:	4a26      	ldr	r2, [pc, #152]	@ (8000660 <SystemClock_Config+0xc4>)
 80005c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80005cc:	4b24      	ldr	r3, [pc, #144]	@ (8000660 <SystemClock_Config+0xc4>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005d8:	4b22      	ldr	r3, [pc, #136]	@ (8000664 <SystemClock_Config+0xc8>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005e0:	4a20      	ldr	r2, [pc, #128]	@ (8000664 <SystemClock_Config+0xc8>)
 80005e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000664 <SystemClock_Config+0xc8>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f4:	2301      	movs	r3, #1
 80005f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fe:	2302      	movs	r3, #2
 8000600:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000602:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000606:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000608:	2308      	movs	r3, #8
 800060a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800060c:	2348      	movs	r3, #72	@ 0x48
 800060e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000610:	2302      	movs	r3, #2
 8000612:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000614:	2303      	movs	r3, #3
 8000616:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000618:	f107 0320 	add.w	r3, r7, #32
 800061c:	4618      	mov	r0, r3
 800061e:	f002 fed5 	bl	80033cc <HAL_RCC_OscConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000628:	f000 f91c 	bl	8000864 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062c:	230f      	movs	r3, #15
 800062e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000630:	2302      	movs	r3, #2
 8000632:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000638:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800063c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000642:	f107 030c 	add.w	r3, r7, #12
 8000646:	2102      	movs	r1, #2
 8000648:	4618      	mov	r0, r3
 800064a:	f003 f963 	bl	8003914 <HAL_RCC_ClockConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000654:	f000 f906 	bl	8000864 <Error_Handler>
  }
}
 8000658:	bf00      	nop
 800065a:	3750      	adds	r7, #80	@ 0x50
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40023800 	.word	0x40023800
 8000664:	40007000 	.word	0x40007000

08000668 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08a      	sub	sp, #40	@ 0x28
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800066e:	4b31      	ldr	r3, [pc, #196]	@ (8000734 <MX_CAN1_Init+0xcc>)
 8000670:	4a31      	ldr	r2, [pc, #196]	@ (8000738 <MX_CAN1_Init+0xd0>)
 8000672:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 8000674:	4b2f      	ldr	r3, [pc, #188]	@ (8000734 <MX_CAN1_Init+0xcc>)
 8000676:	220a      	movs	r2, #10
 8000678:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800067a:	4b2e      	ldr	r3, [pc, #184]	@ (8000734 <MX_CAN1_Init+0xcc>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000680:	4b2c      	ldr	r3, [pc, #176]	@ (8000734 <MX_CAN1_Init+0xcc>)
 8000682:	2200      	movs	r2, #0
 8000684:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_14TQ;
 8000686:	4b2b      	ldr	r3, [pc, #172]	@ (8000734 <MX_CAN1_Init+0xcc>)
 8000688:	f44f 2250 	mov.w	r2, #851968	@ 0xd0000
 800068c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 800068e:	4b29      	ldr	r3, [pc, #164]	@ (8000734 <MX_CAN1_Init+0xcc>)
 8000690:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000694:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000696:	4b27      	ldr	r3, [pc, #156]	@ (8000734 <MX_CAN1_Init+0xcc>)
 8000698:	2200      	movs	r2, #0
 800069a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800069c:	4b25      	ldr	r3, [pc, #148]	@ (8000734 <MX_CAN1_Init+0xcc>)
 800069e:	2200      	movs	r2, #0
 80006a0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006a2:	4b24      	ldr	r3, [pc, #144]	@ (8000734 <MX_CAN1_Init+0xcc>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80006a8:	4b22      	ldr	r3, [pc, #136]	@ (8000734 <MX_CAN1_Init+0xcc>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006ae:	4b21      	ldr	r3, [pc, #132]	@ (8000734 <MX_CAN1_Init+0xcc>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80006b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000734 <MX_CAN1_Init+0xcc>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006ba:	481e      	ldr	r0, [pc, #120]	@ (8000734 <MX_CAN1_Init+0xcc>)
 80006bc:	f000 fa84 	bl	8000bc8 <HAL_CAN_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80006c6:	f000 f8cd 	bl	8000864 <Error_Handler>
  /* USER CODE BEGIN CAN1_Init 2 */

  /*##-2- Configure the CAN Filter ###########################################*/
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80006ca:	2301      	movs	r3, #1
 80006cc:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 80006ce:	2312      	movs	r3, #18
 80006d0:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x446<<5;
 80006d6:	f648 03c0 	movw	r3, #35008	@ 0x88c0
 80006da:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x446<<5;
 80006e0:	f648 03c0 	movw	r3, #35008	@ 0x88c0
 80006e4:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80006ee:	2301      	movs	r3, #1
 80006f0:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 80006f2:	2314      	movs	r3, #20
 80006f4:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig) != HAL_OK)
 80006f6:	463b      	mov	r3, r7
 80006f8:	4619      	mov	r1, r3
 80006fa:	480e      	ldr	r0, [pc, #56]	@ (8000734 <MX_CAN1_Init+0xcc>)
 80006fc:	f000 fb60 	bl	8000dc0 <HAL_CAN_ConfigFilter>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_CAN1_Init+0xa2>
	{
	  /* Filter configuration Error */
	  Error_Handler();
 8000706:	f000 f8ad 	bl	8000864 <Error_Handler>
	}

	/*##-3- Start the CAN peripheral ###########################################*/
	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 800070a:	480a      	ldr	r0, [pc, #40]	@ (8000734 <MX_CAN1_Init+0xcc>)
 800070c:	f000 fc38 	bl	8000f80 <HAL_CAN_Start>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_CAN1_Init+0xb2>
	{
	  /* Start Error */
	  Error_Handler();
 8000716:	f000 f8a5 	bl	8000864 <Error_Handler>
	}

	/*##-4- Activate CAN RX notification #######################################*/
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800071a:	2102      	movs	r1, #2
 800071c:	4805      	ldr	r0, [pc, #20]	@ (8000734 <MX_CAN1_Init+0xcc>)
 800071e:	f000 fe55 	bl	80013cc <HAL_CAN_ActivateNotification>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_CAN1_Init+0xc4>
	{
	  /* Notification Error */
	  Error_Handler();
 8000728:	f000 f89c 	bl	8000864 <Error_Handler>
	}


  /* USER CODE END CAN1_Init 2 */

}
 800072c:	bf00      	nop
 800072e:	3728      	adds	r7, #40	@ 0x28
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000178 	.word	0x20000178
 8000738:	40006400 	.word	0x40006400

0800073c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08c      	sub	sp, #48	@ 0x30
 8000740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000752:	4b40      	ldr	r3, [pc, #256]	@ (8000854 <MX_GPIO_Init+0x118>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	4a3f      	ldr	r2, [pc, #252]	@ (8000854 <MX_GPIO_Init+0x118>)
 8000758:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800075c:	6313      	str	r3, [r2, #48]	@ 0x30
 800075e:	4b3d      	ldr	r3, [pc, #244]	@ (8000854 <MX_GPIO_Init+0x118>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000766:	61bb      	str	r3, [r7, #24]
 8000768:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076a:	4b3a      	ldr	r3, [pc, #232]	@ (8000854 <MX_GPIO_Init+0x118>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	4a39      	ldr	r2, [pc, #228]	@ (8000854 <MX_GPIO_Init+0x118>)
 8000770:	f043 0304 	orr.w	r3, r3, #4
 8000774:	6313      	str	r3, [r2, #48]	@ 0x30
 8000776:	4b37      	ldr	r3, [pc, #220]	@ (8000854 <MX_GPIO_Init+0x118>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	f003 0304 	and.w	r3, r3, #4
 800077e:	617b      	str	r3, [r7, #20]
 8000780:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	4b34      	ldr	r3, [pc, #208]	@ (8000854 <MX_GPIO_Init+0x118>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	4a33      	ldr	r2, [pc, #204]	@ (8000854 <MX_GPIO_Init+0x118>)
 8000788:	f043 0302 	orr.w	r3, r3, #2
 800078c:	6313      	str	r3, [r2, #48]	@ 0x30
 800078e:	4b31      	ldr	r3, [pc, #196]	@ (8000854 <MX_GPIO_Init+0x118>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	f003 0302 	and.w	r3, r3, #2
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	4b2e      	ldr	r3, [pc, #184]	@ (8000854 <MX_GPIO_Init+0x118>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	4a2d      	ldr	r2, [pc, #180]	@ (8000854 <MX_GPIO_Init+0x118>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a6:	4b2b      	ldr	r3, [pc, #172]	@ (8000854 <MX_GPIO_Init+0x118>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007b2:	4b28      	ldr	r3, [pc, #160]	@ (8000854 <MX_GPIO_Init+0x118>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	4a27      	ldr	r2, [pc, #156]	@ (8000854 <MX_GPIO_Init+0x118>)
 80007b8:	f043 0308 	orr.w	r3, r3, #8
 80007bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007be:	4b25      	ldr	r3, [pc, #148]	@ (8000854 <MX_GPIO_Init+0x118>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	f003 0308 	and.w	r3, r3, #8
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ca:	4b22      	ldr	r3, [pc, #136]	@ (8000854 <MX_GPIO_Init+0x118>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	4a21      	ldr	r2, [pc, #132]	@ (8000854 <MX_GPIO_Init+0x118>)
 80007d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000854 <MX_GPIO_Init+0x118>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_SET);
 80007e2:	2201      	movs	r2, #1
 80007e4:	2103      	movs	r1, #3
 80007e6:	481c      	ldr	r0, [pc, #112]	@ (8000858 <MX_GPIO_Init+0x11c>)
 80007e8:	f001 fb04 	bl	8001df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET);
 80007ec:	2201      	movs	r2, #1
 80007ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007f2:	481a      	ldr	r0, [pc, #104]	@ (800085c <MX_GPIO_Init+0x120>)
 80007f4:	f001 fafe 	bl	8001df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007f8:	2320      	movs	r3, #32
 80007fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007fc:	2300      	movs	r3, #0
 80007fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000804:	f107 031c 	add.w	r3, r7, #28
 8000808:	4619      	mov	r1, r3
 800080a:	4815      	ldr	r0, [pc, #84]	@ (8000860 <MX_GPIO_Init+0x124>)
 800080c:	f001 f946 	bl	8001a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000810:	2303      	movs	r3, #3
 8000812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000814:	2301      	movs	r3, #1
 8000816:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081c:	2300      	movs	r3, #0
 800081e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000820:	f107 031c 	add.w	r3, r7, #28
 8000824:	4619      	mov	r1, r3
 8000826:	480c      	ldr	r0, [pc, #48]	@ (8000858 <MX_GPIO_Init+0x11c>)
 8000828:	f001 f938 	bl	8001a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800082c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000832:	2301      	movs	r3, #1
 8000834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800083e:	f107 031c 	add.w	r3, r7, #28
 8000842:	4619      	mov	r1, r3
 8000844:	4805      	ldr	r0, [pc, #20]	@ (800085c <MX_GPIO_Init+0x120>)
 8000846:	f001 f929 	bl	8001a9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800084a:	bf00      	nop
 800084c:	3730      	adds	r7, #48	@ 0x30
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40023800 	.word	0x40023800
 8000858:	40020400 	.word	0x40020400
 800085c:	40021800 	.word	0x40021800
 8000860:	40020800 	.word	0x40020800

08000864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000868:	b672      	cpsid	i
}
 800086a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 800086c:	2201      	movs	r2, #1
 800086e:	2101      	movs	r1, #1
 8000870:	4801      	ldr	r0, [pc, #4]	@ (8000878 <Error_Handler+0x14>)
 8000872:	f001 fabf 	bl	8001df4 <HAL_GPIO_WritePin>
 8000876:	e7f9      	b.n	800086c <Error_Handler+0x8>
 8000878:	40020400 	.word	0x40020400

0800087c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000882:	4b0f      	ldr	r3, [pc, #60]	@ (80008c0 <HAL_MspInit+0x44>)
 8000884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000886:	4a0e      	ldr	r2, [pc, #56]	@ (80008c0 <HAL_MspInit+0x44>)
 8000888:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800088c:	6413      	str	r3, [r2, #64]	@ 0x40
 800088e:	4b0c      	ldr	r3, [pc, #48]	@ (80008c0 <HAL_MspInit+0x44>)
 8000890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089a:	4b09      	ldr	r3, [pc, #36]	@ (80008c0 <HAL_MspInit+0x44>)
 800089c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800089e:	4a08      	ldr	r2, [pc, #32]	@ (80008c0 <HAL_MspInit+0x44>)
 80008a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80008a6:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <HAL_MspInit+0x44>)
 80008a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b2:	bf00      	nop
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	40023800 	.word	0x40023800

080008c4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08a      	sub	sp, #40	@ 0x28
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a1b      	ldr	r2, [pc, #108]	@ (8000950 <HAL_CAN_MspInit+0x8c>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d12f      	bne.n	8000946 <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000954 <HAL_CAN_MspInit+0x90>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ea:	4a1a      	ldr	r2, [pc, #104]	@ (8000954 <HAL_CAN_MspInit+0x90>)
 80008ec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80008f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80008f2:	4b18      	ldr	r3, [pc, #96]	@ (8000954 <HAL_CAN_MspInit+0x90>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008fe:	4b15      	ldr	r3, [pc, #84]	@ (8000954 <HAL_CAN_MspInit+0x90>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	4a14      	ldr	r2, [pc, #80]	@ (8000954 <HAL_CAN_MspInit+0x90>)
 8000904:	f043 0308 	orr.w	r3, r3, #8
 8000908:	6313      	str	r3, [r2, #48]	@ 0x30
 800090a:	4b12      	ldr	r3, [pc, #72]	@ (8000954 <HAL_CAN_MspInit+0x90>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	f003 0308 	and.w	r3, r3, #8
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000916:	2303      	movs	r3, #3
 8000918:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	2302      	movs	r3, #2
 800091c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000922:	2303      	movs	r3, #3
 8000924:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000926:	2309      	movs	r3, #9
 8000928:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	4619      	mov	r1, r3
 8000930:	4809      	ldr	r0, [pc, #36]	@ (8000958 <HAL_CAN_MspInit+0x94>)
 8000932:	f001 f8b3 	bl	8001a9c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	2100      	movs	r1, #0
 800093a:	2014      	movs	r0, #20
 800093c:	f001 f877 	bl	8001a2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000940:	2014      	movs	r0, #20
 8000942:	f001 f890 	bl	8001a66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000946:	bf00      	nop
 8000948:	3728      	adds	r7, #40	@ 0x28
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40006400 	.word	0x40006400
 8000954:	40023800 	.word	0x40023800
 8000958:	40020c00 	.word	0x40020c00

0800095c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <NMI_Handler+0x4>

08000964 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <HardFault_Handler+0x4>

0800096c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <MemManage_Handler+0x4>

08000974 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <BusFault_Handler+0x4>

0800097c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <UsageFault_Handler+0x4>

08000984 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr

08000992 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr

080009ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b2:	f000 f8c5 	bl	8000b40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
	...

080009bc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80009c0:	4802      	ldr	r0, [pc, #8]	@ (80009cc <CAN1_RX0_IRQHandler+0x10>)
 80009c2:	f000 fd29 	bl	8001418 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000178 	.word	0x20000178

080009d0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80009d4:	4802      	ldr	r0, [pc, #8]	@ (80009e0 <OTG_HS_IRQHandler+0x10>)
 80009d6:	f001 fb86 	bl	80020e6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	200016d0 	.word	0x200016d0

080009e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009ec:	4a14      	ldr	r2, [pc, #80]	@ (8000a40 <_sbrk+0x5c>)
 80009ee:	4b15      	ldr	r3, [pc, #84]	@ (8000a44 <_sbrk+0x60>)
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009f8:	4b13      	ldr	r3, [pc, #76]	@ (8000a48 <_sbrk+0x64>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d102      	bne.n	8000a06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a00:	4b11      	ldr	r3, [pc, #68]	@ (8000a48 <_sbrk+0x64>)
 8000a02:	4a12      	ldr	r2, [pc, #72]	@ (8000a4c <_sbrk+0x68>)
 8000a04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a06:	4b10      	ldr	r3, [pc, #64]	@ (8000a48 <_sbrk+0x64>)
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d207      	bcs.n	8000a24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a14:	f007 ff92 	bl	800893c <__errno>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	220c      	movs	r2, #12
 8000a1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a22:	e009      	b.n	8000a38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a24:	4b08      	ldr	r3, [pc, #32]	@ (8000a48 <_sbrk+0x64>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a2a:	4b07      	ldr	r3, [pc, #28]	@ (8000a48 <_sbrk+0x64>)
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4413      	add	r3, r2
 8000a32:	4a05      	ldr	r2, [pc, #20]	@ (8000a48 <_sbrk+0x64>)
 8000a34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a36:	68fb      	ldr	r3, [r7, #12]
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3718      	adds	r7, #24
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20050000 	.word	0x20050000
 8000a44:	00000400 	.word	0x00000400
 8000a48:	200001e8 	.word	0x200001e8
 8000a4c:	20001d20 	.word	0x20001d20

08000a50 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a54:	4b06      	ldr	r3, [pc, #24]	@ (8000a70 <SystemInit+0x20>)
 8000a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a5a:	4a05      	ldr	r2, [pc, #20]	@ (8000a70 <SystemInit+0x20>)
 8000a5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000aac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a78:	480d      	ldr	r0, [pc, #52]	@ (8000ab0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a7a:	490e      	ldr	r1, [pc, #56]	@ (8000ab4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a7c:	4a0e      	ldr	r2, [pc, #56]	@ (8000ab8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a80:	e002      	b.n	8000a88 <LoopCopyDataInit>

08000a82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a86:	3304      	adds	r3, #4

08000a88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a8c:	d3f9      	bcc.n	8000a82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a8e:	4a0b      	ldr	r2, [pc, #44]	@ (8000abc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a90:	4c0b      	ldr	r4, [pc, #44]	@ (8000ac0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a94:	e001      	b.n	8000a9a <LoopFillZerobss>

08000a96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a98:	3204      	adds	r2, #4

08000a9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a9c:	d3fb      	bcc.n	8000a96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a9e:	f7ff ffd7 	bl	8000a50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aa2:	f007 ff51 	bl	8008948 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aa6:	f7ff fd41 	bl	800052c <main>
  bx  lr    
 8000aaa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000aac:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab4:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 8000ab8:	08008aa8 	.word	0x08008aa8
  ldr r2, =_sbss
 8000abc:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 8000ac0:	20001d20 	.word	0x20001d20

08000ac4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ac4:	e7fe      	b.n	8000ac4 <ADC_IRQHandler>

08000ac6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aca:	2003      	movs	r0, #3
 8000acc:	f000 ffa4 	bl	8001a18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ad0:	200f      	movs	r0, #15
 8000ad2:	f000 f805 	bl	8000ae0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad6:	f7ff fed1 	bl	800087c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ada:	2300      	movs	r3, #0
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae8:	4b12      	ldr	r3, [pc, #72]	@ (8000b34 <HAL_InitTick+0x54>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b12      	ldr	r3, [pc, #72]	@ (8000b38 <HAL_InitTick+0x58>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	4619      	mov	r1, r3
 8000af2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000af6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 ffbf 	bl	8001a82 <HAL_SYSTICK_Config>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e00e      	b.n	8000b2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2b0f      	cmp	r3, #15
 8000b12:	d80a      	bhi.n	8000b2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b14:	2200      	movs	r2, #0
 8000b16:	6879      	ldr	r1, [r7, #4]
 8000b18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b1c:	f000 ff87 	bl	8001a2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b20:	4a06      	ldr	r2, [pc, #24]	@ (8000b3c <HAL_InitTick+0x5c>)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b26:	2300      	movs	r3, #0
 8000b28:	e000      	b.n	8000b2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000000 	.word	0x20000000
 8000b38:	20000008 	.word	0x20000008
 8000b3c:	20000004 	.word	0x20000004

08000b40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b44:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <HAL_IncTick+0x20>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <HAL_IncTick+0x24>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4413      	add	r3, r2
 8000b50:	4a04      	ldr	r2, [pc, #16]	@ (8000b64 <HAL_IncTick+0x24>)
 8000b52:	6013      	str	r3, [r2, #0]
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	20000008 	.word	0x20000008
 8000b64:	200001ec 	.word	0x200001ec

08000b68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b6c:	4b03      	ldr	r3, [pc, #12]	@ (8000b7c <HAL_GetTick+0x14>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	200001ec 	.word	0x200001ec

08000b80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b88:	f7ff ffee 	bl	8000b68 <HAL_GetTick>
 8000b8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000b98:	d005      	beq.n	8000ba6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc4 <HAL_Delay+0x44>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ba6:	bf00      	nop
 8000ba8:	f7ff ffde 	bl	8000b68 <HAL_GetTick>
 8000bac:	4602      	mov	r2, r0
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	68fa      	ldr	r2, [r7, #12]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d8f7      	bhi.n	8000ba8 <HAL_Delay+0x28>
  {
  }
}
 8000bb8:	bf00      	nop
 8000bba:	bf00      	nop
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000008 	.word	0x20000008

08000bc8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d101      	bne.n	8000bda <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e0ed      	b.n	8000db6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d102      	bne.n	8000bec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000be6:	6878      	ldr	r0, [r7, #4]
 8000be8:	f7ff fe6c 	bl	80008c4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f042 0201 	orr.w	r2, r2, #1
 8000bfa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bfc:	f7ff ffb4 	bl	8000b68 <HAL_GetTick>
 8000c00:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c02:	e012      	b.n	8000c2a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c04:	f7ff ffb0 	bl	8000b68 <HAL_GetTick>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	2b0a      	cmp	r3, #10
 8000c10:	d90b      	bls.n	8000c2a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c16:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2205      	movs	r2, #5
 8000c22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	e0c5      	b.n	8000db6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f003 0301 	and.w	r3, r3, #1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d0e5      	beq.n	8000c04 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f022 0202 	bic.w	r2, r2, #2
 8000c46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c48:	f7ff ff8e 	bl	8000b68 <HAL_GetTick>
 8000c4c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c4e:	e012      	b.n	8000c76 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c50:	f7ff ff8a 	bl	8000b68 <HAL_GetTick>
 8000c54:	4602      	mov	r2, r0
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	2b0a      	cmp	r3, #10
 8000c5c:	d90b      	bls.n	8000c76 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c62:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2205      	movs	r2, #5
 8000c6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	e09f      	b.n	8000db6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f003 0302 	and.w	r3, r3, #2
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d1e5      	bne.n	8000c50 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	7e1b      	ldrb	r3, [r3, #24]
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d108      	bne.n	8000c9e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	e007      	b.n	8000cae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000cac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	7e5b      	ldrb	r3, [r3, #25]
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d108      	bne.n	8000cc8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	e007      	b.n	8000cd8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000cd6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	7e9b      	ldrb	r3, [r3, #26]
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d108      	bne.n	8000cf2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f042 0220 	orr.w	r2, r2, #32
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	e007      	b.n	8000d02 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f022 0220 	bic.w	r2, r2, #32
 8000d00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	7edb      	ldrb	r3, [r3, #27]
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d108      	bne.n	8000d1c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f022 0210 	bic.w	r2, r2, #16
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	e007      	b.n	8000d2c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f042 0210 	orr.w	r2, r2, #16
 8000d2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	7f1b      	ldrb	r3, [r3, #28]
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d108      	bne.n	8000d46 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f042 0208 	orr.w	r2, r2, #8
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	e007      	b.n	8000d56 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f022 0208 	bic.w	r2, r2, #8
 8000d54:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	7f5b      	ldrb	r3, [r3, #29]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d108      	bne.n	8000d70 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f042 0204 	orr.w	r2, r2, #4
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	e007      	b.n	8000d80 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f022 0204 	bic.w	r2, r2, #4
 8000d7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	689a      	ldr	r2, [r3, #8]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	691b      	ldr	r3, [r3, #16]
 8000d8e:	431a      	orrs	r2, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	695b      	ldr	r3, [r3, #20]
 8000d94:	ea42 0103 	orr.w	r1, r2, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	1e5a      	subs	r2, r3, #1
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	430a      	orrs	r2, r1
 8000da4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2200      	movs	r2, #0
 8000daa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2201      	movs	r2, #1
 8000db0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b087      	sub	sp, #28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dd6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000dd8:	7cfb      	ldrb	r3, [r7, #19]
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d003      	beq.n	8000de6 <HAL_CAN_ConfigFilter+0x26>
 8000dde:	7cfb      	ldrb	r3, [r7, #19]
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	f040 80be 	bne.w	8000f62 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000de6:	4b65      	ldr	r3, [pc, #404]	@ (8000f7c <HAL_CAN_ConfigFilter+0x1bc>)
 8000de8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000df0:	f043 0201 	orr.w	r2, r3, #1
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000e00:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e14:	021b      	lsls	r3, r3, #8
 8000e16:	431a      	orrs	r2, r3
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	695b      	ldr	r3, [r3, #20]
 8000e22:	f003 031f 	and.w	r3, r3, #31
 8000e26:	2201      	movs	r2, #1
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	43db      	mvns	r3, r3
 8000e38:	401a      	ands	r2, r3
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	69db      	ldr	r3, [r3, #28]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d123      	bne.n	8000e90 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	43db      	mvns	r3, r3
 8000e52:	401a      	ands	r2, r3
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	68db      	ldr	r3, [r3, #12]
 8000e5e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e66:	683a      	ldr	r2, [r7, #0]
 8000e68:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000e6a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	3248      	adds	r2, #72	@ 0x48
 8000e70:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e84:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e86:	6979      	ldr	r1, [r7, #20]
 8000e88:	3348      	adds	r3, #72	@ 0x48
 8000e8a:	00db      	lsls	r3, r3, #3
 8000e8c:	440b      	add	r3, r1
 8000e8e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	69db      	ldr	r3, [r3, #28]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d122      	bne.n	8000ede <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	431a      	orrs	r2, r3
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000eb4:	683a      	ldr	r2, [r7, #0]
 8000eb6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000eb8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	3248      	adds	r2, #72	@ 0x48
 8000ebe:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ed2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ed4:	6979      	ldr	r1, [r7, #20]
 8000ed6:	3348      	adds	r3, #72	@ 0x48
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	440b      	add	r3, r1
 8000edc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	699b      	ldr	r3, [r3, #24]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d109      	bne.n	8000efa <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	401a      	ands	r2, r3
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000ef8:	e007      	b.n	8000f0a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	431a      	orrs	r2, r3
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	691b      	ldr	r3, [r3, #16]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d109      	bne.n	8000f26 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	401a      	ands	r2, r3
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000f24:	e007      	b.n	8000f36 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	431a      	orrs	r2, r3
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	6a1b      	ldr	r3, [r3, #32]
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d107      	bne.n	8000f4e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	431a      	orrs	r2, r3
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000f54:	f023 0201 	bic.w	r2, r3, #1
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	e006      	b.n	8000f70 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f66:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
  }
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	371c      	adds	r7, #28
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	40006400 	.word	0x40006400

08000f80 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d12e      	bne.n	8000ff2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2202      	movs	r2, #2
 8000f98:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f022 0201 	bic.w	r2, r2, #1
 8000faa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000fac:	f7ff fddc 	bl	8000b68 <HAL_GetTick>
 8000fb0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000fb2:	e012      	b.n	8000fda <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fb4:	f7ff fdd8 	bl	8000b68 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	2b0a      	cmp	r3, #10
 8000fc0:	d90b      	bls.n	8000fda <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fc6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2205      	movs	r2, #5
 8000fd2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e012      	b.n	8001000 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d1e5      	bne.n	8000fb4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	e006      	b.n	8001000 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ff6:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
  }
}
 8001000:	4618      	mov	r0, r3
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001008:	b480      	push	{r7}
 800100a:	b089      	sub	sp, #36	@ 0x24
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
 8001014:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	f893 3020 	ldrb.w	r3, [r3, #32]
 800101c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001026:	7ffb      	ldrb	r3, [r7, #31]
 8001028:	2b01      	cmp	r3, #1
 800102a:	d003      	beq.n	8001034 <HAL_CAN_AddTxMessage+0x2c>
 800102c:	7ffb      	ldrb	r3, [r7, #31]
 800102e:	2b02      	cmp	r3, #2
 8001030:	f040 80ad 	bne.w	800118e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d10a      	bne.n	8001054 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001044:	2b00      	cmp	r3, #0
 8001046:	d105      	bne.n	8001054 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800104e:	2b00      	cmp	r3, #0
 8001050:	f000 8095 	beq.w	800117e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	0e1b      	lsrs	r3, r3, #24
 8001058:	f003 0303 	and.w	r3, r3, #3
 800105c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800105e:	2201      	movs	r2, #1
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	409a      	lsls	r2, r3
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d10d      	bne.n	800108c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800107a:	68f9      	ldr	r1, [r7, #12]
 800107c:	6809      	ldr	r1, [r1, #0]
 800107e:	431a      	orrs	r2, r3
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	3318      	adds	r3, #24
 8001084:	011b      	lsls	r3, r3, #4
 8001086:	440b      	add	r3, r1
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	e00f      	b.n	80010ac <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001096:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800109c:	68f9      	ldr	r1, [r7, #12]
 800109e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80010a0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	3318      	adds	r3, #24
 80010a6:	011b      	lsls	r3, r3, #4
 80010a8:	440b      	add	r3, r1
 80010aa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	6819      	ldr	r1, [r3, #0]
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	691a      	ldr	r2, [r3, #16]
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	3318      	adds	r3, #24
 80010b8:	011b      	lsls	r3, r3, #4
 80010ba:	440b      	add	r3, r1
 80010bc:	3304      	adds	r3, #4
 80010be:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	7d1b      	ldrb	r3, [r3, #20]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d111      	bne.n	80010ec <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	3318      	adds	r3, #24
 80010d0:	011b      	lsls	r3, r3, #4
 80010d2:	4413      	add	r3, r2
 80010d4:	3304      	adds	r3, #4
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	68fa      	ldr	r2, [r7, #12]
 80010da:	6811      	ldr	r1, [r2, #0]
 80010dc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	3318      	adds	r3, #24
 80010e4:	011b      	lsls	r3, r3, #4
 80010e6:	440b      	add	r3, r1
 80010e8:	3304      	adds	r3, #4
 80010ea:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3307      	adds	r3, #7
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	061a      	lsls	r2, r3, #24
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3306      	adds	r3, #6
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	041b      	lsls	r3, r3, #16
 80010fc:	431a      	orrs	r2, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3305      	adds	r3, #5
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	021b      	lsls	r3, r3, #8
 8001106:	4313      	orrs	r3, r2
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	3204      	adds	r2, #4
 800110c:	7812      	ldrb	r2, [r2, #0]
 800110e:	4610      	mov	r0, r2
 8001110:	68fa      	ldr	r2, [r7, #12]
 8001112:	6811      	ldr	r1, [r2, #0]
 8001114:	ea43 0200 	orr.w	r2, r3, r0
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	011b      	lsls	r3, r3, #4
 800111c:	440b      	add	r3, r1
 800111e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001122:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3303      	adds	r3, #3
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	061a      	lsls	r2, r3, #24
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3302      	adds	r3, #2
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	041b      	lsls	r3, r3, #16
 8001134:	431a      	orrs	r2, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	3301      	adds	r3, #1
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	021b      	lsls	r3, r3, #8
 800113e:	4313      	orrs	r3, r2
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	7812      	ldrb	r2, [r2, #0]
 8001144:	4610      	mov	r0, r2
 8001146:	68fa      	ldr	r2, [r7, #12]
 8001148:	6811      	ldr	r1, [r2, #0]
 800114a:	ea43 0200 	orr.w	r2, r3, r0
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	011b      	lsls	r3, r3, #4
 8001152:	440b      	add	r3, r1
 8001154:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001158:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	3318      	adds	r3, #24
 8001162:	011b      	lsls	r3, r3, #4
 8001164:	4413      	add	r3, r2
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	68fa      	ldr	r2, [r7, #12]
 800116a:	6811      	ldr	r1, [r2, #0]
 800116c:	f043 0201 	orr.w	r2, r3, #1
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	3318      	adds	r3, #24
 8001174:	011b      	lsls	r3, r3, #4
 8001176:	440b      	add	r3, r1
 8001178:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800117a:	2300      	movs	r3, #0
 800117c:	e00e      	b.n	800119c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001182:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e006      	b.n	800119c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001192:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
  }
}
 800119c:	4618      	mov	r0, r3
 800119e:	3724      	adds	r7, #36	@ 0x24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80011a8:	b480      	push	{r7}
 80011aa:	b087      	sub	sp, #28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
 80011b4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011bc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80011be:	7dfb      	ldrb	r3, [r7, #23]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d003      	beq.n	80011cc <HAL_CAN_GetRxMessage+0x24>
 80011c4:	7dfb      	ldrb	r3, [r7, #23]
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	f040 80f3 	bne.w	80013b2 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d10e      	bne.n	80011f0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	f003 0303 	and.w	r3, r3, #3
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d116      	bne.n	800120e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011e4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e0e7      	b.n	80013c0 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	691b      	ldr	r3, [r3, #16]
 80011f6:	f003 0303 	and.w	r3, r3, #3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d107      	bne.n	800120e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001202:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e0d8      	b.n	80013c0 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	331b      	adds	r3, #27
 8001216:	011b      	lsls	r3, r3, #4
 8001218:	4413      	add	r3, r2
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0204 	and.w	r2, r3, #4
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d10c      	bne.n	8001246 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	331b      	adds	r3, #27
 8001234:	011b      	lsls	r3, r3, #4
 8001236:	4413      	add	r3, r2
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	0d5b      	lsrs	r3, r3, #21
 800123c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	e00b      	b.n	800125e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	331b      	adds	r3, #27
 800124e:	011b      	lsls	r3, r3, #4
 8001250:	4413      	add	r3, r2
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	08db      	lsrs	r3, r3, #3
 8001256:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	331b      	adds	r3, #27
 8001266:	011b      	lsls	r3, r3, #4
 8001268:	4413      	add	r3, r2
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0202 	and.w	r2, r3, #2
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	331b      	adds	r3, #27
 800127c:	011b      	lsls	r3, r3, #4
 800127e:	4413      	add	r3, r2
 8001280:	3304      	adds	r3, #4
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 020f 	and.w	r2, r3, #15
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	331b      	adds	r3, #27
 8001294:	011b      	lsls	r3, r3, #4
 8001296:	4413      	add	r3, r2
 8001298:	3304      	adds	r3, #4
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	0a1b      	lsrs	r3, r3, #8
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	331b      	adds	r3, #27
 80012ac:	011b      	lsls	r3, r3, #4
 80012ae:	4413      	add	r3, r2
 80012b0:	3304      	adds	r3, #4
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	0c1b      	lsrs	r3, r3, #16
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	011b      	lsls	r3, r3, #4
 80012c4:	4413      	add	r3, r2
 80012c6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	011b      	lsls	r3, r3, #4
 80012da:	4413      	add	r3, r2
 80012dc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	0a1a      	lsrs	r2, r3, #8
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	3301      	adds	r3, #1
 80012e8:	b2d2      	uxtb	r2, r2
 80012ea:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	011b      	lsls	r3, r3, #4
 80012f4:	4413      	add	r3, r2
 80012f6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	0c1a      	lsrs	r2, r3, #16
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	3302      	adds	r3, #2
 8001302:	b2d2      	uxtb	r2, r2
 8001304:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	011b      	lsls	r3, r3, #4
 800130e:	4413      	add	r3, r2
 8001310:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	0e1a      	lsrs	r2, r3, #24
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	3303      	adds	r3, #3
 800131c:	b2d2      	uxtb	r2, r2
 800131e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	011b      	lsls	r3, r3, #4
 8001328:	4413      	add	r3, r2
 800132a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	3304      	adds	r3, #4
 8001334:	b2d2      	uxtb	r2, r2
 8001336:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	011b      	lsls	r3, r3, #4
 8001340:	4413      	add	r3, r2
 8001342:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	0a1a      	lsrs	r2, r3, #8
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	3305      	adds	r3, #5
 800134e:	b2d2      	uxtb	r2, r2
 8001350:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	011b      	lsls	r3, r3, #4
 800135a:	4413      	add	r3, r2
 800135c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	0c1a      	lsrs	r2, r3, #16
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	3306      	adds	r3, #6
 8001368:	b2d2      	uxtb	r2, r2
 800136a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	011b      	lsls	r3, r3, #4
 8001374:	4413      	add	r3, r2
 8001376:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	0e1a      	lsrs	r2, r3, #24
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	3307      	adds	r3, #7
 8001382:	b2d2      	uxtb	r2, r2
 8001384:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d108      	bne.n	800139e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	68da      	ldr	r2, [r3, #12]
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f042 0220 	orr.w	r2, r2, #32
 800139a:	60da      	str	r2, [r3, #12]
 800139c:	e007      	b.n	80013ae <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	691a      	ldr	r2, [r3, #16]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f042 0220 	orr.w	r2, r2, #32
 80013ac:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80013ae:	2300      	movs	r3, #0
 80013b0:	e006      	b.n	80013c0 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013b6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
  }
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	371c      	adds	r7, #28
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013dc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80013de:	7bfb      	ldrb	r3, [r7, #15]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d002      	beq.n	80013ea <HAL_CAN_ActivateNotification+0x1e>
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d109      	bne.n	80013fe <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	6959      	ldr	r1, [r3, #20]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	683a      	ldr	r2, [r7, #0]
 80013f6:	430a      	orrs	r2, r1
 80013f8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80013fa:	2300      	movs	r3, #0
 80013fc:	e006      	b.n	800140c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001402:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
  }
}
 800140c:	4618      	mov	r0, r3
 800140e:	3714      	adds	r7, #20
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08a      	sub	sp, #40	@ 0x28
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001420:	2300      	movs	r3, #0
 8001422:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	691b      	ldr	r3, [r3, #16]
 800144a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001454:	6a3b      	ldr	r3, [r7, #32]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	2b00      	cmp	r3, #0
 800145c:	d07c      	beq.n	8001558 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	2b00      	cmp	r3, #0
 8001466:	d023      	beq.n	80014b0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2201      	movs	r2, #1
 800146e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f000 f983 	bl	8001786 <HAL_CAN_TxMailbox0CompleteCallback>
 8001480:	e016      	b.n	80014b0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	f003 0304 	and.w	r3, r3, #4
 8001488:	2b00      	cmp	r3, #0
 800148a:	d004      	beq.n	8001496 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800148c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800148e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001492:	627b      	str	r3, [r7, #36]	@ 0x24
 8001494:	e00c      	b.n	80014b0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	f003 0308 	and.w	r3, r3, #8
 800149c:	2b00      	cmp	r3, #0
 800149e:	d004      	beq.n	80014aa <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80014a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80014a8:	e002      	b.n	80014b0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f000 f989 	bl	80017c2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d024      	beq.n	8001504 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014c2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f000 f963 	bl	800179a <HAL_CAN_TxMailbox1CompleteCallback>
 80014d4:	e016      	b.n	8001504 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d004      	beq.n	80014ea <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80014e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80014e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80014e8:	e00c      	b.n	8001504 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d004      	beq.n	80014fe <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80014f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80014fc:	e002      	b.n	8001504 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f000 f969 	bl	80017d6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d024      	beq.n	8001558 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001516:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f000 f943 	bl	80017ae <HAL_CAN_TxMailbox2CompleteCallback>
 8001528:	e016      	b.n	8001558 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d004      	beq.n	800153e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001536:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800153a:	627b      	str	r3, [r7, #36]	@ 0x24
 800153c:	e00c      	b.n	8001558 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d004      	beq.n	8001552 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800154a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800154e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001550:	e002      	b.n	8001558 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f000 f949 	bl	80017ea <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001558:	6a3b      	ldr	r3, [r7, #32]
 800155a:	f003 0308 	and.w	r3, r3, #8
 800155e:	2b00      	cmp	r3, #0
 8001560:	d00c      	beq.n	800157c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	f003 0310 	and.w	r3, r3, #16
 8001568:	2b00      	cmp	r3, #0
 800156a:	d007      	beq.n	800157c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800156c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001572:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2210      	movs	r2, #16
 800157a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800157c:	6a3b      	ldr	r3, [r7, #32]
 800157e:	f003 0304 	and.w	r3, r3, #4
 8001582:	2b00      	cmp	r3, #0
 8001584:	d00b      	beq.n	800159e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	f003 0308 	and.w	r3, r3, #8
 800158c:	2b00      	cmp	r3, #0
 800158e:	d006      	beq.n	800159e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2208      	movs	r2, #8
 8001596:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f000 f930 	bl	80017fe <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800159e:	6a3b      	ldr	r3, [r7, #32]
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d009      	beq.n	80015bc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	f003 0303 	and.w	r3, r3, #3
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d002      	beq.n	80015bc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7fe ff9e 	bl	80004f8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80015bc:	6a3b      	ldr	r3, [r7, #32]
 80015be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d00c      	beq.n	80015e0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	f003 0310 	and.w	r3, r3, #16
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d007      	beq.n	80015e0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80015d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015d6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2210      	movs	r2, #16
 80015de:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80015e0:	6a3b      	ldr	r3, [r7, #32]
 80015e2:	f003 0320 	and.w	r3, r3, #32
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d00b      	beq.n	8001602 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	f003 0308 	and.w	r3, r3, #8
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d006      	beq.n	8001602 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2208      	movs	r2, #8
 80015fa:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f000 f912 	bl	8001826 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001602:	6a3b      	ldr	r3, [r7, #32]
 8001604:	f003 0310 	and.w	r3, r3, #16
 8001608:	2b00      	cmp	r3, #0
 800160a:	d009      	beq.n	8001620 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	f003 0303 	and.w	r3, r3, #3
 8001616:	2b00      	cmp	r3, #0
 8001618:	d002      	beq.n	8001620 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f000 f8f9 	bl	8001812 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001620:	6a3b      	ldr	r3, [r7, #32]
 8001622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d00b      	beq.n	8001642 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	f003 0310 	and.w	r3, r3, #16
 8001630:	2b00      	cmp	r3, #0
 8001632:	d006      	beq.n	8001642 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2210      	movs	r2, #16
 800163a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f000 f8fc 	bl	800183a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001642:	6a3b      	ldr	r3, [r7, #32]
 8001644:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d00b      	beq.n	8001664 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	f003 0308 	and.w	r3, r3, #8
 8001652:	2b00      	cmp	r3, #0
 8001654:	d006      	beq.n	8001664 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2208      	movs	r2, #8
 800165c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 f8f5 	bl	800184e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001664:	6a3b      	ldr	r3, [r7, #32]
 8001666:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d07b      	beq.n	8001766 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	f003 0304 	and.w	r3, r3, #4
 8001674:	2b00      	cmp	r3, #0
 8001676:	d072      	beq.n	800175e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001678:	6a3b      	ldr	r3, [r7, #32]
 800167a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800167e:	2b00      	cmp	r3, #0
 8001680:	d008      	beq.n	8001694 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001688:	2b00      	cmp	r3, #0
 800168a:	d003      	beq.n	8001694 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800168c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168e:	f043 0301 	orr.w	r3, r3, #1
 8001692:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001694:	6a3b      	ldr	r3, [r7, #32]
 8001696:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800169a:	2b00      	cmp	r3, #0
 800169c:	d008      	beq.n	80016b0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d003      	beq.n	80016b0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80016a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016aa:	f043 0302 	orr.w	r3, r3, #2
 80016ae:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80016b0:	6a3b      	ldr	r3, [r7, #32]
 80016b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d008      	beq.n	80016cc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d003      	beq.n	80016cc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80016c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c6:	f043 0304 	orr.w	r3, r3, #4
 80016ca:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80016cc:	6a3b      	ldr	r3, [r7, #32]
 80016ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d043      	beq.n	800175e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d03e      	beq.n	800175e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80016e6:	2b60      	cmp	r3, #96	@ 0x60
 80016e8:	d02b      	beq.n	8001742 <HAL_CAN_IRQHandler+0x32a>
 80016ea:	2b60      	cmp	r3, #96	@ 0x60
 80016ec:	d82e      	bhi.n	800174c <HAL_CAN_IRQHandler+0x334>
 80016ee:	2b50      	cmp	r3, #80	@ 0x50
 80016f0:	d022      	beq.n	8001738 <HAL_CAN_IRQHandler+0x320>
 80016f2:	2b50      	cmp	r3, #80	@ 0x50
 80016f4:	d82a      	bhi.n	800174c <HAL_CAN_IRQHandler+0x334>
 80016f6:	2b40      	cmp	r3, #64	@ 0x40
 80016f8:	d019      	beq.n	800172e <HAL_CAN_IRQHandler+0x316>
 80016fa:	2b40      	cmp	r3, #64	@ 0x40
 80016fc:	d826      	bhi.n	800174c <HAL_CAN_IRQHandler+0x334>
 80016fe:	2b30      	cmp	r3, #48	@ 0x30
 8001700:	d010      	beq.n	8001724 <HAL_CAN_IRQHandler+0x30c>
 8001702:	2b30      	cmp	r3, #48	@ 0x30
 8001704:	d822      	bhi.n	800174c <HAL_CAN_IRQHandler+0x334>
 8001706:	2b10      	cmp	r3, #16
 8001708:	d002      	beq.n	8001710 <HAL_CAN_IRQHandler+0x2f8>
 800170a:	2b20      	cmp	r3, #32
 800170c:	d005      	beq.n	800171a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800170e:	e01d      	b.n	800174c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001712:	f043 0308 	orr.w	r3, r3, #8
 8001716:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001718:	e019      	b.n	800174e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800171a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800171c:	f043 0310 	orr.w	r3, r3, #16
 8001720:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001722:	e014      	b.n	800174e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001726:	f043 0320 	orr.w	r3, r3, #32
 800172a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800172c:	e00f      	b.n	800174e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800172e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001730:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001734:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001736:	e00a      	b.n	800174e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800173a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800173e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001740:	e005      	b.n	800174e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001744:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001748:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800174a:	e000      	b.n	800174e <HAL_CAN_IRQHandler+0x336>
            break;
 800174c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	699a      	ldr	r2, [r3, #24]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800175c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2204      	movs	r2, #4
 8001764:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001768:	2b00      	cmp	r3, #0
 800176a:	d008      	beq.n	800177e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001772:	431a      	orrs	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f000 f872 	bl	8001862 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800177e:	bf00      	nop
 8001780:	3728      	adds	r7, #40	@ 0x28
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001786:	b480      	push	{r7}
 8001788:	b083      	sub	sp, #12
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800179a:	b480      	push	{r7}
 800179c:	b083      	sub	sp, #12
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b083      	sub	sp, #12
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80017fe:	b480      	push	{r7}
 8001800:	b083      	sub	sp, #12
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001812:	b480      	push	{r7}
 8001814:	b083      	sub	sp, #12
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001826:	b480      	push	{r7}
 8001828:	b083      	sub	sp, #12
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800184e:	b480      	push	{r7}
 8001850:	b083      	sub	sp, #12
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001862:	b480      	push	{r7}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
	...

08001878 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001888:	4b0b      	ldr	r3, [pc, #44]	@ (80018b8 <__NVIC_SetPriorityGrouping+0x40>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001894:	4013      	ands	r3, r2
 8001896:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018a0:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <__NVIC_SetPriorityGrouping+0x44>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018a6:	4a04      	ldr	r2, [pc, #16]	@ (80018b8 <__NVIC_SetPriorityGrouping+0x40>)
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	60d3      	str	r3, [r2, #12]
}
 80018ac:	bf00      	nop
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	e000ed00 	.word	0xe000ed00
 80018bc:	05fa0000 	.word	0x05fa0000

080018c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018c4:	4b04      	ldr	r3, [pc, #16]	@ (80018d8 <__NVIC_GetPriorityGrouping+0x18>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	0a1b      	lsrs	r3, r3, #8
 80018ca:	f003 0307 	and.w	r3, r3, #7
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	db0b      	blt.n	8001906 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	f003 021f 	and.w	r2, r3, #31
 80018f4:	4907      	ldr	r1, [pc, #28]	@ (8001914 <__NVIC_EnableIRQ+0x38>)
 80018f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fa:	095b      	lsrs	r3, r3, #5
 80018fc:	2001      	movs	r0, #1
 80018fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	e000e100 	.word	0xe000e100

08001918 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	6039      	str	r1, [r7, #0]
 8001922:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001928:	2b00      	cmp	r3, #0
 800192a:	db0a      	blt.n	8001942 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	b2da      	uxtb	r2, r3
 8001930:	490c      	ldr	r1, [pc, #48]	@ (8001964 <__NVIC_SetPriority+0x4c>)
 8001932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001936:	0112      	lsls	r2, r2, #4
 8001938:	b2d2      	uxtb	r2, r2
 800193a:	440b      	add	r3, r1
 800193c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001940:	e00a      	b.n	8001958 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	b2da      	uxtb	r2, r3
 8001946:	4908      	ldr	r1, [pc, #32]	@ (8001968 <__NVIC_SetPriority+0x50>)
 8001948:	79fb      	ldrb	r3, [r7, #7]
 800194a:	f003 030f 	and.w	r3, r3, #15
 800194e:	3b04      	subs	r3, #4
 8001950:	0112      	lsls	r2, r2, #4
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	440b      	add	r3, r1
 8001956:	761a      	strb	r2, [r3, #24]
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	e000e100 	.word	0xe000e100
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800196c:	b480      	push	{r7}
 800196e:	b089      	sub	sp, #36	@ 0x24
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	f1c3 0307 	rsb	r3, r3, #7
 8001986:	2b04      	cmp	r3, #4
 8001988:	bf28      	it	cs
 800198a:	2304      	movcs	r3, #4
 800198c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3304      	adds	r3, #4
 8001992:	2b06      	cmp	r3, #6
 8001994:	d902      	bls.n	800199c <NVIC_EncodePriority+0x30>
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	3b03      	subs	r3, #3
 800199a:	e000      	b.n	800199e <NVIC_EncodePriority+0x32>
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43da      	mvns	r2, r3
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	401a      	ands	r2, r3
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	fa01 f303 	lsl.w	r3, r1, r3
 80019be:	43d9      	mvns	r1, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c4:	4313      	orrs	r3, r2
         );
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3724      	adds	r7, #36	@ 0x24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
	...

080019d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3b01      	subs	r3, #1
 80019e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019e4:	d301      	bcc.n	80019ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019e6:	2301      	movs	r3, #1
 80019e8:	e00f      	b.n	8001a0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001a14 <SysTick_Config+0x40>)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3b01      	subs	r3, #1
 80019f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019f2:	210f      	movs	r1, #15
 80019f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019f8:	f7ff ff8e 	bl	8001918 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019fc:	4b05      	ldr	r3, [pc, #20]	@ (8001a14 <SysTick_Config+0x40>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a02:	4b04      	ldr	r3, [pc, #16]	@ (8001a14 <SysTick_Config+0x40>)
 8001a04:	2207      	movs	r2, #7
 8001a06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	e000e010 	.word	0xe000e010

08001a18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7ff ff29 	bl	8001878 <__NVIC_SetPriorityGrouping>
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b086      	sub	sp, #24
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	4603      	mov	r3, r0
 8001a36:	60b9      	str	r1, [r7, #8]
 8001a38:	607a      	str	r2, [r7, #4]
 8001a3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a40:	f7ff ff3e 	bl	80018c0 <__NVIC_GetPriorityGrouping>
 8001a44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	68b9      	ldr	r1, [r7, #8]
 8001a4a:	6978      	ldr	r0, [r7, #20]
 8001a4c:	f7ff ff8e 	bl	800196c <NVIC_EncodePriority>
 8001a50:	4602      	mov	r2, r0
 8001a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a56:	4611      	mov	r1, r2
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff ff5d 	bl	8001918 <__NVIC_SetPriority>
}
 8001a5e:	bf00      	nop
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff ff31 	bl	80018dc <__NVIC_EnableIRQ>
}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b082      	sub	sp, #8
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff ffa2 	bl	80019d4 <SysTick_Config>
 8001a90:	4603      	mov	r3, r0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
	...

08001a9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b089      	sub	sp, #36	@ 0x24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61fb      	str	r3, [r7, #28]
 8001aba:	e175      	b.n	8001da8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001abc:	2201      	movs	r2, #1
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	697a      	ldr	r2, [r7, #20]
 8001acc:	4013      	ands	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	f040 8164 	bne.w	8001da2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f003 0303 	and.w	r3, r3, #3
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d005      	beq.n	8001af2 <HAL_GPIO_Init+0x56>
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f003 0303 	and.w	r3, r3, #3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d130      	bne.n	8001b54 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	2203      	movs	r2, #3
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43db      	mvns	r3, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4013      	ands	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	68da      	ldr	r2, [r3, #12]
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b28:	2201      	movs	r2, #1
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4013      	ands	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	091b      	lsrs	r3, r3, #4
 8001b3e:	f003 0201 	and.w	r2, r3, #1
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 0303 	and.w	r3, r3, #3
 8001b5c:	2b03      	cmp	r3, #3
 8001b5e:	d017      	beq.n	8001b90 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	2203      	movs	r2, #3
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	689a      	ldr	r2, [r3, #8]
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 0303 	and.w	r3, r3, #3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d123      	bne.n	8001be4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	08da      	lsrs	r2, r3, #3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3208      	adds	r2, #8
 8001ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	220f      	movs	r2, #15
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	691a      	ldr	r2, [r3, #16]
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	08da      	lsrs	r2, r3, #3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	3208      	adds	r2, #8
 8001bde:	69b9      	ldr	r1, [r7, #24]
 8001be0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	2203      	movs	r2, #3
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f003 0203 	and.w	r2, r3, #3
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f000 80be 	beq.w	8001da2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c26:	4b66      	ldr	r3, [pc, #408]	@ (8001dc0 <HAL_GPIO_Init+0x324>)
 8001c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c2a:	4a65      	ldr	r2, [pc, #404]	@ (8001dc0 <HAL_GPIO_Init+0x324>)
 8001c2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c30:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c32:	4b63      	ldr	r3, [pc, #396]	@ (8001dc0 <HAL_GPIO_Init+0x324>)
 8001c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c3e:	4a61      	ldr	r2, [pc, #388]	@ (8001dc4 <HAL_GPIO_Init+0x328>)
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	089b      	lsrs	r3, r3, #2
 8001c44:	3302      	adds	r3, #2
 8001c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	f003 0303 	and.w	r3, r3, #3
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	220f      	movs	r2, #15
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a58      	ldr	r2, [pc, #352]	@ (8001dc8 <HAL_GPIO_Init+0x32c>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d037      	beq.n	8001cda <HAL_GPIO_Init+0x23e>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a57      	ldr	r2, [pc, #348]	@ (8001dcc <HAL_GPIO_Init+0x330>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d031      	beq.n	8001cd6 <HAL_GPIO_Init+0x23a>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a56      	ldr	r2, [pc, #344]	@ (8001dd0 <HAL_GPIO_Init+0x334>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d02b      	beq.n	8001cd2 <HAL_GPIO_Init+0x236>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a55      	ldr	r2, [pc, #340]	@ (8001dd4 <HAL_GPIO_Init+0x338>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d025      	beq.n	8001cce <HAL_GPIO_Init+0x232>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a54      	ldr	r2, [pc, #336]	@ (8001dd8 <HAL_GPIO_Init+0x33c>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d01f      	beq.n	8001cca <HAL_GPIO_Init+0x22e>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a53      	ldr	r2, [pc, #332]	@ (8001ddc <HAL_GPIO_Init+0x340>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d019      	beq.n	8001cc6 <HAL_GPIO_Init+0x22a>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a52      	ldr	r2, [pc, #328]	@ (8001de0 <HAL_GPIO_Init+0x344>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d013      	beq.n	8001cc2 <HAL_GPIO_Init+0x226>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a51      	ldr	r2, [pc, #324]	@ (8001de4 <HAL_GPIO_Init+0x348>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d00d      	beq.n	8001cbe <HAL_GPIO_Init+0x222>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a50      	ldr	r2, [pc, #320]	@ (8001de8 <HAL_GPIO_Init+0x34c>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d007      	beq.n	8001cba <HAL_GPIO_Init+0x21e>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a4f      	ldr	r2, [pc, #316]	@ (8001dec <HAL_GPIO_Init+0x350>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d101      	bne.n	8001cb6 <HAL_GPIO_Init+0x21a>
 8001cb2:	2309      	movs	r3, #9
 8001cb4:	e012      	b.n	8001cdc <HAL_GPIO_Init+0x240>
 8001cb6:	230a      	movs	r3, #10
 8001cb8:	e010      	b.n	8001cdc <HAL_GPIO_Init+0x240>
 8001cba:	2308      	movs	r3, #8
 8001cbc:	e00e      	b.n	8001cdc <HAL_GPIO_Init+0x240>
 8001cbe:	2307      	movs	r3, #7
 8001cc0:	e00c      	b.n	8001cdc <HAL_GPIO_Init+0x240>
 8001cc2:	2306      	movs	r3, #6
 8001cc4:	e00a      	b.n	8001cdc <HAL_GPIO_Init+0x240>
 8001cc6:	2305      	movs	r3, #5
 8001cc8:	e008      	b.n	8001cdc <HAL_GPIO_Init+0x240>
 8001cca:	2304      	movs	r3, #4
 8001ccc:	e006      	b.n	8001cdc <HAL_GPIO_Init+0x240>
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e004      	b.n	8001cdc <HAL_GPIO_Init+0x240>
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	e002      	b.n	8001cdc <HAL_GPIO_Init+0x240>
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e000      	b.n	8001cdc <HAL_GPIO_Init+0x240>
 8001cda:	2300      	movs	r3, #0
 8001cdc:	69fa      	ldr	r2, [r7, #28]
 8001cde:	f002 0203 	and.w	r2, r2, #3
 8001ce2:	0092      	lsls	r2, r2, #2
 8001ce4:	4093      	lsls	r3, r2
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001cec:	4935      	ldr	r1, [pc, #212]	@ (8001dc4 <HAL_GPIO_Init+0x328>)
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	089b      	lsrs	r3, r3, #2
 8001cf2:	3302      	adds	r3, #2
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cfa:	4b3d      	ldr	r3, [pc, #244]	@ (8001df0 <HAL_GPIO_Init+0x354>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	43db      	mvns	r3, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4013      	ands	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d1e:	4a34      	ldr	r2, [pc, #208]	@ (8001df0 <HAL_GPIO_Init+0x354>)
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d24:	4b32      	ldr	r3, [pc, #200]	@ (8001df0 <HAL_GPIO_Init+0x354>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4013      	ands	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d003      	beq.n	8001d48 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d48:	4a29      	ldr	r2, [pc, #164]	@ (8001df0 <HAL_GPIO_Init+0x354>)
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d4e:	4b28      	ldr	r3, [pc, #160]	@ (8001df0 <HAL_GPIO_Init+0x354>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	43db      	mvns	r3, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d72:	4a1f      	ldr	r2, [pc, #124]	@ (8001df0 <HAL_GPIO_Init+0x354>)
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d78:	4b1d      	ldr	r3, [pc, #116]	@ (8001df0 <HAL_GPIO_Init+0x354>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d003      	beq.n	8001d9c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d9c:	4a14      	ldr	r2, [pc, #80]	@ (8001df0 <HAL_GPIO_Init+0x354>)
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	3301      	adds	r3, #1
 8001da6:	61fb      	str	r3, [r7, #28]
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	2b0f      	cmp	r3, #15
 8001dac:	f67f ae86 	bls.w	8001abc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001db0:	bf00      	nop
 8001db2:	bf00      	nop
 8001db4:	3724      	adds	r7, #36	@ 0x24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	40013800 	.word	0x40013800
 8001dc8:	40020000 	.word	0x40020000
 8001dcc:	40020400 	.word	0x40020400
 8001dd0:	40020800 	.word	0x40020800
 8001dd4:	40020c00 	.word	0x40020c00
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	40021400 	.word	0x40021400
 8001de0:	40021800 	.word	0x40021800
 8001de4:	40021c00 	.word	0x40021c00
 8001de8:	40022000 	.word	0x40022000
 8001dec:	40022400 	.word	0x40022400
 8001df0:	40013c00 	.word	0x40013c00

08001df4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	807b      	strh	r3, [r7, #2]
 8001e00:	4613      	mov	r3, r2
 8001e02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e04:	787b      	ldrb	r3, [r7, #1]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e0a:	887a      	ldrh	r2, [r7, #2]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001e10:	e003      	b.n	8001e1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001e12:	887b      	ldrh	r3, [r7, #2]
 8001e14:	041a      	lsls	r2, r3, #16
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	619a      	str	r2, [r3, #24]
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b085      	sub	sp, #20
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
 8001e2e:	460b      	mov	r3, r1
 8001e30:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e38:	887a      	ldrh	r2, [r7, #2]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	041a      	lsls	r2, r3, #16
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	43d9      	mvns	r1, r3
 8001e44:	887b      	ldrh	r3, [r7, #2]
 8001e46:	400b      	ands	r3, r1
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	619a      	str	r2, [r3, #24]
}
 8001e4e:	bf00      	nop
 8001e50:	3714      	adds	r7, #20
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e5c:	b08f      	sub	sp, #60	@ 0x3c
 8001e5e:	af0a      	add	r7, sp, #40	@ 0x28
 8001e60:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d101      	bne.n	8001e6c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e116      	b.n	800209a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d106      	bne.n	8001e8c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f006 f918 	bl	80080bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2203      	movs	r2, #3
 8001e90:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d102      	bne.n	8001ea6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f002 fc29 	bl	8004702 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	603b      	str	r3, [r7, #0]
 8001eb6:	687e      	ldr	r6, [r7, #4]
 8001eb8:	466d      	mov	r5, sp
 8001eba:	f106 0410 	add.w	r4, r6, #16
 8001ebe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ec0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ec2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ec4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ec6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001eca:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ece:	1d33      	adds	r3, r6, #4
 8001ed0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ed2:	6838      	ldr	r0, [r7, #0]
 8001ed4:	f002 fb0a 	bl	80044ec <USB_CoreInit>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d005      	beq.n	8001eea <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2202      	movs	r2, #2
 8001ee2:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e0d7      	b.n	800209a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2100      	movs	r1, #0
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f002 fc17 	bl	8004724 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	73fb      	strb	r3, [r7, #15]
 8001efa:	e04a      	b.n	8001f92 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001efc:	7bfa      	ldrb	r2, [r7, #15]
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	4613      	mov	r3, r2
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	4413      	add	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	440b      	add	r3, r1
 8001f0a:	333d      	adds	r3, #61	@ 0x3d
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f10:	7bfa      	ldrb	r2, [r7, #15]
 8001f12:	6879      	ldr	r1, [r7, #4]
 8001f14:	4613      	mov	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	4413      	add	r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	333c      	adds	r3, #60	@ 0x3c
 8001f20:	7bfa      	ldrb	r2, [r7, #15]
 8001f22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f24:	7bfa      	ldrb	r2, [r7, #15]
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
 8001f28:	b298      	uxth	r0, r3
 8001f2a:	6879      	ldr	r1, [r7, #4]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	4413      	add	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	440b      	add	r3, r1
 8001f36:	3344      	adds	r3, #68	@ 0x44
 8001f38:	4602      	mov	r2, r0
 8001f3a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f3c:	7bfa      	ldrb	r2, [r7, #15]
 8001f3e:	6879      	ldr	r1, [r7, #4]
 8001f40:	4613      	mov	r3, r2
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	4413      	add	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	440b      	add	r3, r1
 8001f4a:	3340      	adds	r3, #64	@ 0x40
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f50:	7bfa      	ldrb	r2, [r7, #15]
 8001f52:	6879      	ldr	r1, [r7, #4]
 8001f54:	4613      	mov	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4413      	add	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	3348      	adds	r3, #72	@ 0x48
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f64:	7bfa      	ldrb	r2, [r7, #15]
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	4413      	add	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	440b      	add	r3, r1
 8001f72:	334c      	adds	r3, #76	@ 0x4c
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f78:	7bfa      	ldrb	r2, [r7, #15]
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	4413      	add	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	3354      	adds	r3, #84	@ 0x54
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f8c:	7bfb      	ldrb	r3, [r7, #15]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	73fb      	strb	r3, [r7, #15]
 8001f92:	7bfa      	ldrb	r2, [r7, #15]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d3af      	bcc.n	8001efc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	73fb      	strb	r3, [r7, #15]
 8001fa0:	e044      	b.n	800202c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001fa2:	7bfa      	ldrb	r2, [r7, #15]
 8001fa4:	6879      	ldr	r1, [r7, #4]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	4413      	add	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	440b      	add	r3, r1
 8001fb0:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001fb8:	7bfa      	ldrb	r2, [r7, #15]
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	4413      	add	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	440b      	add	r3, r1
 8001fc6:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8001fca:	7bfa      	ldrb	r2, [r7, #15]
 8001fcc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001fce:	7bfa      	ldrb	r2, [r7, #15]
 8001fd0:	6879      	ldr	r1, [r7, #4]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	4413      	add	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	440b      	add	r3, r1
 8001fdc:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001fe4:	7bfa      	ldrb	r2, [r7, #15]
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	4413      	add	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	440b      	add	r3, r1
 8001ff2:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ffa:	7bfa      	ldrb	r2, [r7, #15]
 8001ffc:	6879      	ldr	r1, [r7, #4]
 8001ffe:	4613      	mov	r3, r2
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	4413      	add	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	440b      	add	r3, r1
 8002008:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002010:	7bfa      	ldrb	r2, [r7, #15]
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	4613      	mov	r3, r2
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	4413      	add	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	440b      	add	r3, r1
 800201e:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002026:	7bfb      	ldrb	r3, [r7, #15]
 8002028:	3301      	adds	r3, #1
 800202a:	73fb      	strb	r3, [r7, #15]
 800202c:	7bfa      	ldrb	r2, [r7, #15]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	429a      	cmp	r2, r3
 8002034:	d3b5      	bcc.n	8001fa2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	603b      	str	r3, [r7, #0]
 800203c:	687e      	ldr	r6, [r7, #4]
 800203e:	466d      	mov	r5, sp
 8002040:	f106 0410 	add.w	r4, r6, #16
 8002044:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002046:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002048:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800204a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800204c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002050:	e885 0003 	stmia.w	r5, {r0, r1}
 8002054:	1d33      	adds	r3, r6, #4
 8002056:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002058:	6838      	ldr	r0, [r7, #0]
 800205a:	f002 fbaf 	bl	80047bc <USB_DevInit>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d005      	beq.n	8002070 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2202      	movs	r2, #2
 8002068:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e014      	b.n	800209a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002084:	2b01      	cmp	r3, #1
 8002086:	d102      	bne.n	800208e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f001 f97b 	bl	8003384 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f003 fcfd 	bl	8005a92 <USB_DevDisconnect>

  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3714      	adds	r7, #20
 800209e:	46bd      	mov	sp, r7
 80020a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020a2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b082      	sub	sp, #8
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d101      	bne.n	80020b8 <HAL_PCD_Start+0x16>
 80020b4:	2302      	movs	r3, #2
 80020b6:	e012      	b.n	80020de <HAL_PCD_Start+0x3c>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f002 fb0b 	bl	80046e0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f003 fcbe 	bl	8005a50 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80020e6:	b590      	push	{r4, r7, lr}
 80020e8:	b08d      	sub	sp, #52	@ 0x34
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020f4:	6a3b      	ldr	r3, [r7, #32]
 80020f6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f003 fd7c 	bl	8005bfa <USB_GetMode>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	f040 84b7 	bne.w	8002a78 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f003 fce0 	bl	8005ad4 <USB_ReadInterrupts>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 84ad 	beq.w	8002a76 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	0a1b      	lsrs	r3, r3, #8
 8002126:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4618      	mov	r0, r3
 8002136:	f003 fccd 	bl	8005ad4 <USB_ReadInterrupts>
 800213a:	4603      	mov	r3, r0
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b02      	cmp	r3, #2
 8002142:	d107      	bne.n	8002154 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	695a      	ldr	r2, [r3, #20]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f002 0202 	and.w	r2, r2, #2
 8002152:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f003 fcbb 	bl	8005ad4 <USB_ReadInterrupts>
 800215e:	4603      	mov	r3, r0
 8002160:	f003 0310 	and.w	r3, r3, #16
 8002164:	2b10      	cmp	r3, #16
 8002166:	d161      	bne.n	800222c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	699a      	ldr	r2, [r3, #24]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0210 	bic.w	r2, r2, #16
 8002176:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002178:	6a3b      	ldr	r3, [r7, #32]
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	f003 020f 	and.w	r2, r3, #15
 8002184:	4613      	mov	r3, r2
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	4413      	add	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	4413      	add	r3, r2
 8002194:	3304      	adds	r3, #4
 8002196:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	0c5b      	lsrs	r3, r3, #17
 800219c:	f003 030f 	and.w	r3, r3, #15
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d124      	bne.n	80021ee <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80021aa:	4013      	ands	r3, r2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d035      	beq.n	800221c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	091b      	lsrs	r3, r3, #4
 80021b8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80021ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021be:	b29b      	uxth	r3, r3
 80021c0:	461a      	mov	r2, r3
 80021c2:	6a38      	ldr	r0, [r7, #32]
 80021c4:	f003 faf2 	bl	80057ac <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	691a      	ldr	r2, [r3, #16]
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	091b      	lsrs	r3, r3, #4
 80021d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021d4:	441a      	add	r2, r3
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	6a1a      	ldr	r2, [r3, #32]
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	091b      	lsrs	r3, r3, #4
 80021e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021e6:	441a      	add	r2, r3
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	621a      	str	r2, [r3, #32]
 80021ec:	e016      	b.n	800221c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	0c5b      	lsrs	r3, r3, #17
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	2b06      	cmp	r3, #6
 80021f8:	d110      	bne.n	800221c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8002200:	2208      	movs	r2, #8
 8002202:	4619      	mov	r1, r3
 8002204:	6a38      	ldr	r0, [r7, #32]
 8002206:	f003 fad1 	bl	80057ac <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	6a1a      	ldr	r2, [r3, #32]
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	091b      	lsrs	r3, r3, #4
 8002212:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002216:	441a      	add	r2, r3
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	699a      	ldr	r2, [r3, #24]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f042 0210 	orr.w	r2, r2, #16
 800222a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4618      	mov	r0, r3
 8002232:	f003 fc4f 	bl	8005ad4 <USB_ReadInterrupts>
 8002236:	4603      	mov	r3, r0
 8002238:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800223c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002240:	f040 80a7 	bne.w	8002392 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002244:	2300      	movs	r3, #0
 8002246:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	f003 fc54 	bl	8005afa <USB_ReadDevAllOutEpInterrupt>
 8002252:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002254:	e099      	b.n	800238a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b00      	cmp	r3, #0
 800225e:	f000 808e 	beq.w	800237e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002268:	b2d2      	uxtb	r2, r2
 800226a:	4611      	mov	r1, r2
 800226c:	4618      	mov	r0, r3
 800226e:	f003 fc78 	bl	8005b62 <USB_ReadDevOutEPInterrupt>
 8002272:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00c      	beq.n	8002298 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800227e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002280:	015a      	lsls	r2, r3, #5
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	4413      	add	r3, r2
 8002286:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800228a:	461a      	mov	r2, r3
 800228c:	2301      	movs	r3, #1
 800228e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002290:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 fef0 	bl	8003078 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	f003 0308 	and.w	r3, r3, #8
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00c      	beq.n	80022bc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80022a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a4:	015a      	lsls	r2, r3, #5
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	4413      	add	r3, r2
 80022aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022ae:	461a      	mov	r2, r3
 80022b0:	2308      	movs	r3, #8
 80022b2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80022b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 ffc6 	bl	8003248 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	f003 0310 	and.w	r3, r3, #16
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d008      	beq.n	80022d8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80022c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c8:	015a      	lsls	r2, r3, #5
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	4413      	add	r3, r2
 80022ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022d2:	461a      	mov	r2, r3
 80022d4:	2310      	movs	r3, #16
 80022d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d030      	beq.n	8002344 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80022e2:	6a3b      	ldr	r3, [r7, #32]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022ea:	2b80      	cmp	r3, #128	@ 0x80
 80022ec:	d109      	bne.n	8002302 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	69fa      	ldr	r2, [r7, #28]
 80022f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80022fc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002300:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002302:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002304:	4613      	mov	r3, r2
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	4413      	add	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	4413      	add	r3, r2
 8002314:	3304      	adds	r3, #4
 8002316:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	78db      	ldrb	r3, [r3, #3]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d108      	bne.n	8002332 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	2200      	movs	r2, #0
 8002324:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002328:	b2db      	uxtb	r3, r3
 800232a:	4619      	mov	r1, r3
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f005 ffdf 	bl	80082f0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002334:	015a      	lsls	r2, r3, #5
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	4413      	add	r3, r2
 800233a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800233e:	461a      	mov	r2, r3
 8002340:	2302      	movs	r3, #2
 8002342:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	f003 0320 	and.w	r3, r3, #32
 800234a:	2b00      	cmp	r3, #0
 800234c:	d008      	beq.n	8002360 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800234e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002350:	015a      	lsls	r2, r3, #5
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	4413      	add	r3, r2
 8002356:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800235a:	461a      	mov	r2, r3
 800235c:	2320      	movs	r3, #32
 800235e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d009      	beq.n	800237e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800236a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236c:	015a      	lsls	r2, r3, #5
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	4413      	add	r3, r2
 8002372:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002376:	461a      	mov	r2, r3
 8002378:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800237c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800237e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002380:	3301      	adds	r3, #1
 8002382:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002386:	085b      	lsrs	r3, r3, #1
 8002388:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800238a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800238c:	2b00      	cmp	r3, #0
 800238e:	f47f af62 	bne.w	8002256 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f003 fb9c 	bl	8005ad4 <USB_ReadInterrupts>
 800239c:	4603      	mov	r3, r0
 800239e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023a2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80023a6:	f040 80db 	bne.w	8002560 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f003 fbbd 	bl	8005b2e <USB_ReadDevAllInEpInterrupt>
 80023b4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80023ba:	e0cd      	b.n	8002558 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80023bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 80c2 	beq.w	800254c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	4611      	mov	r1, r2
 80023d2:	4618      	mov	r0, r3
 80023d4:	f003 fbe3 	bl	8005b9e <USB_ReadDevInEPInterrupt>
 80023d8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d057      	beq.n	8002494 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80023e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	2201      	movs	r2, #1
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	43db      	mvns	r3, r3
 80023fe:	69f9      	ldr	r1, [r7, #28]
 8002400:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002404:	4013      	ands	r3, r2
 8002406:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240a:	015a      	lsls	r2, r3, #5
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	4413      	add	r3, r2
 8002410:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002414:	461a      	mov	r2, r3
 8002416:	2301      	movs	r3, #1
 8002418:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d132      	bne.n	8002488 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002426:	4613      	mov	r3, r2
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	4413      	add	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	440b      	add	r3, r1
 8002430:	334c      	adds	r3, #76	@ 0x4c
 8002432:	6819      	ldr	r1, [r3, #0]
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002438:	4613      	mov	r3, r2
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	4413      	add	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4403      	add	r3, r0
 8002442:	3348      	adds	r3, #72	@ 0x48
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4419      	add	r1, r3
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800244c:	4613      	mov	r3, r2
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	4413      	add	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	4403      	add	r3, r0
 8002456:	334c      	adds	r3, #76	@ 0x4c
 8002458:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800245a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245c:	2b00      	cmp	r3, #0
 800245e:	d113      	bne.n	8002488 <HAL_PCD_IRQHandler+0x3a2>
 8002460:	6879      	ldr	r1, [r7, #4]
 8002462:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002464:	4613      	mov	r3, r2
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	4413      	add	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	3354      	adds	r3, #84	@ 0x54
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d108      	bne.n	8002488 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6818      	ldr	r0, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8002480:	461a      	mov	r2, r3
 8002482:	2101      	movs	r1, #1
 8002484:	f003 fbec 	bl	8005c60 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248a:	b2db      	uxtb	r3, r3
 800248c:	4619      	mov	r1, r3
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f005 fea9 	bl	80081e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	f003 0308 	and.w	r3, r3, #8
 800249a:	2b00      	cmp	r3, #0
 800249c:	d008      	beq.n	80024b0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800249e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a0:	015a      	lsls	r2, r3, #5
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	4413      	add	r3, r2
 80024a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80024aa:	461a      	mov	r2, r3
 80024ac:	2308      	movs	r3, #8
 80024ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	f003 0310 	and.w	r3, r3, #16
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d008      	beq.n	80024cc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80024ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024bc:	015a      	lsls	r2, r3, #5
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	4413      	add	r3, r2
 80024c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80024c6:	461a      	mov	r2, r3
 80024c8:	2310      	movs	r3, #16
 80024ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d008      	beq.n	80024e8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80024d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d8:	015a      	lsls	r2, r3, #5
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	4413      	add	r3, r2
 80024de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80024e2:	461a      	mov	r2, r3
 80024e4:	2340      	movs	r3, #64	@ 0x40
 80024e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d023      	beq.n	800253a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80024f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80024f4:	6a38      	ldr	r0, [r7, #32]
 80024f6:	f002 fabf 	bl	8004a78 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80024fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024fc:	4613      	mov	r3, r2
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	4413      	add	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	3338      	adds	r3, #56	@ 0x38
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	4413      	add	r3, r2
 800250a:	3304      	adds	r3, #4
 800250c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	78db      	ldrb	r3, [r3, #3]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d108      	bne.n	8002528 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	2200      	movs	r2, #0
 800251a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800251c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251e:	b2db      	uxtb	r3, r3
 8002520:	4619      	mov	r1, r3
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f005 fef6 	bl	8008314 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252a:	015a      	lsls	r2, r3, #5
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	4413      	add	r3, r2
 8002530:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002534:	461a      	mov	r2, r3
 8002536:	2302      	movs	r3, #2
 8002538:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002544:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 fd08 	bl	8002f5c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800254c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254e:	3301      	adds	r3, #1
 8002550:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002554:	085b      	lsrs	r3, r3, #1
 8002556:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800255a:	2b00      	cmp	r3, #0
 800255c:	f47f af2e 	bne.w	80023bc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f003 fab5 	bl	8005ad4 <USB_ReadInterrupts>
 800256a:	4603      	mov	r3, r0
 800256c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002570:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002574:	d122      	bne.n	80025bc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	69fa      	ldr	r2, [r7, #28]
 8002580:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002584:	f023 0301 	bic.w	r3, r3, #1
 8002588:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8002590:	2b01      	cmp	r3, #1
 8002592:	d108      	bne.n	80025a6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800259c:	2100      	movs	r1, #0
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f006 f876 	bl	8008690 <HAL_PCDEx_LPM_Callback>
 80025a4:	e002      	b.n	80025ac <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f005 fe94 	bl	80082d4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	695a      	ldr	r2, [r3, #20]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80025ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f003 fa87 	bl	8005ad4 <USB_ReadInterrupts>
 80025c6:	4603      	mov	r3, r0
 80025c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80025d0:	d112      	bne.n	80025f8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d102      	bne.n	80025e8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f005 fe50 	bl	8008288 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	695a      	ldr	r2, [r3, #20]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80025f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f003 fa69 	bl	8005ad4 <USB_ReadInterrupts>
 8002602:	4603      	mov	r3, r0
 8002604:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002608:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800260c:	d121      	bne.n	8002652 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	695a      	ldr	r2, [r3, #20]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800261c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8002624:	2b00      	cmp	r3, #0
 8002626:	d111      	bne.n	800264c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002636:	089b      	lsrs	r3, r3, #2
 8002638:	f003 020f 	and.w	r2, r3, #15
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002642:	2101      	movs	r1, #1
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f006 f823 	bl	8008690 <HAL_PCDEx_LPM_Callback>
 800264a:	e002      	b.n	8002652 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f005 fe1b 	bl	8008288 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f003 fa3c 	bl	8005ad4 <USB_ReadInterrupts>
 800265c:	4603      	mov	r3, r0
 800265e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002662:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002666:	f040 80b7 	bne.w	80027d8 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	69fa      	ldr	r2, [r7, #28]
 8002674:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002678:	f023 0301 	bic.w	r3, r3, #1
 800267c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2110      	movs	r1, #16
 8002684:	4618      	mov	r0, r3
 8002686:	f002 f9f7 	bl	8004a78 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800268a:	2300      	movs	r3, #0
 800268c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800268e:	e046      	b.n	800271e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002692:	015a      	lsls	r2, r3, #5
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	4413      	add	r3, r2
 8002698:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800269c:	461a      	mov	r2, r3
 800269e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80026a2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80026a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026a6:	015a      	lsls	r2, r3, #5
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	4413      	add	r3, r2
 80026ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026b4:	0151      	lsls	r1, r2, #5
 80026b6:	69fa      	ldr	r2, [r7, #28]
 80026b8:	440a      	add	r2, r1
 80026ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80026be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80026c2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80026c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026c6:	015a      	lsls	r2, r3, #5
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	4413      	add	r3, r2
 80026cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026d0:	461a      	mov	r2, r3
 80026d2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80026d6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80026d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026da:	015a      	lsls	r2, r3, #5
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	4413      	add	r3, r2
 80026e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026e8:	0151      	lsls	r1, r2, #5
 80026ea:	69fa      	ldr	r2, [r7, #28]
 80026ec:	440a      	add	r2, r1
 80026ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80026f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80026f6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80026f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026fa:	015a      	lsls	r2, r3, #5
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	4413      	add	r3, r2
 8002700:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002708:	0151      	lsls	r1, r2, #5
 800270a:	69fa      	ldr	r2, [r7, #28]
 800270c:	440a      	add	r2, r1
 800270e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002712:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002716:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800271a:	3301      	adds	r3, #1
 800271c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002724:	429a      	cmp	r2, r3
 8002726:	d3b3      	bcc.n	8002690 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800272e:	69db      	ldr	r3, [r3, #28]
 8002730:	69fa      	ldr	r2, [r7, #28]
 8002732:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002736:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800273a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002740:	2b00      	cmp	r3, #0
 8002742:	d016      	beq.n	8002772 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800274a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800274e:	69fa      	ldr	r2, [r7, #28]
 8002750:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002754:	f043 030b 	orr.w	r3, r3, #11
 8002758:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002762:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002764:	69fa      	ldr	r2, [r7, #28]
 8002766:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800276a:	f043 030b 	orr.w	r3, r3, #11
 800276e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002770:	e015      	b.n	800279e <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002778:	695a      	ldr	r2, [r3, #20]
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002780:	4619      	mov	r1, r3
 8002782:	f242 032b 	movw	r3, #8235	@ 0x202b
 8002786:	4313      	orrs	r3, r2
 8002788:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	69fa      	ldr	r2, [r7, #28]
 8002794:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002798:	f043 030b 	orr.w	r3, r3, #11
 800279c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	69fa      	ldr	r2, [r7, #28]
 80027a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027ac:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80027b0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6818      	ldr	r0, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80027c2:	461a      	mov	r2, r3
 80027c4:	f003 fa4c 	bl	8005c60 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	695a      	ldr	r2, [r3, #20]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80027d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4618      	mov	r0, r3
 80027de:	f003 f979 	bl	8005ad4 <USB_ReadInterrupts>
 80027e2:	4603      	mov	r3, r0
 80027e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027ec:	d124      	bne.n	8002838 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f003 fa10 	bl	8005c18 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f002 f9b8 	bl	8004b72 <USB_GetDevSpeed>
 8002802:	4603      	mov	r3, r0
 8002804:	461a      	mov	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681c      	ldr	r4, [r3, #0]
 800280e:	f001 fa71 	bl	8003cf4 <HAL_RCC_GetHCLKFreq>
 8002812:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002818:	b2db      	uxtb	r3, r3
 800281a:	461a      	mov	r2, r3
 800281c:	4620      	mov	r0, r4
 800281e:	f001 febd 	bl	800459c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f005 fd07 	bl	8008236 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	695a      	ldr	r2, [r3, #20]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002836:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4618      	mov	r0, r3
 800283e:	f003 f949 	bl	8005ad4 <USB_ReadInterrupts>
 8002842:	4603      	mov	r3, r0
 8002844:	f003 0308 	and.w	r3, r3, #8
 8002848:	2b08      	cmp	r3, #8
 800284a:	d10a      	bne.n	8002862 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f005 fce4 	bl	800821a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	695a      	ldr	r2, [r3, #20]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f002 0208 	and.w	r2, r2, #8
 8002860:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f003 f934 	bl	8005ad4 <USB_ReadInterrupts>
 800286c:	4603      	mov	r3, r0
 800286e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002872:	2b80      	cmp	r3, #128	@ 0x80
 8002874:	d122      	bne.n	80028bc <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002876:	6a3b      	ldr	r3, [r7, #32]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800287e:	6a3b      	ldr	r3, [r7, #32]
 8002880:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002882:	2301      	movs	r3, #1
 8002884:	627b      	str	r3, [r7, #36]	@ 0x24
 8002886:	e014      	b.n	80028b2 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800288c:	4613      	mov	r3, r2
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	4413      	add	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d105      	bne.n	80028ac <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80028a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	4619      	mov	r1, r3
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 fb27 	bl	8002efa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ae:	3301      	adds	r3, #1
 80028b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d3e5      	bcc.n	8002888 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f003 f907 	bl	8005ad4 <USB_ReadInterrupts>
 80028c6:	4603      	mov	r3, r0
 80028c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80028d0:	d13b      	bne.n	800294a <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028d2:	2301      	movs	r3, #1
 80028d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80028d6:	e02b      	b.n	8002930 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80028d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028da:	015a      	lsls	r2, r3, #5
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	4413      	add	r3, r2
 80028e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80028e8:	6879      	ldr	r1, [r7, #4]
 80028ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028ec:	4613      	mov	r3, r2
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	4413      	add	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	440b      	add	r3, r1
 80028f6:	3340      	adds	r3, #64	@ 0x40
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d115      	bne.n	800292a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80028fe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002900:	2b00      	cmp	r3, #0
 8002902:	da12      	bge.n	800292a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002904:	6879      	ldr	r1, [r7, #4]
 8002906:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002908:	4613      	mov	r3, r2
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	4413      	add	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	333f      	adds	r3, #63	@ 0x3f
 8002914:	2201      	movs	r2, #1
 8002916:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291a:	b2db      	uxtb	r3, r3
 800291c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002920:	b2db      	uxtb	r3, r3
 8002922:	4619      	mov	r1, r3
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 fae8 	bl	8002efa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800292a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292c:	3301      	adds	r3, #1
 800292e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002936:	429a      	cmp	r2, r3
 8002938:	d3ce      	bcc.n	80028d8 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	695a      	ldr	r2, [r3, #20]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002948:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f003 f8c0 	bl	8005ad4 <USB_ReadInterrupts>
 8002954:	4603      	mov	r3, r0
 8002956:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800295a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800295e:	d155      	bne.n	8002a0c <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002960:	2301      	movs	r3, #1
 8002962:	627b      	str	r3, [r7, #36]	@ 0x24
 8002964:	e045      	b.n	80029f2 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002968:	015a      	lsls	r2, r3, #5
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	4413      	add	r3, r2
 800296e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002976:	6879      	ldr	r1, [r7, #4]
 8002978:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800297a:	4613      	mov	r3, r2
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	4413      	add	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	440b      	add	r3, r1
 8002984:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d12e      	bne.n	80029ec <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800298e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002990:	2b00      	cmp	r3, #0
 8002992:	da2b      	bge.n	80029ec <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 80029a0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d121      	bne.n	80029ec <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029ac:	4613      	mov	r3, r2
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	4413      	add	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 80029ba:	2201      	movs	r2, #1
 80029bc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80029be:	6a3b      	ldr	r3, [r7, #32]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80029c6:	6a3b      	ldr	r3, [r7, #32]
 80029c8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80029ca:	6a3b      	ldr	r3, [r7, #32]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10a      	bne.n	80029ec <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	69fa      	ldr	r2, [r7, #28]
 80029e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80029e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029e8:	6053      	str	r3, [r2, #4]
            break;
 80029ea:	e007      	b.n	80029fc <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ee:	3301      	adds	r3, #1
 80029f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d3b4      	bcc.n	8002966 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	695a      	ldr	r2, [r3, #20]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002a0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f003 f85f 	bl	8005ad4 <USB_ReadInterrupts>
 8002a16:	4603      	mov	r3, r0
 8002a18:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a20:	d10a      	bne.n	8002a38 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f005 fc88 	bl	8008338 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	695a      	ldr	r2, [r3, #20]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002a36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f003 f849 	bl	8005ad4 <USB_ReadInterrupts>
 8002a42:	4603      	mov	r3, r0
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b04      	cmp	r3, #4
 8002a4a:	d115      	bne.n	8002a78 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	f003 0304 	and.w	r3, r3, #4
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d002      	beq.n	8002a64 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f005 fc78 	bl	8008354 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6859      	ldr	r1, [r3, #4]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	430a      	orrs	r2, r1
 8002a72:	605a      	str	r2, [r3, #4]
 8002a74:	e000      	b.n	8002a78 <HAL_PCD_IRQHandler+0x992>
      return;
 8002a76:	bf00      	nop
    }
  }
}
 8002a78:	3734      	adds	r7, #52	@ 0x34
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd90      	pop	{r4, r7, pc}

08002a7e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b082      	sub	sp, #8
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
 8002a86:	460b      	mov	r3, r1
 8002a88:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d101      	bne.n	8002a98 <HAL_PCD_SetAddress+0x1a>
 8002a94:	2302      	movs	r3, #2
 8002a96:	e013      	b.n	8002ac0 <HAL_PCD_SetAddress+0x42>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	78fa      	ldrb	r2, [r7, #3]
 8002aa4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	78fa      	ldrb	r2, [r7, #3]
 8002aae:	4611      	mov	r1, r2
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f002 ffa7 	bl	8005a04 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	4608      	mov	r0, r1
 8002ad2:	4611      	mov	r1, r2
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	70fb      	strb	r3, [r7, #3]
 8002ada:	460b      	mov	r3, r1
 8002adc:	803b      	strh	r3, [r7, #0]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ae6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	da0f      	bge.n	8002b0e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002aee:	78fb      	ldrb	r3, [r7, #3]
 8002af0:	f003 020f 	and.w	r2, r3, #15
 8002af4:	4613      	mov	r3, r2
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	4413      	add	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	3338      	adds	r3, #56	@ 0x38
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	4413      	add	r3, r2
 8002b02:	3304      	adds	r3, #4
 8002b04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	705a      	strb	r2, [r3, #1]
 8002b0c:	e00f      	b.n	8002b2e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b0e:	78fb      	ldrb	r3, [r7, #3]
 8002b10:	f003 020f 	and.w	r2, r3, #15
 8002b14:	4613      	mov	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4413      	add	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	4413      	add	r3, r2
 8002b24:	3304      	adds	r3, #4
 8002b26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002b2e:	78fb      	ldrb	r3, [r7, #3]
 8002b30:	f003 030f 	and.w	r3, r3, #15
 8002b34:	b2da      	uxtb	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002b3a:	883a      	ldrh	r2, [r7, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	78ba      	ldrb	r2, [r7, #2]
 8002b44:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	785b      	ldrb	r3, [r3, #1]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d004      	beq.n	8002b58 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	461a      	mov	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002b58:	78bb      	ldrb	r3, [r7, #2]
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d102      	bne.n	8002b64 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d101      	bne.n	8002b72 <HAL_PCD_EP_Open+0xaa>
 8002b6e:	2302      	movs	r3, #2
 8002b70:	e00e      	b.n	8002b90 <HAL_PCD_EP_Open+0xc8>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68f9      	ldr	r1, [r7, #12]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f002 f81b 	bl	8004bbc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8002b8e:	7afb      	ldrb	r3, [r7, #11]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ba4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	da0f      	bge.n	8002bcc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bac:	78fb      	ldrb	r3, [r7, #3]
 8002bae:	f003 020f 	and.w	r2, r3, #15
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	4413      	add	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	3338      	adds	r3, #56	@ 0x38
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	3304      	adds	r3, #4
 8002bc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	705a      	strb	r2, [r3, #1]
 8002bca:	e00f      	b.n	8002bec <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bcc:	78fb      	ldrb	r3, [r7, #3]
 8002bce:	f003 020f 	and.w	r2, r3, #15
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	4413      	add	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	4413      	add	r3, r2
 8002be2:	3304      	adds	r3, #4
 8002be4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002bec:	78fb      	ldrb	r3, [r7, #3]
 8002bee:	f003 030f 	and.w	r3, r3, #15
 8002bf2:	b2da      	uxtb	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d101      	bne.n	8002c06 <HAL_PCD_EP_Close+0x6e>
 8002c02:	2302      	movs	r3, #2
 8002c04:	e00e      	b.n	8002c24 <HAL_PCD_EP_Close+0x8c>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68f9      	ldr	r1, [r7, #12]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f002 f859 	bl	8004ccc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	607a      	str	r2, [r7, #4]
 8002c36:	603b      	str	r3, [r7, #0]
 8002c38:	460b      	mov	r3, r1
 8002c3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c3c:	7afb      	ldrb	r3, [r7, #11]
 8002c3e:	f003 020f 	and.w	r2, r3, #15
 8002c42:	4613      	mov	r3, r2
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	4413      	add	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	4413      	add	r3, r2
 8002c52:	3304      	adds	r3, #4
 8002c54:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	2200      	movs	r2, #0
 8002c66:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c6e:	7afb      	ldrb	r3, [r7, #11]
 8002c70:	f003 030f 	and.w	r3, r3, #15
 8002c74:	b2da      	uxtb	r2, r3
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d102      	bne.n	8002c88 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c88:	7afb      	ldrb	r3, [r7, #11]
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d109      	bne.n	8002ca6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6818      	ldr	r0, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	6979      	ldr	r1, [r7, #20]
 8002ca0:	f002 fb40 	bl	8005324 <USB_EP0StartXfer>
 8002ca4:	e008      	b.n	8002cb8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6818      	ldr	r0, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	6979      	ldr	r1, [r7, #20]
 8002cb4:	f002 f8e6 	bl	8004e84 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3718      	adds	r7, #24
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
 8002cca:	460b      	mov	r3, r1
 8002ccc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002cce:	78fb      	ldrb	r3, [r7, #3]
 8002cd0:	f003 020f 	and.w	r2, r3, #15
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	4413      	add	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	440b      	add	r3, r1
 8002ce0:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8002ce4:	681b      	ldr	r3, [r3, #0]
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr

08002cf2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b086      	sub	sp, #24
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	60f8      	str	r0, [r7, #12]
 8002cfa:	607a      	str	r2, [r7, #4]
 8002cfc:	603b      	str	r3, [r7, #0]
 8002cfe:	460b      	mov	r3, r1
 8002d00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d02:	7afb      	ldrb	r3, [r7, #11]
 8002d04:	f003 020f 	and.w	r2, r3, #15
 8002d08:	4613      	mov	r3, r2
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	4413      	add	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	3338      	adds	r3, #56	@ 0x38
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	4413      	add	r3, r2
 8002d16:	3304      	adds	r3, #4
 8002d18:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d32:	7afb      	ldrb	r3, [r7, #11]
 8002d34:	f003 030f 	and.w	r3, r3, #15
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d102      	bne.n	8002d4c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d4c:	7afb      	ldrb	r3, [r7, #11]
 8002d4e:	f003 030f 	and.w	r3, r3, #15
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d109      	bne.n	8002d6a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6818      	ldr	r0, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	461a      	mov	r2, r3
 8002d62:	6979      	ldr	r1, [r7, #20]
 8002d64:	f002 fade 	bl	8005324 <USB_EP0StartXfer>
 8002d68:	e008      	b.n	8002d7c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6818      	ldr	r0, [r3, #0]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	461a      	mov	r2, r3
 8002d76:	6979      	ldr	r1, [r7, #20]
 8002d78:	f002 f884 	bl	8004e84 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3718      	adds	r7, #24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b084      	sub	sp, #16
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
 8002d8e:	460b      	mov	r3, r1
 8002d90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d92:	78fb      	ldrb	r3, [r7, #3]
 8002d94:	f003 020f 	and.w	r2, r3, #15
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d901      	bls.n	8002da4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e050      	b.n	8002e46 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002da4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	da0f      	bge.n	8002dcc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dac:	78fb      	ldrb	r3, [r7, #3]
 8002dae:	f003 020f 	and.w	r2, r3, #15
 8002db2:	4613      	mov	r3, r2
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	4413      	add	r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	3338      	adds	r3, #56	@ 0x38
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	705a      	strb	r2, [r3, #1]
 8002dca:	e00d      	b.n	8002de8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002dcc:	78fa      	ldrb	r2, [r7, #3]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	4413      	add	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	4413      	add	r3, r2
 8002dde:	3304      	adds	r3, #4
 8002de0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2201      	movs	r2, #1
 8002dec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dee:	78fb      	ldrb	r3, [r7, #3]
 8002df0:	f003 030f 	and.w	r3, r3, #15
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d101      	bne.n	8002e08 <HAL_PCD_EP_SetStall+0x82>
 8002e04:	2302      	movs	r3, #2
 8002e06:	e01e      	b.n	8002e46 <HAL_PCD_EP_SetStall+0xc0>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68f9      	ldr	r1, [r7, #12]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f002 fd20 	bl	800585c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e1c:	78fb      	ldrb	r3, [r7, #3]
 8002e1e:	f003 030f 	and.w	r3, r3, #15
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10a      	bne.n	8002e3c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6818      	ldr	r0, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	b2d9      	uxtb	r1, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8002e36:	461a      	mov	r2, r3
 8002e38:	f002 ff12 	bl	8005c60 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b084      	sub	sp, #16
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
 8002e56:	460b      	mov	r3, r1
 8002e58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e5a:	78fb      	ldrb	r3, [r7, #3]
 8002e5c:	f003 020f 	and.w	r2, r3, #15
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d901      	bls.n	8002e6c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e042      	b.n	8002ef2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	da0f      	bge.n	8002e94 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e74:	78fb      	ldrb	r3, [r7, #3]
 8002e76:	f003 020f 	and.w	r2, r3, #15
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	4413      	add	r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	3338      	adds	r3, #56	@ 0x38
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	4413      	add	r3, r2
 8002e88:	3304      	adds	r3, #4
 8002e8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	705a      	strb	r2, [r3, #1]
 8002e92:	e00f      	b.n	8002eb4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e94:	78fb      	ldrb	r3, [r7, #3]
 8002e96:	f003 020f 	and.w	r2, r3, #15
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	4413      	add	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	3304      	adds	r3, #4
 8002eac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002eba:	78fb      	ldrb	r3, [r7, #3]
 8002ebc:	f003 030f 	and.w	r3, r3, #15
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d101      	bne.n	8002ed4 <HAL_PCD_EP_ClrStall+0x86>
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	e00e      	b.n	8002ef2 <HAL_PCD_EP_ClrStall+0xa4>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68f9      	ldr	r1, [r7, #12]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f002 fd28 	bl	8005938 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b084      	sub	sp, #16
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
 8002f02:	460b      	mov	r3, r1
 8002f04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002f06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	da0c      	bge.n	8002f28 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f0e:	78fb      	ldrb	r3, [r7, #3]
 8002f10:	f003 020f 	and.w	r2, r3, #15
 8002f14:	4613      	mov	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	4413      	add	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	3338      	adds	r3, #56	@ 0x38
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	4413      	add	r3, r2
 8002f22:	3304      	adds	r3, #4
 8002f24:	60fb      	str	r3, [r7, #12]
 8002f26:	e00c      	b.n	8002f42 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f28:	78fb      	ldrb	r3, [r7, #3]
 8002f2a:	f003 020f 	and.w	r2, r3, #15
 8002f2e:	4613      	mov	r3, r2
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	4413      	add	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	3304      	adds	r3, #4
 8002f40:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68f9      	ldr	r1, [r7, #12]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f002 fb47 	bl	80055dc <USB_EPStopXfer>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002f52:	7afb      	ldrb	r3, [r7, #11]
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3710      	adds	r7, #16
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b08a      	sub	sp, #40	@ 0x28
 8002f60:	af02      	add	r7, sp, #8
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	4613      	mov	r3, r2
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	4413      	add	r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	3338      	adds	r3, #56	@ 0x38
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	4413      	add	r3, r2
 8002f80:	3304      	adds	r3, #4
 8002f82:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6a1a      	ldr	r2, [r3, #32]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d901      	bls.n	8002f94 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e06c      	b.n	800306e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	699a      	ldr	r2, [r3, #24]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	69fa      	ldr	r2, [r7, #28]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d902      	bls.n	8002fb0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	3303      	adds	r3, #3
 8002fb4:	089b      	lsrs	r3, r3, #2
 8002fb6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fb8:	e02b      	b.n	8003012 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	699a      	ldr	r2, [r3, #24]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	69fa      	ldr	r2, [r7, #28]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d902      	bls.n	8002fd6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	3303      	adds	r3, #3
 8002fda:	089b      	lsrs	r3, r3, #2
 8002fdc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6919      	ldr	r1, [r3, #16]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	6978      	ldr	r0, [r7, #20]
 8002ff6:	f002 fb9b 	bl	8005730 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	691a      	ldr	r2, [r3, #16]
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	441a      	add	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6a1a      	ldr	r2, [r3, #32]
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	441a      	add	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	015a      	lsls	r2, r3, #5
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	4413      	add	r3, r2
 800301a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	429a      	cmp	r2, r3
 8003026:	d809      	bhi.n	800303c <PCD_WriteEmptyTxFifo+0xe0>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6a1a      	ldr	r2, [r3, #32]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003030:	429a      	cmp	r2, r3
 8003032:	d203      	bcs.n	800303c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1be      	bne.n	8002fba <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	699a      	ldr	r2, [r3, #24]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	429a      	cmp	r2, r3
 8003046:	d811      	bhi.n	800306c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	f003 030f 	and.w	r3, r3, #15
 800304e:	2201      	movs	r2, #1
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800305c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	43db      	mvns	r3, r3
 8003062:	6939      	ldr	r1, [r7, #16]
 8003064:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003068:	4013      	ands	r3, r2
 800306a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3720      	adds	r7, #32
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
	...

08003078 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b088      	sub	sp, #32
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	333c      	adds	r3, #60	@ 0x3c
 8003090:	3304      	adds	r3, #4
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	015a      	lsls	r2, r3, #5
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	4413      	add	r3, r2
 800309e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d17b      	bne.n	80031a6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	f003 0308 	and.w	r3, r3, #8
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d015      	beq.n	80030e4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	4a61      	ldr	r2, [pc, #388]	@ (8003240 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	f240 80b9 	bls.w	8003234 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 80b3 	beq.w	8003234 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	015a      	lsls	r2, r3, #5
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	4413      	add	r3, r2
 80030d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030da:	461a      	mov	r2, r3
 80030dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030e0:	6093      	str	r3, [r2, #8]
 80030e2:	e0a7      	b.n	8003234 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	f003 0320 	and.w	r3, r3, #32
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d009      	beq.n	8003102 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	015a      	lsls	r2, r3, #5
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	4413      	add	r3, r2
 80030f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030fa:	461a      	mov	r2, r3
 80030fc:	2320      	movs	r3, #32
 80030fe:	6093      	str	r3, [r2, #8]
 8003100:	e098      	b.n	8003234 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003108:	2b00      	cmp	r3, #0
 800310a:	f040 8093 	bne.w	8003234 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	4a4b      	ldr	r2, [pc, #300]	@ (8003240 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d90f      	bls.n	8003136 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00a      	beq.n	8003136 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	015a      	lsls	r2, r3, #5
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	4413      	add	r3, r2
 8003128:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800312c:	461a      	mov	r2, r3
 800312e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003132:	6093      	str	r3, [r2, #8]
 8003134:	e07e      	b.n	8003234 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	4613      	mov	r3, r2
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	4413      	add	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	4413      	add	r3, r2
 8003148:	3304      	adds	r3, #4
 800314a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	69da      	ldr	r2, [r3, #28]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	0159      	lsls	r1, r3, #5
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	440b      	add	r3, r1
 8003158:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003162:	1ad2      	subs	r2, r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d114      	bne.n	8003198 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d109      	bne.n	800318a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6818      	ldr	r0, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003180:	461a      	mov	r2, r3
 8003182:	2101      	movs	r1, #1
 8003184:	f002 fd6c 	bl	8005c60 <USB_EP0_OutStart>
 8003188:	e006      	b.n	8003198 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	691a      	ldr	r2, [r3, #16]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	441a      	add	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	b2db      	uxtb	r3, r3
 800319c:	4619      	mov	r1, r3
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f005 f806 	bl	80081b0 <HAL_PCD_DataOutStageCallback>
 80031a4:	e046      	b.n	8003234 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	4a26      	ldr	r2, [pc, #152]	@ (8003244 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d124      	bne.n	80031f8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00a      	beq.n	80031ce <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	015a      	lsls	r2, r3, #5
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	4413      	add	r3, r2
 80031c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031c4:	461a      	mov	r2, r3
 80031c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031ca:	6093      	str	r3, [r2, #8]
 80031cc:	e032      	b.n	8003234 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	f003 0320 	and.w	r3, r3, #32
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d008      	beq.n	80031ea <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	015a      	lsls	r2, r3, #5
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	4413      	add	r3, r2
 80031e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031e4:	461a      	mov	r2, r3
 80031e6:	2320      	movs	r3, #32
 80031e8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	4619      	mov	r1, r3
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f004 ffdd 	bl	80081b0 <HAL_PCD_DataOutStageCallback>
 80031f6:	e01d      	b.n	8003234 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d114      	bne.n	8003228 <PCD_EP_OutXfrComplete_int+0x1b0>
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	4613      	mov	r3, r2
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	4413      	add	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	440b      	add	r3, r1
 800320c:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d108      	bne.n	8003228 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6818      	ldr	r0, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003220:	461a      	mov	r2, r3
 8003222:	2100      	movs	r1, #0
 8003224:	f002 fd1c 	bl	8005c60 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	b2db      	uxtb	r3, r3
 800322c:	4619      	mov	r1, r3
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f004 ffbe 	bl	80081b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3720      	adds	r7, #32
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	4f54300a 	.word	0x4f54300a
 8003244:	4f54310a 	.word	0x4f54310a

08003248 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	333c      	adds	r3, #60	@ 0x3c
 8003260:	3304      	adds	r3, #4
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	015a      	lsls	r2, r3, #5
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	4413      	add	r3, r2
 800326e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	4a15      	ldr	r2, [pc, #84]	@ (80032d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d90e      	bls.n	800329c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003284:	2b00      	cmp	r3, #0
 8003286:	d009      	beq.n	800329c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	015a      	lsls	r2, r3, #5
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	4413      	add	r3, r2
 8003290:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003294:	461a      	mov	r2, r3
 8003296:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800329a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f004 ff75 	bl	800818c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	4a0a      	ldr	r2, [pc, #40]	@ (80032d0 <PCD_EP_OutSetupPacket_int+0x88>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d90c      	bls.n	80032c4 <PCD_EP_OutSetupPacket_int+0x7c>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d108      	bne.n	80032c4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6818      	ldr	r0, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80032bc:	461a      	mov	r2, r3
 80032be:	2101      	movs	r1, #1
 80032c0:	f002 fcce 	bl	8005c60 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3718      	adds	r7, #24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	4f54300a 	.word	0x4f54300a

080032d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	460b      	mov	r3, r1
 80032de:	70fb      	strb	r3, [r7, #3]
 80032e0:	4613      	mov	r3, r2
 80032e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80032ec:	78fb      	ldrb	r3, [r7, #3]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d107      	bne.n	8003302 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80032f2:	883b      	ldrh	r3, [r7, #0]
 80032f4:	0419      	lsls	r1, r3, #16
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68ba      	ldr	r2, [r7, #8]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	629a      	str	r2, [r3, #40]	@ 0x28
 8003300:	e028      	b.n	8003354 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003308:	0c1b      	lsrs	r3, r3, #16
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	4413      	add	r3, r2
 800330e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003310:	2300      	movs	r3, #0
 8003312:	73fb      	strb	r3, [r7, #15]
 8003314:	e00d      	b.n	8003332 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	7bfb      	ldrb	r3, [r7, #15]
 800331c:	3340      	adds	r3, #64	@ 0x40
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4413      	add	r3, r2
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	0c1b      	lsrs	r3, r3, #16
 8003326:	68ba      	ldr	r2, [r7, #8]
 8003328:	4413      	add	r3, r2
 800332a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800332c:	7bfb      	ldrb	r3, [r7, #15]
 800332e:	3301      	adds	r3, #1
 8003330:	73fb      	strb	r3, [r7, #15]
 8003332:	7bfa      	ldrb	r2, [r7, #15]
 8003334:	78fb      	ldrb	r3, [r7, #3]
 8003336:	3b01      	subs	r3, #1
 8003338:	429a      	cmp	r2, r3
 800333a:	d3ec      	bcc.n	8003316 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800333c:	883b      	ldrh	r3, [r7, #0]
 800333e:	0418      	lsls	r0, r3, #16
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6819      	ldr	r1, [r3, #0]
 8003344:	78fb      	ldrb	r3, [r7, #3]
 8003346:	3b01      	subs	r3, #1
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	4302      	orrs	r2, r0
 800334c:	3340      	adds	r3, #64	@ 0x40
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	440b      	add	r3, r1
 8003352:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr

08003362 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003362:	b480      	push	{r7}
 8003364:	b083      	sub	sp, #12
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
 800336a:	460b      	mov	r3, r1
 800336c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	887a      	ldrh	r2, [r7, #2]
 8003374:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80033b2:	4b05      	ldr	r3, [pc, #20]	@ (80033c8 <HAL_PCDEx_ActivateLPM+0x44>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	10000003 	.word	0x10000003

080033cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80033d4:	2300      	movs	r3, #0
 80033d6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e291      	b.n	8003906 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f000 8087 	beq.w	80034fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033f0:	4b96      	ldr	r3, [pc, #600]	@ (800364c <HAL_RCC_OscConfig+0x280>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f003 030c 	and.w	r3, r3, #12
 80033f8:	2b04      	cmp	r3, #4
 80033fa:	d00c      	beq.n	8003416 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033fc:	4b93      	ldr	r3, [pc, #588]	@ (800364c <HAL_RCC_OscConfig+0x280>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f003 030c 	and.w	r3, r3, #12
 8003404:	2b08      	cmp	r3, #8
 8003406:	d112      	bne.n	800342e <HAL_RCC_OscConfig+0x62>
 8003408:	4b90      	ldr	r3, [pc, #576]	@ (800364c <HAL_RCC_OscConfig+0x280>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003410:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003414:	d10b      	bne.n	800342e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003416:	4b8d      	ldr	r3, [pc, #564]	@ (800364c <HAL_RCC_OscConfig+0x280>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d06c      	beq.n	80034fc <HAL_RCC_OscConfig+0x130>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d168      	bne.n	80034fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e26b      	b.n	8003906 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003436:	d106      	bne.n	8003446 <HAL_RCC_OscConfig+0x7a>
 8003438:	4b84      	ldr	r3, [pc, #528]	@ (800364c <HAL_RCC_OscConfig+0x280>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a83      	ldr	r2, [pc, #524]	@ (800364c <HAL_RCC_OscConfig+0x280>)
 800343e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003442:	6013      	str	r3, [r2, #0]
 8003444:	e02e      	b.n	80034a4 <HAL_RCC_OscConfig+0xd8>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10c      	bne.n	8003468 <HAL_RCC_OscConfig+0x9c>
 800344e:	4b7f      	ldr	r3, [pc, #508]	@ (800364c <HAL_RCC_OscConfig+0x280>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a7e      	ldr	r2, [pc, #504]	@ (800364c <HAL_RCC_OscConfig+0x280>)
 8003454:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003458:	6013      	str	r3, [r2, #0]
 800345a:	4b7c      	ldr	r3, [pc, #496]	@ (800364c <HAL_RCC_OscConfig+0x280>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a7b      	ldr	r2, [pc, #492]	@ (800364c <HAL_RCC_OscConfig+0x280>)
 8003460:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003464:	6013      	str	r3, [r2, #0]
 8003466:	e01d      	b.n	80034a4 <HAL_RCC_OscConfig+0xd8>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003470:	d10c      	bne.n	800348c <HAL_RCC_OscConfig+0xc0>
 8003472:	4b76      	ldr	r3, [pc, #472]	@ (800364c <HAL_RCC_OscConfig+0x280>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a75      	ldr	r2, [pc, #468]	@ (800364c <HAL_RCC_OscConfig+0x280>)
 8003478:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800347c:	6013      	str	r3, [r2, #0]
 800347e:	4b73      	ldr	r3, [pc, #460]	@ (800364c <HAL_RCC_OscConfig+0x280>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a72      	ldr	r2, [pc, #456]	@ (800364c <HAL_RCC_OscConfig+0x280>)
 8003484:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003488:	6013      	str	r3, [r2, #0]
 800348a:	e00b      	b.n	80034a4 <HAL_RCC_OscConfig+0xd8>
 800348c:	4b6f      	ldr	r3, [pc, #444]	@ (800364c <HAL_RCC_OscConfig+0x280>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a6e      	ldr	r2, [pc, #440]	@ (800364c <HAL_RCC_OscConfig+0x280>)
 8003492:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003496:	6013      	str	r3, [r2, #0]
 8003498:	4b6c      	ldr	r3, [pc, #432]	@ (800364c <HAL_RCC_OscConfig+0x280>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a6b      	ldr	r2, [pc, #428]	@ (800364c <HAL_RCC_OscConfig+0x280>)
 800349e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d013      	beq.n	80034d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ac:	f7fd fb5c 	bl	8000b68 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034b4:	f7fd fb58 	bl	8000b68 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b64      	cmp	r3, #100	@ 0x64
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e21f      	b.n	8003906 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034c6:	4b61      	ldr	r3, [pc, #388]	@ (800364c <HAL_RCC_OscConfig+0x280>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0f0      	beq.n	80034b4 <HAL_RCC_OscConfig+0xe8>
 80034d2:	e014      	b.n	80034fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d4:	f7fd fb48 	bl	8000b68 <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034da:	e008      	b.n	80034ee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034dc:	f7fd fb44 	bl	8000b68 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b64      	cmp	r3, #100	@ 0x64
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e20b      	b.n	8003906 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ee:	4b57      	ldr	r3, [pc, #348]	@ (800364c <HAL_RCC_OscConfig+0x280>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1f0      	bne.n	80034dc <HAL_RCC_OscConfig+0x110>
 80034fa:	e000      	b.n	80034fe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d069      	beq.n	80035de <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800350a:	4b50      	ldr	r3, [pc, #320]	@ (800364c <HAL_RCC_OscConfig+0x280>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f003 030c 	and.w	r3, r3, #12
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00b      	beq.n	800352e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003516:	4b4d      	ldr	r3, [pc, #308]	@ (800364c <HAL_RCC_OscConfig+0x280>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 030c 	and.w	r3, r3, #12
 800351e:	2b08      	cmp	r3, #8
 8003520:	d11c      	bne.n	800355c <HAL_RCC_OscConfig+0x190>
 8003522:	4b4a      	ldr	r3, [pc, #296]	@ (800364c <HAL_RCC_OscConfig+0x280>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d116      	bne.n	800355c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800352e:	4b47      	ldr	r3, [pc, #284]	@ (800364c <HAL_RCC_OscConfig+0x280>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d005      	beq.n	8003546 <HAL_RCC_OscConfig+0x17a>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d001      	beq.n	8003546 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e1df      	b.n	8003906 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003546:	4b41      	ldr	r3, [pc, #260]	@ (800364c <HAL_RCC_OscConfig+0x280>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	493d      	ldr	r1, [pc, #244]	@ (800364c <HAL_RCC_OscConfig+0x280>)
 8003556:	4313      	orrs	r3, r2
 8003558:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800355a:	e040      	b.n	80035de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d023      	beq.n	80035ac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003564:	4b39      	ldr	r3, [pc, #228]	@ (800364c <HAL_RCC_OscConfig+0x280>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a38      	ldr	r2, [pc, #224]	@ (800364c <HAL_RCC_OscConfig+0x280>)
 800356a:	f043 0301 	orr.w	r3, r3, #1
 800356e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003570:	f7fd fafa 	bl	8000b68 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003578:	f7fd faf6 	bl	8000b68 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e1bd      	b.n	8003906 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800358a:	4b30      	ldr	r3, [pc, #192]	@ (800364c <HAL_RCC_OscConfig+0x280>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d0f0      	beq.n	8003578 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003596:	4b2d      	ldr	r3, [pc, #180]	@ (800364c <HAL_RCC_OscConfig+0x280>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	4929      	ldr	r1, [pc, #164]	@ (800364c <HAL_RCC_OscConfig+0x280>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	600b      	str	r3, [r1, #0]
 80035aa:	e018      	b.n	80035de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035ac:	4b27      	ldr	r3, [pc, #156]	@ (800364c <HAL_RCC_OscConfig+0x280>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a26      	ldr	r2, [pc, #152]	@ (800364c <HAL_RCC_OscConfig+0x280>)
 80035b2:	f023 0301 	bic.w	r3, r3, #1
 80035b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b8:	f7fd fad6 	bl	8000b68 <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035c0:	f7fd fad2 	bl	8000b68 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e199      	b.n	8003906 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035d2:	4b1e      	ldr	r3, [pc, #120]	@ (800364c <HAL_RCC_OscConfig+0x280>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1f0      	bne.n	80035c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0308 	and.w	r3, r3, #8
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d038      	beq.n	800365c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d019      	beq.n	8003626 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035f2:	4b16      	ldr	r3, [pc, #88]	@ (800364c <HAL_RCC_OscConfig+0x280>)
 80035f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035f6:	4a15      	ldr	r2, [pc, #84]	@ (800364c <HAL_RCC_OscConfig+0x280>)
 80035f8:	f043 0301 	orr.w	r3, r3, #1
 80035fc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035fe:	f7fd fab3 	bl	8000b68 <HAL_GetTick>
 8003602:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003604:	e008      	b.n	8003618 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003606:	f7fd faaf 	bl	8000b68 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e176      	b.n	8003906 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003618:	4b0c      	ldr	r3, [pc, #48]	@ (800364c <HAL_RCC_OscConfig+0x280>)
 800361a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d0f0      	beq.n	8003606 <HAL_RCC_OscConfig+0x23a>
 8003624:	e01a      	b.n	800365c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003626:	4b09      	ldr	r3, [pc, #36]	@ (800364c <HAL_RCC_OscConfig+0x280>)
 8003628:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800362a:	4a08      	ldr	r2, [pc, #32]	@ (800364c <HAL_RCC_OscConfig+0x280>)
 800362c:	f023 0301 	bic.w	r3, r3, #1
 8003630:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003632:	f7fd fa99 	bl	8000b68 <HAL_GetTick>
 8003636:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003638:	e00a      	b.n	8003650 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800363a:	f7fd fa95 	bl	8000b68 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b02      	cmp	r3, #2
 8003646:	d903      	bls.n	8003650 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e15c      	b.n	8003906 <HAL_RCC_OscConfig+0x53a>
 800364c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003650:	4b91      	ldr	r3, [pc, #580]	@ (8003898 <HAL_RCC_OscConfig+0x4cc>)
 8003652:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1ee      	bne.n	800363a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 80a4 	beq.w	80037b2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800366a:	4b8b      	ldr	r3, [pc, #556]	@ (8003898 <HAL_RCC_OscConfig+0x4cc>)
 800366c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800366e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10d      	bne.n	8003692 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003676:	4b88      	ldr	r3, [pc, #544]	@ (8003898 <HAL_RCC_OscConfig+0x4cc>)
 8003678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367a:	4a87      	ldr	r2, [pc, #540]	@ (8003898 <HAL_RCC_OscConfig+0x4cc>)
 800367c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003680:	6413      	str	r3, [r2, #64]	@ 0x40
 8003682:	4b85      	ldr	r3, [pc, #532]	@ (8003898 <HAL_RCC_OscConfig+0x4cc>)
 8003684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003686:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800368a:	60bb      	str	r3, [r7, #8]
 800368c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800368e:	2301      	movs	r3, #1
 8003690:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003692:	4b82      	ldr	r3, [pc, #520]	@ (800389c <HAL_RCC_OscConfig+0x4d0>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800369a:	2b00      	cmp	r3, #0
 800369c:	d118      	bne.n	80036d0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800369e:	4b7f      	ldr	r3, [pc, #508]	@ (800389c <HAL_RCC_OscConfig+0x4d0>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a7e      	ldr	r2, [pc, #504]	@ (800389c <HAL_RCC_OscConfig+0x4d0>)
 80036a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036aa:	f7fd fa5d 	bl	8000b68 <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036b0:	e008      	b.n	80036c4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036b2:	f7fd fa59 	bl	8000b68 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b64      	cmp	r3, #100	@ 0x64
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e120      	b.n	8003906 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036c4:	4b75      	ldr	r3, [pc, #468]	@ (800389c <HAL_RCC_OscConfig+0x4d0>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d0f0      	beq.n	80036b2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d106      	bne.n	80036e6 <HAL_RCC_OscConfig+0x31a>
 80036d8:	4b6f      	ldr	r3, [pc, #444]	@ (8003898 <HAL_RCC_OscConfig+0x4cc>)
 80036da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036dc:	4a6e      	ldr	r2, [pc, #440]	@ (8003898 <HAL_RCC_OscConfig+0x4cc>)
 80036de:	f043 0301 	orr.w	r3, r3, #1
 80036e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80036e4:	e02d      	b.n	8003742 <HAL_RCC_OscConfig+0x376>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10c      	bne.n	8003708 <HAL_RCC_OscConfig+0x33c>
 80036ee:	4b6a      	ldr	r3, [pc, #424]	@ (8003898 <HAL_RCC_OscConfig+0x4cc>)
 80036f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036f2:	4a69      	ldr	r2, [pc, #420]	@ (8003898 <HAL_RCC_OscConfig+0x4cc>)
 80036f4:	f023 0301 	bic.w	r3, r3, #1
 80036f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80036fa:	4b67      	ldr	r3, [pc, #412]	@ (8003898 <HAL_RCC_OscConfig+0x4cc>)
 80036fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036fe:	4a66      	ldr	r2, [pc, #408]	@ (8003898 <HAL_RCC_OscConfig+0x4cc>)
 8003700:	f023 0304 	bic.w	r3, r3, #4
 8003704:	6713      	str	r3, [r2, #112]	@ 0x70
 8003706:	e01c      	b.n	8003742 <HAL_RCC_OscConfig+0x376>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	2b05      	cmp	r3, #5
 800370e:	d10c      	bne.n	800372a <HAL_RCC_OscConfig+0x35e>
 8003710:	4b61      	ldr	r3, [pc, #388]	@ (8003898 <HAL_RCC_OscConfig+0x4cc>)
 8003712:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003714:	4a60      	ldr	r2, [pc, #384]	@ (8003898 <HAL_RCC_OscConfig+0x4cc>)
 8003716:	f043 0304 	orr.w	r3, r3, #4
 800371a:	6713      	str	r3, [r2, #112]	@ 0x70
 800371c:	4b5e      	ldr	r3, [pc, #376]	@ (8003898 <HAL_RCC_OscConfig+0x4cc>)
 800371e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003720:	4a5d      	ldr	r2, [pc, #372]	@ (8003898 <HAL_RCC_OscConfig+0x4cc>)
 8003722:	f043 0301 	orr.w	r3, r3, #1
 8003726:	6713      	str	r3, [r2, #112]	@ 0x70
 8003728:	e00b      	b.n	8003742 <HAL_RCC_OscConfig+0x376>
 800372a:	4b5b      	ldr	r3, [pc, #364]	@ (8003898 <HAL_RCC_OscConfig+0x4cc>)
 800372c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800372e:	4a5a      	ldr	r2, [pc, #360]	@ (8003898 <HAL_RCC_OscConfig+0x4cc>)
 8003730:	f023 0301 	bic.w	r3, r3, #1
 8003734:	6713      	str	r3, [r2, #112]	@ 0x70
 8003736:	4b58      	ldr	r3, [pc, #352]	@ (8003898 <HAL_RCC_OscConfig+0x4cc>)
 8003738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800373a:	4a57      	ldr	r2, [pc, #348]	@ (8003898 <HAL_RCC_OscConfig+0x4cc>)
 800373c:	f023 0304 	bic.w	r3, r3, #4
 8003740:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d015      	beq.n	8003776 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800374a:	f7fd fa0d 	bl	8000b68 <HAL_GetTick>
 800374e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003750:	e00a      	b.n	8003768 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003752:	f7fd fa09 	bl	8000b68 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003760:	4293      	cmp	r3, r2
 8003762:	d901      	bls.n	8003768 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e0ce      	b.n	8003906 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003768:	4b4b      	ldr	r3, [pc, #300]	@ (8003898 <HAL_RCC_OscConfig+0x4cc>)
 800376a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d0ee      	beq.n	8003752 <HAL_RCC_OscConfig+0x386>
 8003774:	e014      	b.n	80037a0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003776:	f7fd f9f7 	bl	8000b68 <HAL_GetTick>
 800377a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800377c:	e00a      	b.n	8003794 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800377e:	f7fd f9f3 	bl	8000b68 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	f241 3288 	movw	r2, #5000	@ 0x1388
 800378c:	4293      	cmp	r3, r2
 800378e:	d901      	bls.n	8003794 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e0b8      	b.n	8003906 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003794:	4b40      	ldr	r3, [pc, #256]	@ (8003898 <HAL_RCC_OscConfig+0x4cc>)
 8003796:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1ee      	bne.n	800377e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037a0:	7dfb      	ldrb	r3, [r7, #23]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d105      	bne.n	80037b2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037a6:	4b3c      	ldr	r3, [pc, #240]	@ (8003898 <HAL_RCC_OscConfig+0x4cc>)
 80037a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037aa:	4a3b      	ldr	r2, [pc, #236]	@ (8003898 <HAL_RCC_OscConfig+0x4cc>)
 80037ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037b0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f000 80a4 	beq.w	8003904 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037bc:	4b36      	ldr	r3, [pc, #216]	@ (8003898 <HAL_RCC_OscConfig+0x4cc>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f003 030c 	and.w	r3, r3, #12
 80037c4:	2b08      	cmp	r3, #8
 80037c6:	d06b      	beq.n	80038a0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d149      	bne.n	8003864 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037d0:	4b31      	ldr	r3, [pc, #196]	@ (8003898 <HAL_RCC_OscConfig+0x4cc>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a30      	ldr	r2, [pc, #192]	@ (8003898 <HAL_RCC_OscConfig+0x4cc>)
 80037d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037dc:	f7fd f9c4 	bl	8000b68 <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e4:	f7fd f9c0 	bl	8000b68 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e087      	b.n	8003906 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037f6:	4b28      	ldr	r3, [pc, #160]	@ (8003898 <HAL_RCC_OscConfig+0x4cc>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1f0      	bne.n	80037e4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	69da      	ldr	r2, [r3, #28]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	431a      	orrs	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003810:	019b      	lsls	r3, r3, #6
 8003812:	431a      	orrs	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003818:	085b      	lsrs	r3, r3, #1
 800381a:	3b01      	subs	r3, #1
 800381c:	041b      	lsls	r3, r3, #16
 800381e:	431a      	orrs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003824:	061b      	lsls	r3, r3, #24
 8003826:	4313      	orrs	r3, r2
 8003828:	4a1b      	ldr	r2, [pc, #108]	@ (8003898 <HAL_RCC_OscConfig+0x4cc>)
 800382a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800382e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003830:	4b19      	ldr	r3, [pc, #100]	@ (8003898 <HAL_RCC_OscConfig+0x4cc>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a18      	ldr	r2, [pc, #96]	@ (8003898 <HAL_RCC_OscConfig+0x4cc>)
 8003836:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800383a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383c:	f7fd f994 	bl	8000b68 <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003844:	f7fd f990 	bl	8000b68 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e057      	b.n	8003906 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003856:	4b10      	ldr	r3, [pc, #64]	@ (8003898 <HAL_RCC_OscConfig+0x4cc>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0f0      	beq.n	8003844 <HAL_RCC_OscConfig+0x478>
 8003862:	e04f      	b.n	8003904 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003864:	4b0c      	ldr	r3, [pc, #48]	@ (8003898 <HAL_RCC_OscConfig+0x4cc>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a0b      	ldr	r2, [pc, #44]	@ (8003898 <HAL_RCC_OscConfig+0x4cc>)
 800386a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800386e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003870:	f7fd f97a 	bl	8000b68 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003878:	f7fd f976 	bl	8000b68 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e03d      	b.n	8003906 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800388a:	4b03      	ldr	r3, [pc, #12]	@ (8003898 <HAL_RCC_OscConfig+0x4cc>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1f0      	bne.n	8003878 <HAL_RCC_OscConfig+0x4ac>
 8003896:	e035      	b.n	8003904 <HAL_RCC_OscConfig+0x538>
 8003898:	40023800 	.word	0x40023800
 800389c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80038a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003910 <HAL_RCC_OscConfig+0x544>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d028      	beq.n	8003900 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d121      	bne.n	8003900 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d11a      	bne.n	8003900 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80038d0:	4013      	ands	r3, r2
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80038d6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038d8:	4293      	cmp	r3, r2
 80038da:	d111      	bne.n	8003900 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038e6:	085b      	lsrs	r3, r3, #1
 80038e8:	3b01      	subs	r3, #1
 80038ea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d107      	bne.n	8003900 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038fa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d001      	beq.n	8003904 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e000      	b.n	8003906 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3718      	adds	r7, #24
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	40023800 	.word	0x40023800

08003914 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800391e:	2300      	movs	r3, #0
 8003920:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d101      	bne.n	800392c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e0d0      	b.n	8003ace <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800392c:	4b6a      	ldr	r3, [pc, #424]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1c4>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 030f 	and.w	r3, r3, #15
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	429a      	cmp	r2, r3
 8003938:	d910      	bls.n	800395c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800393a:	4b67      	ldr	r3, [pc, #412]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1c4>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f023 020f 	bic.w	r2, r3, #15
 8003942:	4965      	ldr	r1, [pc, #404]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	4313      	orrs	r3, r2
 8003948:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800394a:	4b63      	ldr	r3, [pc, #396]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1c4>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	429a      	cmp	r2, r3
 8003956:	d001      	beq.n	800395c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e0b8      	b.n	8003ace <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d020      	beq.n	80039aa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0304 	and.w	r3, r3, #4
 8003970:	2b00      	cmp	r3, #0
 8003972:	d005      	beq.n	8003980 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003974:	4b59      	ldr	r3, [pc, #356]	@ (8003adc <HAL_RCC_ClockConfig+0x1c8>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	4a58      	ldr	r2, [pc, #352]	@ (8003adc <HAL_RCC_ClockConfig+0x1c8>)
 800397a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800397e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0308 	and.w	r3, r3, #8
 8003988:	2b00      	cmp	r3, #0
 800398a:	d005      	beq.n	8003998 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800398c:	4b53      	ldr	r3, [pc, #332]	@ (8003adc <HAL_RCC_ClockConfig+0x1c8>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	4a52      	ldr	r2, [pc, #328]	@ (8003adc <HAL_RCC_ClockConfig+0x1c8>)
 8003992:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003996:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003998:	4b50      	ldr	r3, [pc, #320]	@ (8003adc <HAL_RCC_ClockConfig+0x1c8>)
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	494d      	ldr	r1, [pc, #308]	@ (8003adc <HAL_RCC_ClockConfig+0x1c8>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d040      	beq.n	8003a38 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d107      	bne.n	80039ce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039be:	4b47      	ldr	r3, [pc, #284]	@ (8003adc <HAL_RCC_ClockConfig+0x1c8>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d115      	bne.n	80039f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e07f      	b.n	8003ace <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d107      	bne.n	80039e6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039d6:	4b41      	ldr	r3, [pc, #260]	@ (8003adc <HAL_RCC_ClockConfig+0x1c8>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d109      	bne.n	80039f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e073      	b.n	8003ace <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e6:	4b3d      	ldr	r3, [pc, #244]	@ (8003adc <HAL_RCC_ClockConfig+0x1c8>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e06b      	b.n	8003ace <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039f6:	4b39      	ldr	r3, [pc, #228]	@ (8003adc <HAL_RCC_ClockConfig+0x1c8>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f023 0203 	bic.w	r2, r3, #3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	4936      	ldr	r1, [pc, #216]	@ (8003adc <HAL_RCC_ClockConfig+0x1c8>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a08:	f7fd f8ae 	bl	8000b68 <HAL_GetTick>
 8003a0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a0e:	e00a      	b.n	8003a26 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a10:	f7fd f8aa 	bl	8000b68 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e053      	b.n	8003ace <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a26:	4b2d      	ldr	r3, [pc, #180]	@ (8003adc <HAL_RCC_ClockConfig+0x1c8>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f003 020c 	and.w	r2, r3, #12
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d1eb      	bne.n	8003a10 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a38:	4b27      	ldr	r3, [pc, #156]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 030f 	and.w	r3, r3, #15
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d210      	bcs.n	8003a68 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a46:	4b24      	ldr	r3, [pc, #144]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f023 020f 	bic.w	r2, r3, #15
 8003a4e:	4922      	ldr	r1, [pc, #136]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a56:	4b20      	ldr	r3, [pc, #128]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 030f 	and.w	r3, r3, #15
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d001      	beq.n	8003a68 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e032      	b.n	8003ace <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d008      	beq.n	8003a86 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a74:	4b19      	ldr	r3, [pc, #100]	@ (8003adc <HAL_RCC_ClockConfig+0x1c8>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	4916      	ldr	r1, [pc, #88]	@ (8003adc <HAL_RCC_ClockConfig+0x1c8>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0308 	and.w	r3, r3, #8
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d009      	beq.n	8003aa6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a92:	4b12      	ldr	r3, [pc, #72]	@ (8003adc <HAL_RCC_ClockConfig+0x1c8>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	490e      	ldr	r1, [pc, #56]	@ (8003adc <HAL_RCC_ClockConfig+0x1c8>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003aa6:	f000 f821 	bl	8003aec <HAL_RCC_GetSysClockFreq>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	4b0b      	ldr	r3, [pc, #44]	@ (8003adc <HAL_RCC_ClockConfig+0x1c8>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	091b      	lsrs	r3, r3, #4
 8003ab2:	f003 030f 	and.w	r3, r3, #15
 8003ab6:	490a      	ldr	r1, [pc, #40]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1cc>)
 8003ab8:	5ccb      	ldrb	r3, [r1, r3]
 8003aba:	fa22 f303 	lsr.w	r3, r2, r3
 8003abe:	4a09      	ldr	r2, [pc, #36]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1d0>)
 8003ac0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ac2:	4b09      	ldr	r3, [pc, #36]	@ (8003ae8 <HAL_RCC_ClockConfig+0x1d4>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7fd f80a 	bl	8000ae0 <HAL_InitTick>

  return HAL_OK;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	40023c00 	.word	0x40023c00
 8003adc:	40023800 	.word	0x40023800
 8003ae0:	08008a88 	.word	0x08008a88
 8003ae4:	20000000 	.word	0x20000000
 8003ae8:	20000004 	.word	0x20000004

08003aec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003aec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003af0:	b094      	sub	sp, #80	@ 0x50
 8003af2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003af4:	2300      	movs	r3, #0
 8003af6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003af8:	2300      	movs	r3, #0
 8003afa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003afc:	2300      	movs	r3, #0
 8003afe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003b00:	2300      	movs	r3, #0
 8003b02:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b04:	4b79      	ldr	r3, [pc, #484]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x200>)
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f003 030c 	and.w	r3, r3, #12
 8003b0c:	2b08      	cmp	r3, #8
 8003b0e:	d00d      	beq.n	8003b2c <HAL_RCC_GetSysClockFreq+0x40>
 8003b10:	2b08      	cmp	r3, #8
 8003b12:	f200 80e1 	bhi.w	8003cd8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d002      	beq.n	8003b20 <HAL_RCC_GetSysClockFreq+0x34>
 8003b1a:	2b04      	cmp	r3, #4
 8003b1c:	d003      	beq.n	8003b26 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b1e:	e0db      	b.n	8003cd8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b20:	4b73      	ldr	r3, [pc, #460]	@ (8003cf0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b22:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b24:	e0db      	b.n	8003cde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b26:	4b72      	ldr	r3, [pc, #456]	@ (8003cf0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b28:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b2a:	e0d8      	b.n	8003cde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b2c:	4b6f      	ldr	r3, [pc, #444]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x200>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b34:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003b36:	4b6d      	ldr	r3, [pc, #436]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x200>)
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d063      	beq.n	8003c0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b42:	4b6a      	ldr	r3, [pc, #424]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x200>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	099b      	lsrs	r3, r3, #6
 8003b48:	2200      	movs	r2, #0
 8003b4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b4c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b54:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b56:	2300      	movs	r3, #0
 8003b58:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003b5e:	4622      	mov	r2, r4
 8003b60:	462b      	mov	r3, r5
 8003b62:	f04f 0000 	mov.w	r0, #0
 8003b66:	f04f 0100 	mov.w	r1, #0
 8003b6a:	0159      	lsls	r1, r3, #5
 8003b6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b70:	0150      	lsls	r0, r2, #5
 8003b72:	4602      	mov	r2, r0
 8003b74:	460b      	mov	r3, r1
 8003b76:	4621      	mov	r1, r4
 8003b78:	1a51      	subs	r1, r2, r1
 8003b7a:	6139      	str	r1, [r7, #16]
 8003b7c:	4629      	mov	r1, r5
 8003b7e:	eb63 0301 	sbc.w	r3, r3, r1
 8003b82:	617b      	str	r3, [r7, #20]
 8003b84:	f04f 0200 	mov.w	r2, #0
 8003b88:	f04f 0300 	mov.w	r3, #0
 8003b8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b90:	4659      	mov	r1, fp
 8003b92:	018b      	lsls	r3, r1, #6
 8003b94:	4651      	mov	r1, sl
 8003b96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b9a:	4651      	mov	r1, sl
 8003b9c:	018a      	lsls	r2, r1, #6
 8003b9e:	4651      	mov	r1, sl
 8003ba0:	ebb2 0801 	subs.w	r8, r2, r1
 8003ba4:	4659      	mov	r1, fp
 8003ba6:	eb63 0901 	sbc.w	r9, r3, r1
 8003baa:	f04f 0200 	mov.w	r2, #0
 8003bae:	f04f 0300 	mov.w	r3, #0
 8003bb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bbe:	4690      	mov	r8, r2
 8003bc0:	4699      	mov	r9, r3
 8003bc2:	4623      	mov	r3, r4
 8003bc4:	eb18 0303 	adds.w	r3, r8, r3
 8003bc8:	60bb      	str	r3, [r7, #8]
 8003bca:	462b      	mov	r3, r5
 8003bcc:	eb49 0303 	adc.w	r3, r9, r3
 8003bd0:	60fb      	str	r3, [r7, #12]
 8003bd2:	f04f 0200 	mov.w	r2, #0
 8003bd6:	f04f 0300 	mov.w	r3, #0
 8003bda:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003bde:	4629      	mov	r1, r5
 8003be0:	028b      	lsls	r3, r1, #10
 8003be2:	4621      	mov	r1, r4
 8003be4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003be8:	4621      	mov	r1, r4
 8003bea:	028a      	lsls	r2, r1, #10
 8003bec:	4610      	mov	r0, r2
 8003bee:	4619      	mov	r1, r3
 8003bf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bf6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bf8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003bfc:	f7fc fb04 	bl	8000208 <__aeabi_uldivmod>
 8003c00:	4602      	mov	r2, r0
 8003c02:	460b      	mov	r3, r1
 8003c04:	4613      	mov	r3, r2
 8003c06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c08:	e058      	b.n	8003cbc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c0a:	4b38      	ldr	r3, [pc, #224]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x200>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	099b      	lsrs	r3, r3, #6
 8003c10:	2200      	movs	r2, #0
 8003c12:	4618      	mov	r0, r3
 8003c14:	4611      	mov	r1, r2
 8003c16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c1a:	623b      	str	r3, [r7, #32]
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c24:	4642      	mov	r2, r8
 8003c26:	464b      	mov	r3, r9
 8003c28:	f04f 0000 	mov.w	r0, #0
 8003c2c:	f04f 0100 	mov.w	r1, #0
 8003c30:	0159      	lsls	r1, r3, #5
 8003c32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c36:	0150      	lsls	r0, r2, #5
 8003c38:	4602      	mov	r2, r0
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	4641      	mov	r1, r8
 8003c3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c42:	4649      	mov	r1, r9
 8003c44:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c48:	f04f 0200 	mov.w	r2, #0
 8003c4c:	f04f 0300 	mov.w	r3, #0
 8003c50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c5c:	ebb2 040a 	subs.w	r4, r2, sl
 8003c60:	eb63 050b 	sbc.w	r5, r3, fp
 8003c64:	f04f 0200 	mov.w	r2, #0
 8003c68:	f04f 0300 	mov.w	r3, #0
 8003c6c:	00eb      	lsls	r3, r5, #3
 8003c6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c72:	00e2      	lsls	r2, r4, #3
 8003c74:	4614      	mov	r4, r2
 8003c76:	461d      	mov	r5, r3
 8003c78:	4643      	mov	r3, r8
 8003c7a:	18e3      	adds	r3, r4, r3
 8003c7c:	603b      	str	r3, [r7, #0]
 8003c7e:	464b      	mov	r3, r9
 8003c80:	eb45 0303 	adc.w	r3, r5, r3
 8003c84:	607b      	str	r3, [r7, #4]
 8003c86:	f04f 0200 	mov.w	r2, #0
 8003c8a:	f04f 0300 	mov.w	r3, #0
 8003c8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c92:	4629      	mov	r1, r5
 8003c94:	028b      	lsls	r3, r1, #10
 8003c96:	4621      	mov	r1, r4
 8003c98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c9c:	4621      	mov	r1, r4
 8003c9e:	028a      	lsls	r2, r1, #10
 8003ca0:	4610      	mov	r0, r2
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	61bb      	str	r3, [r7, #24]
 8003caa:	61fa      	str	r2, [r7, #28]
 8003cac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cb0:	f7fc faaa 	bl	8000208 <__aeabi_uldivmod>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	4613      	mov	r3, r2
 8003cba:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x200>)
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	0c1b      	lsrs	r3, r3, #16
 8003cc2:	f003 0303 	and.w	r3, r3, #3
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003ccc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003cce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003cd6:	e002      	b.n	8003cde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cd8:	4b05      	ldr	r3, [pc, #20]	@ (8003cf0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003cda:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003cdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3750      	adds	r7, #80	@ 0x50
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cea:	bf00      	nop
 8003cec:	40023800 	.word	0x40023800
 8003cf0:	00f42400 	.word	0x00f42400

08003cf4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cf8:	4b03      	ldr	r3, [pc, #12]	@ (8003d08 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	20000000 	.word	0x20000000

08003d0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b088      	sub	sp, #32
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003d14:	2300      	movs	r3, #0
 8003d16:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003d20:	2300      	movs	r3, #0
 8003d22:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003d24:	2300      	movs	r3, #0
 8003d26:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d012      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d34:	4b69      	ldr	r3, [pc, #420]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	4a68      	ldr	r2, [pc, #416]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d3a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003d3e:	6093      	str	r3, [r2, #8]
 8003d40:	4b66      	ldr	r3, [pc, #408]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d42:	689a      	ldr	r2, [r3, #8]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d48:	4964      	ldr	r1, [pc, #400]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003d56:	2301      	movs	r3, #1
 8003d58:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d017      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d66:	4b5d      	ldr	r3, [pc, #372]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d6c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d74:	4959      	ldr	r1, [pc, #356]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d80:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d84:	d101      	bne.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003d86:	2301      	movs	r3, #1
 8003d88:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003d92:	2301      	movs	r3, #1
 8003d94:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d017      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003da2:	4b4e      	ldr	r3, [pc, #312]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003da4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003da8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db0:	494a      	ldr	r1, [pc, #296]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dbc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dc0:	d101      	bne.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003dde:	2301      	movs	r3, #1
 8003de0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0320 	and.w	r3, r3, #32
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f000 808b 	beq.w	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003df0:	4b3a      	ldr	r3, [pc, #232]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df4:	4a39      	ldr	r2, [pc, #228]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003df6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dfa:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dfc:	4b37      	ldr	r3, [pc, #220]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e04:	60bb      	str	r3, [r7, #8]
 8003e06:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e08:	4b35      	ldr	r3, [pc, #212]	@ (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a34      	ldr	r2, [pc, #208]	@ (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e14:	f7fc fea8 	bl	8000b68 <HAL_GetTick>
 8003e18:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e1a:	e008      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e1c:	f7fc fea4 	bl	8000b68 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b64      	cmp	r3, #100	@ 0x64
 8003e28:	d901      	bls.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e357      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e2e:	4b2c      	ldr	r3, [pc, #176]	@ (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0f0      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e3a:	4b28      	ldr	r3, [pc, #160]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e42:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d035      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d02e      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e58:	4b20      	ldr	r3, [pc, #128]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e60:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e62:	4b1e      	ldr	r3, [pc, #120]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e66:	4a1d      	ldr	r2, [pc, #116]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e6c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e72:	4a1a      	ldr	r2, [pc, #104]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e78:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003e7a:	4a18      	ldr	r2, [pc, #96]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e80:	4b16      	ldr	r3, [pc, #88]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d114      	bne.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8c:	f7fc fe6c 	bl	8000b68 <HAL_GetTick>
 8003e90:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e92:	e00a      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e94:	f7fc fe68 	bl	8000b68 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e319      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d0ee      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ebe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ec2:	d111      	bne.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003ec4:	4b05      	ldr	r3, [pc, #20]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003ed0:	4b04      	ldr	r3, [pc, #16]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003ed2:	400b      	ands	r3, r1
 8003ed4:	4901      	ldr	r1, [pc, #4]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	608b      	str	r3, [r1, #8]
 8003eda:	e00b      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003edc:	40023800 	.word	0x40023800
 8003ee0:	40007000 	.word	0x40007000
 8003ee4:	0ffffcff 	.word	0x0ffffcff
 8003ee8:	4baa      	ldr	r3, [pc, #680]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	4aa9      	ldr	r2, [pc, #676]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003eee:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003ef2:	6093      	str	r3, [r2, #8]
 8003ef4:	4ba7      	ldr	r3, [pc, #668]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ef6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003efc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f00:	49a4      	ldr	r1, [pc, #656]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0310 	and.w	r3, r3, #16
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d010      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f12:	4ba0      	ldr	r3, [pc, #640]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f18:	4a9e      	ldr	r2, [pc, #632]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f1e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003f22:	4b9c      	ldr	r3, [pc, #624]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f24:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f2c:	4999      	ldr	r1, [pc, #612]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00a      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f40:	4b94      	ldr	r3, [pc, #592]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f46:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f4e:	4991      	ldr	r1, [pc, #580]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00a      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f62:	4b8c      	ldr	r3, [pc, #560]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f68:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f70:	4988      	ldr	r1, [pc, #544]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00a      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f84:	4b83      	ldr	r3, [pc, #524]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f8a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f92:	4980      	ldr	r1, [pc, #512]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00a      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003fa6:	4b7b      	ldr	r3, [pc, #492]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fac:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fb4:	4977      	ldr	r1, [pc, #476]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00a      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fc8:	4b72      	ldr	r3, [pc, #456]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fce:	f023 0203 	bic.w	r2, r3, #3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fd6:	496f      	ldr	r1, [pc, #444]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00a      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fea:	4b6a      	ldr	r3, [pc, #424]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ff0:	f023 020c 	bic.w	r2, r3, #12
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ff8:	4966      	ldr	r1, [pc, #408]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00a      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800400c:	4b61      	ldr	r3, [pc, #388]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800400e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004012:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800401a:	495e      	ldr	r1, [pc, #376]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800401c:	4313      	orrs	r3, r2
 800401e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00a      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800402e:	4b59      	ldr	r3, [pc, #356]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004030:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004034:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800403c:	4955      	ldr	r1, [pc, #340]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800403e:	4313      	orrs	r3, r2
 8004040:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00a      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004050:	4b50      	ldr	r3, [pc, #320]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004056:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800405e:	494d      	ldr	r1, [pc, #308]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004060:	4313      	orrs	r3, r2
 8004062:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00a      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004072:	4b48      	ldr	r3, [pc, #288]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004074:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004078:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004080:	4944      	ldr	r1, [pc, #272]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004082:	4313      	orrs	r3, r2
 8004084:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00a      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004094:	4b3f      	ldr	r3, [pc, #252]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004096:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800409a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040a2:	493c      	ldr	r1, [pc, #240]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00a      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80040b6:	4b37      	ldr	r3, [pc, #220]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040bc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040c4:	4933      	ldr	r1, [pc, #204]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00a      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80040d8:	4b2e      	ldr	r3, [pc, #184]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040de:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040e6:	492b      	ldr	r1, [pc, #172]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d011      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80040fa:	4b26      	ldr	r3, [pc, #152]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004100:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004108:	4922      	ldr	r1, [pc, #136]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800410a:	4313      	orrs	r3, r2
 800410c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004114:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004118:	d101      	bne.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800411a:	2301      	movs	r3, #1
 800411c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0308 	and.w	r3, r3, #8
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800412a:	2301      	movs	r3, #1
 800412c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00a      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800413a:	4b16      	ldr	r3, [pc, #88]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800413c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004140:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004148:	4912      	ldr	r1, [pc, #72]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800414a:	4313      	orrs	r3, r2
 800414c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00b      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800415c:	4b0d      	ldr	r3, [pc, #52]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800415e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004162:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800416c:	4909      	ldr	r1, [pc, #36]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800416e:	4313      	orrs	r3, r2
 8004170:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d006      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 80d9 	beq.w	800433a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004188:	4b02      	ldr	r3, [pc, #8]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a01      	ldr	r2, [pc, #4]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800418e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004192:	e001      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004194:	40023800 	.word	0x40023800
 8004198:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800419a:	f7fc fce5 	bl	8000b68 <HAL_GetTick>
 800419e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041a0:	e008      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80041a2:	f7fc fce1 	bl	8000b68 <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	2b64      	cmp	r3, #100	@ 0x64
 80041ae:	d901      	bls.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e194      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041b4:	4b6c      	ldr	r3, [pc, #432]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1f0      	bne.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0301 	and.w	r3, r3, #1
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d021      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d11d      	bne.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80041d4:	4b64      	ldr	r3, [pc, #400]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041da:	0c1b      	lsrs	r3, r3, #16
 80041dc:	f003 0303 	and.w	r3, r3, #3
 80041e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80041e2:	4b61      	ldr	r3, [pc, #388]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041e8:	0e1b      	lsrs	r3, r3, #24
 80041ea:	f003 030f 	and.w	r3, r3, #15
 80041ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	019a      	lsls	r2, r3, #6
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	041b      	lsls	r3, r3, #16
 80041fa:	431a      	orrs	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	061b      	lsls	r3, r3, #24
 8004200:	431a      	orrs	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	071b      	lsls	r3, r3, #28
 8004208:	4957      	ldr	r1, [pc, #348]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800420a:	4313      	orrs	r3, r2
 800420c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d004      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004220:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004224:	d00a      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800422e:	2b00      	cmp	r3, #0
 8004230:	d02e      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004236:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800423a:	d129      	bne.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800423c:	4b4a      	ldr	r3, [pc, #296]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800423e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004242:	0c1b      	lsrs	r3, r3, #16
 8004244:	f003 0303 	and.w	r3, r3, #3
 8004248:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800424a:	4b47      	ldr	r3, [pc, #284]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800424c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004250:	0f1b      	lsrs	r3, r3, #28
 8004252:	f003 0307 	and.w	r3, r3, #7
 8004256:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	019a      	lsls	r2, r3, #6
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	041b      	lsls	r3, r3, #16
 8004262:	431a      	orrs	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	061b      	lsls	r3, r3, #24
 800426a:	431a      	orrs	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	071b      	lsls	r3, r3, #28
 8004270:	493d      	ldr	r1, [pc, #244]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004272:	4313      	orrs	r3, r2
 8004274:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004278:	4b3b      	ldr	r3, [pc, #236]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800427a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800427e:	f023 021f 	bic.w	r2, r3, #31
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004286:	3b01      	subs	r3, #1
 8004288:	4937      	ldr	r1, [pc, #220]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800428a:	4313      	orrs	r3, r2
 800428c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d01d      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800429c:	4b32      	ldr	r3, [pc, #200]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800429e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042a2:	0e1b      	lsrs	r3, r3, #24
 80042a4:	f003 030f 	and.w	r3, r3, #15
 80042a8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80042aa:	4b2f      	ldr	r3, [pc, #188]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042b0:	0f1b      	lsrs	r3, r3, #28
 80042b2:	f003 0307 	and.w	r3, r3, #7
 80042b6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	019a      	lsls	r2, r3, #6
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	041b      	lsls	r3, r3, #16
 80042c4:	431a      	orrs	r2, r3
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	061b      	lsls	r3, r3, #24
 80042ca:	431a      	orrs	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	071b      	lsls	r3, r3, #28
 80042d0:	4925      	ldr	r1, [pc, #148]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d011      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	019a      	lsls	r2, r3, #6
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	041b      	lsls	r3, r3, #16
 80042f0:	431a      	orrs	r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	061b      	lsls	r3, r3, #24
 80042f8:	431a      	orrs	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	071b      	lsls	r3, r3, #28
 8004300:	4919      	ldr	r1, [pc, #100]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004302:	4313      	orrs	r3, r2
 8004304:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004308:	4b17      	ldr	r3, [pc, #92]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a16      	ldr	r2, [pc, #88]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800430e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004312:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004314:	f7fc fc28 	bl	8000b68 <HAL_GetTick>
 8004318:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800431a:	e008      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800431c:	f7fc fc24 	bl	8000b68 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b64      	cmp	r3, #100	@ 0x64
 8004328:	d901      	bls.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e0d7      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800432e:	4b0e      	ldr	r3, [pc, #56]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d0f0      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	2b01      	cmp	r3, #1
 800433e:	f040 80cd 	bne.w	80044dc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004342:	4b09      	ldr	r3, [pc, #36]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a08      	ldr	r2, [pc, #32]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004348:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800434c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800434e:	f7fc fc0b 	bl	8000b68 <HAL_GetTick>
 8004352:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004354:	e00a      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004356:	f7fc fc07 	bl	8000b68 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b64      	cmp	r3, #100	@ 0x64
 8004362:	d903      	bls.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e0ba      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004368:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800436c:	4b5e      	ldr	r3, [pc, #376]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004374:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004378:	d0ed      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800438a:	2b00      	cmp	r3, #0
 800438c:	d009      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004396:	2b00      	cmp	r3, #0
 8004398:	d02e      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d12a      	bne.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80043a2:	4b51      	ldr	r3, [pc, #324]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043a8:	0c1b      	lsrs	r3, r3, #16
 80043aa:	f003 0303 	and.w	r3, r3, #3
 80043ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80043b0:	4b4d      	ldr	r3, [pc, #308]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043b6:	0f1b      	lsrs	r3, r3, #28
 80043b8:	f003 0307 	and.w	r3, r3, #7
 80043bc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	019a      	lsls	r2, r3, #6
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	041b      	lsls	r3, r3, #16
 80043c8:	431a      	orrs	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	061b      	lsls	r3, r3, #24
 80043d0:	431a      	orrs	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	071b      	lsls	r3, r3, #28
 80043d6:	4944      	ldr	r1, [pc, #272]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80043de:	4b42      	ldr	r3, [pc, #264]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043e4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ec:	3b01      	subs	r3, #1
 80043ee:	021b      	lsls	r3, r3, #8
 80043f0:	493d      	ldr	r1, [pc, #244]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d022      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004408:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800440c:	d11d      	bne.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800440e:	4b36      	ldr	r3, [pc, #216]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004410:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004414:	0e1b      	lsrs	r3, r3, #24
 8004416:	f003 030f 	and.w	r3, r3, #15
 800441a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800441c:	4b32      	ldr	r3, [pc, #200]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800441e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004422:	0f1b      	lsrs	r3, r3, #28
 8004424:	f003 0307 	and.w	r3, r3, #7
 8004428:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	019a      	lsls	r2, r3, #6
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a1b      	ldr	r3, [r3, #32]
 8004434:	041b      	lsls	r3, r3, #16
 8004436:	431a      	orrs	r2, r3
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	061b      	lsls	r3, r3, #24
 800443c:	431a      	orrs	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	071b      	lsls	r3, r3, #28
 8004442:	4929      	ldr	r1, [pc, #164]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004444:	4313      	orrs	r3, r2
 8004446:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0308 	and.w	r3, r3, #8
 8004452:	2b00      	cmp	r3, #0
 8004454:	d028      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004456:	4b24      	ldr	r3, [pc, #144]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004458:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800445c:	0e1b      	lsrs	r3, r3, #24
 800445e:	f003 030f 	and.w	r3, r3, #15
 8004462:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004464:	4b20      	ldr	r3, [pc, #128]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800446a:	0c1b      	lsrs	r3, r3, #16
 800446c:	f003 0303 	and.w	r3, r3, #3
 8004470:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	019a      	lsls	r2, r3, #6
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	041b      	lsls	r3, r3, #16
 800447c:	431a      	orrs	r2, r3
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	061b      	lsls	r3, r3, #24
 8004482:	431a      	orrs	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	69db      	ldr	r3, [r3, #28]
 8004488:	071b      	lsls	r3, r3, #28
 800448a:	4917      	ldr	r1, [pc, #92]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800448c:	4313      	orrs	r3, r2
 800448e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004492:	4b15      	ldr	r3, [pc, #84]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004494:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004498:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a0:	4911      	ldr	r1, [pc, #68]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80044a8:	4b0f      	ldr	r3, [pc, #60]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a0e      	ldr	r2, [pc, #56]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044b4:	f7fc fb58 	bl	8000b68 <HAL_GetTick>
 80044b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80044ba:	e008      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80044bc:	f7fc fb54 	bl	8000b68 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b64      	cmp	r3, #100	@ 0x64
 80044c8:	d901      	bls.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e007      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80044ce:	4b06      	ldr	r3, [pc, #24]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044da:	d1ef      	bne.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3720      	adds	r7, #32
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	40023800 	.word	0x40023800

080044ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044ec:	b084      	sub	sp, #16
 80044ee:	b580      	push	{r7, lr}
 80044f0:	b084      	sub	sp, #16
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
 80044f6:	f107 001c 	add.w	r0, r7, #28
 80044fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004500:	2b01      	cmp	r3, #1
 8004502:	d120      	bne.n	8004546 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004508:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68da      	ldr	r2, [r3, #12]
 8004514:	4b20      	ldr	r3, [pc, #128]	@ (8004598 <USB_CoreInit+0xac>)
 8004516:	4013      	ands	r3, r2
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004528:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800452a:	2b01      	cmp	r3, #1
 800452c:	d105      	bne.n	800453a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f001 fbee 	bl	8005d1c <USB_CoreReset>
 8004540:	4603      	mov	r3, r0
 8004542:	73fb      	strb	r3, [r7, #15]
 8004544:	e010      	b.n	8004568 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f001 fbe2 	bl	8005d1c <USB_CoreReset>
 8004558:	4603      	mov	r3, r0
 800455a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004560:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8004568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800456a:	2b01      	cmp	r3, #1
 800456c:	d10b      	bne.n	8004586 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f043 0206 	orr.w	r2, r3, #6
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f043 0220 	orr.w	r2, r3, #32
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004586:	7bfb      	ldrb	r3, [r7, #15]
}
 8004588:	4618      	mov	r0, r3
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004592:	b004      	add	sp, #16
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	ffbdffbf 	.word	0xffbdffbf

0800459c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800459c:	b480      	push	{r7}
 800459e:	b087      	sub	sp, #28
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	4613      	mov	r3, r2
 80045a8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80045aa:	79fb      	ldrb	r3, [r7, #7]
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d165      	bne.n	800467c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	4a41      	ldr	r2, [pc, #260]	@ (80046b8 <USB_SetTurnaroundTime+0x11c>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d906      	bls.n	80045c6 <USB_SetTurnaroundTime+0x2a>
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	4a40      	ldr	r2, [pc, #256]	@ (80046bc <USB_SetTurnaroundTime+0x120>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d202      	bcs.n	80045c6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80045c0:	230f      	movs	r3, #15
 80045c2:	617b      	str	r3, [r7, #20]
 80045c4:	e062      	b.n	800468c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	4a3c      	ldr	r2, [pc, #240]	@ (80046bc <USB_SetTurnaroundTime+0x120>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d306      	bcc.n	80045dc <USB_SetTurnaroundTime+0x40>
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	4a3b      	ldr	r2, [pc, #236]	@ (80046c0 <USB_SetTurnaroundTime+0x124>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d202      	bcs.n	80045dc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80045d6:	230e      	movs	r3, #14
 80045d8:	617b      	str	r3, [r7, #20]
 80045da:	e057      	b.n	800468c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	4a38      	ldr	r2, [pc, #224]	@ (80046c0 <USB_SetTurnaroundTime+0x124>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d306      	bcc.n	80045f2 <USB_SetTurnaroundTime+0x56>
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	4a37      	ldr	r2, [pc, #220]	@ (80046c4 <USB_SetTurnaroundTime+0x128>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d202      	bcs.n	80045f2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80045ec:	230d      	movs	r3, #13
 80045ee:	617b      	str	r3, [r7, #20]
 80045f0:	e04c      	b.n	800468c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	4a33      	ldr	r2, [pc, #204]	@ (80046c4 <USB_SetTurnaroundTime+0x128>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d306      	bcc.n	8004608 <USB_SetTurnaroundTime+0x6c>
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	4a32      	ldr	r2, [pc, #200]	@ (80046c8 <USB_SetTurnaroundTime+0x12c>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d802      	bhi.n	8004608 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004602:	230c      	movs	r3, #12
 8004604:	617b      	str	r3, [r7, #20]
 8004606:	e041      	b.n	800468c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	4a2f      	ldr	r2, [pc, #188]	@ (80046c8 <USB_SetTurnaroundTime+0x12c>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d906      	bls.n	800461e <USB_SetTurnaroundTime+0x82>
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	4a2e      	ldr	r2, [pc, #184]	@ (80046cc <USB_SetTurnaroundTime+0x130>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d802      	bhi.n	800461e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004618:	230b      	movs	r3, #11
 800461a:	617b      	str	r3, [r7, #20]
 800461c:	e036      	b.n	800468c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	4a2a      	ldr	r2, [pc, #168]	@ (80046cc <USB_SetTurnaroundTime+0x130>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d906      	bls.n	8004634 <USB_SetTurnaroundTime+0x98>
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	4a29      	ldr	r2, [pc, #164]	@ (80046d0 <USB_SetTurnaroundTime+0x134>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d802      	bhi.n	8004634 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800462e:	230a      	movs	r3, #10
 8004630:	617b      	str	r3, [r7, #20]
 8004632:	e02b      	b.n	800468c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	4a26      	ldr	r2, [pc, #152]	@ (80046d0 <USB_SetTurnaroundTime+0x134>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d906      	bls.n	800464a <USB_SetTurnaroundTime+0xae>
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	4a25      	ldr	r2, [pc, #148]	@ (80046d4 <USB_SetTurnaroundTime+0x138>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d202      	bcs.n	800464a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004644:	2309      	movs	r3, #9
 8004646:	617b      	str	r3, [r7, #20]
 8004648:	e020      	b.n	800468c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	4a21      	ldr	r2, [pc, #132]	@ (80046d4 <USB_SetTurnaroundTime+0x138>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d306      	bcc.n	8004660 <USB_SetTurnaroundTime+0xc4>
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	4a20      	ldr	r2, [pc, #128]	@ (80046d8 <USB_SetTurnaroundTime+0x13c>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d802      	bhi.n	8004660 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800465a:	2308      	movs	r3, #8
 800465c:	617b      	str	r3, [r7, #20]
 800465e:	e015      	b.n	800468c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	4a1d      	ldr	r2, [pc, #116]	@ (80046d8 <USB_SetTurnaroundTime+0x13c>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d906      	bls.n	8004676 <USB_SetTurnaroundTime+0xda>
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	4a1c      	ldr	r2, [pc, #112]	@ (80046dc <USB_SetTurnaroundTime+0x140>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d202      	bcs.n	8004676 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004670:	2307      	movs	r3, #7
 8004672:	617b      	str	r3, [r7, #20]
 8004674:	e00a      	b.n	800468c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004676:	2306      	movs	r3, #6
 8004678:	617b      	str	r3, [r7, #20]
 800467a:	e007      	b.n	800468c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800467c:	79fb      	ldrb	r3, [r7, #7]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d102      	bne.n	8004688 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004682:	2309      	movs	r3, #9
 8004684:	617b      	str	r3, [r7, #20]
 8004686:	e001      	b.n	800468c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004688:	2309      	movs	r3, #9
 800468a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	68da      	ldr	r2, [r3, #12]
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	029b      	lsls	r3, r3, #10
 80046a0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80046a4:	431a      	orrs	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	371c      	adds	r7, #28
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	00d8acbf 	.word	0x00d8acbf
 80046bc:	00e4e1c0 	.word	0x00e4e1c0
 80046c0:	00f42400 	.word	0x00f42400
 80046c4:	01067380 	.word	0x01067380
 80046c8:	011a499f 	.word	0x011a499f
 80046cc:	01312cff 	.word	0x01312cff
 80046d0:	014ca43f 	.word	0x014ca43f
 80046d4:	016e3600 	.word	0x016e3600
 80046d8:	01a6ab1f 	.word	0x01a6ab1f
 80046dc:	01e84800 	.word	0x01e84800

080046e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f043 0201 	orr.w	r2, r3, #1
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr

08004702 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004702:	b480      	push	{r7}
 8004704:	b083      	sub	sp, #12
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f023 0201 	bic.w	r2, r3, #1
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	460b      	mov	r3, r1
 800472e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004730:	2300      	movs	r3, #0
 8004732:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004740:	78fb      	ldrb	r3, [r7, #3]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d115      	bne.n	8004772 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004752:	2001      	movs	r0, #1
 8004754:	f7fc fa14 	bl	8000b80 <HAL_Delay>
      ms++;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	3301      	adds	r3, #1
 800475c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f001 fa4b 	bl	8005bfa <USB_GetMode>
 8004764:	4603      	mov	r3, r0
 8004766:	2b01      	cmp	r3, #1
 8004768:	d01e      	beq.n	80047a8 <USB_SetCurrentMode+0x84>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2b31      	cmp	r3, #49	@ 0x31
 800476e:	d9f0      	bls.n	8004752 <USB_SetCurrentMode+0x2e>
 8004770:	e01a      	b.n	80047a8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004772:	78fb      	ldrb	r3, [r7, #3]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d115      	bne.n	80047a4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004784:	2001      	movs	r0, #1
 8004786:	f7fc f9fb 	bl	8000b80 <HAL_Delay>
      ms++;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	3301      	adds	r3, #1
 800478e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f001 fa32 	bl	8005bfa <USB_GetMode>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d005      	beq.n	80047a8 <USB_SetCurrentMode+0x84>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2b31      	cmp	r3, #49	@ 0x31
 80047a0:	d9f0      	bls.n	8004784 <USB_SetCurrentMode+0x60>
 80047a2:	e001      	b.n	80047a8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e005      	b.n	80047b4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2b32      	cmp	r3, #50	@ 0x32
 80047ac:	d101      	bne.n	80047b2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e000      	b.n	80047b4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3710      	adds	r7, #16
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047bc:	b084      	sub	sp, #16
 80047be:	b580      	push	{r7, lr}
 80047c0:	b086      	sub	sp, #24
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
 80047c6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80047ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80047ce:	2300      	movs	r3, #0
 80047d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80047d6:	2300      	movs	r3, #0
 80047d8:	613b      	str	r3, [r7, #16]
 80047da:	e009      	b.n	80047f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	3340      	adds	r3, #64	@ 0x40
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	4413      	add	r3, r2
 80047e6:	2200      	movs	r2, #0
 80047e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	3301      	adds	r3, #1
 80047ee:	613b      	str	r3, [r7, #16]
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	2b0e      	cmp	r3, #14
 80047f4:	d9f2      	bls.n	80047dc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80047f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d11c      	bne.n	8004836 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800480a:	f043 0302 	orr.w	r3, r3, #2
 800480e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004814:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	601a      	str	r2, [r3, #0]
 8004834:	e005      	b.n	8004842 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800483a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004848:	461a      	mov	r2, r3
 800484a:	2300      	movs	r3, #0
 800484c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004854:	4619      	mov	r1, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800485c:	461a      	mov	r2, r3
 800485e:	680b      	ldr	r3, [r1, #0]
 8004860:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004864:	2b01      	cmp	r3, #1
 8004866:	d10c      	bne.n	8004882 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800486a:	2b00      	cmp	r3, #0
 800486c:	d104      	bne.n	8004878 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800486e:	2100      	movs	r1, #0
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 f965 	bl	8004b40 <USB_SetDevSpeed>
 8004876:	e008      	b.n	800488a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004878:	2101      	movs	r1, #1
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f960 	bl	8004b40 <USB_SetDevSpeed>
 8004880:	e003      	b.n	800488a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004882:	2103      	movs	r1, #3
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f95b 	bl	8004b40 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800488a:	2110      	movs	r1, #16
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 f8f3 	bl	8004a78 <USB_FlushTxFifo>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d001      	beq.n	800489c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 f91f 	bl	8004ae0 <USB_FlushRxFifo>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d001      	beq.n	80048ac <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048b2:	461a      	mov	r2, r3
 80048b4:	2300      	movs	r3, #0
 80048b6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048be:	461a      	mov	r2, r3
 80048c0:	2300      	movs	r3, #0
 80048c2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048ca:	461a      	mov	r2, r3
 80048cc:	2300      	movs	r3, #0
 80048ce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048d0:	2300      	movs	r3, #0
 80048d2:	613b      	str	r3, [r7, #16]
 80048d4:	e043      	b.n	800495e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	015a      	lsls	r2, r3, #5
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	4413      	add	r3, r2
 80048de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80048e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80048ec:	d118      	bne.n	8004920 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d10a      	bne.n	800490a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	015a      	lsls	r2, r3, #5
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	4413      	add	r3, r2
 80048fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004900:	461a      	mov	r2, r3
 8004902:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004906:	6013      	str	r3, [r2, #0]
 8004908:	e013      	b.n	8004932 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	015a      	lsls	r2, r3, #5
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	4413      	add	r3, r2
 8004912:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004916:	461a      	mov	r2, r3
 8004918:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800491c:	6013      	str	r3, [r2, #0]
 800491e:	e008      	b.n	8004932 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	015a      	lsls	r2, r3, #5
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4413      	add	r3, r2
 8004928:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800492c:	461a      	mov	r2, r3
 800492e:	2300      	movs	r3, #0
 8004930:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	015a      	lsls	r2, r3, #5
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	4413      	add	r3, r2
 800493a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800493e:	461a      	mov	r2, r3
 8004940:	2300      	movs	r3, #0
 8004942:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	015a      	lsls	r2, r3, #5
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	4413      	add	r3, r2
 800494c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004950:	461a      	mov	r2, r3
 8004952:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004956:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	3301      	adds	r3, #1
 800495c:	613b      	str	r3, [r7, #16]
 800495e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	429a      	cmp	r2, r3
 8004964:	d3b7      	bcc.n	80048d6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004966:	2300      	movs	r3, #0
 8004968:	613b      	str	r3, [r7, #16]
 800496a:	e043      	b.n	80049f4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	015a      	lsls	r2, r3, #5
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4413      	add	r3, r2
 8004974:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800497e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004982:	d118      	bne.n	80049b6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10a      	bne.n	80049a0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	015a      	lsls	r2, r3, #5
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	4413      	add	r3, r2
 8004992:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004996:	461a      	mov	r2, r3
 8004998:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800499c:	6013      	str	r3, [r2, #0]
 800499e:	e013      	b.n	80049c8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	015a      	lsls	r2, r3, #5
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	4413      	add	r3, r2
 80049a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049ac:	461a      	mov	r2, r3
 80049ae:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80049b2:	6013      	str	r3, [r2, #0]
 80049b4:	e008      	b.n	80049c8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	015a      	lsls	r2, r3, #5
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	4413      	add	r3, r2
 80049be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049c2:	461a      	mov	r2, r3
 80049c4:	2300      	movs	r3, #0
 80049c6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	015a      	lsls	r2, r3, #5
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	4413      	add	r3, r2
 80049d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049d4:	461a      	mov	r2, r3
 80049d6:	2300      	movs	r3, #0
 80049d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	015a      	lsls	r2, r3, #5
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	4413      	add	r3, r2
 80049e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049e6:	461a      	mov	r2, r3
 80049e8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80049ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	3301      	adds	r3, #1
 80049f2:	613b      	str	r3, [r7, #16]
 80049f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d3b7      	bcc.n	800496c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a0a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a0e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004a1c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d105      	bne.n	8004a30 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	f043 0210 	orr.w	r2, r3, #16
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	699a      	ldr	r2, [r3, #24]
 8004a34:	4b0e      	ldr	r3, [pc, #56]	@ (8004a70 <USB_DevInit+0x2b4>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004a3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d005      	beq.n	8004a4e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	f043 0208 	orr.w	r2, r3, #8
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004a4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d105      	bne.n	8004a60 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	699a      	ldr	r2, [r3, #24]
 8004a58:	4b06      	ldr	r3, [pc, #24]	@ (8004a74 <USB_DevInit+0x2b8>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004a60:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3718      	adds	r7, #24
 8004a66:	46bd      	mov	sp, r7
 8004a68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a6c:	b004      	add	sp, #16
 8004a6e:	4770      	bx	lr
 8004a70:	803c3800 	.word	0x803c3800
 8004a74:	40000004 	.word	0x40000004

08004a78 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004a82:	2300      	movs	r3, #0
 8004a84:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	3301      	adds	r3, #1
 8004a8a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	4a13      	ldr	r2, [pc, #76]	@ (8004adc <USB_FlushTxFifo+0x64>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d901      	bls.n	8004a98 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e01b      	b.n	8004ad0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	daf2      	bge.n	8004a86 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	019b      	lsls	r3, r3, #6
 8004aa8:	f043 0220 	orr.w	r2, r3, #32
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	4a08      	ldr	r2, [pc, #32]	@ (8004adc <USB_FlushTxFifo+0x64>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d901      	bls.n	8004ac2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e006      	b.n	8004ad0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	f003 0320 	and.w	r3, r3, #32
 8004aca:	2b20      	cmp	r3, #32
 8004acc:	d0f0      	beq.n	8004ab0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3714      	adds	r7, #20
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr
 8004adc:	00030d40 	.word	0x00030d40

08004ae0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	3301      	adds	r3, #1
 8004af0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	4a11      	ldr	r2, [pc, #68]	@ (8004b3c <USB_FlushRxFifo+0x5c>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d901      	bls.n	8004afe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e018      	b.n	8004b30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	daf2      	bge.n	8004aec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004b06:	2300      	movs	r3, #0
 8004b08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2210      	movs	r2, #16
 8004b0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	3301      	adds	r3, #1
 8004b14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	4a08      	ldr	r2, [pc, #32]	@ (8004b3c <USB_FlushRxFifo+0x5c>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d901      	bls.n	8004b22 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e006      	b.n	8004b30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	f003 0310 	and.w	r3, r3, #16
 8004b2a:	2b10      	cmp	r3, #16
 8004b2c:	d0f0      	beq.n	8004b10 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3714      	adds	r7, #20
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	00030d40 	.word	0x00030d40

08004b40 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	460b      	mov	r3, r1
 8004b4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	78fb      	ldrb	r3, [r7, #3]
 8004b5a:	68f9      	ldr	r1, [r7, #12]
 8004b5c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b60:	4313      	orrs	r3, r2
 8004b62:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3714      	adds	r7, #20
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr

08004b72 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004b72:	b480      	push	{r7}
 8004b74:	b087      	sub	sp, #28
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f003 0306 	and.w	r3, r3, #6
 8004b8a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d102      	bne.n	8004b98 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004b92:	2300      	movs	r3, #0
 8004b94:	75fb      	strb	r3, [r7, #23]
 8004b96:	e00a      	b.n	8004bae <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d002      	beq.n	8004ba4 <USB_GetDevSpeed+0x32>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2b06      	cmp	r3, #6
 8004ba2:	d102      	bne.n	8004baa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	75fb      	strb	r3, [r7, #23]
 8004ba8:	e001      	b.n	8004bae <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004baa:	230f      	movs	r3, #15
 8004bac:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004bae:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	371c      	adds	r7, #28
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b085      	sub	sp, #20
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	785b      	ldrb	r3, [r3, #1]
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d139      	bne.n	8004c4c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bde:	69da      	ldr	r2, [r3, #28]
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	f003 030f 	and.w	r3, r3, #15
 8004be8:	2101      	movs	r1, #1
 8004bea:	fa01 f303 	lsl.w	r3, r1, r3
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	68f9      	ldr	r1, [r7, #12]
 8004bf2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	015a      	lsls	r2, r3, #5
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	4413      	add	r3, r2
 8004c02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d153      	bne.n	8004cb8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	015a      	lsls	r2, r3, #5
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	4413      	add	r3, r2
 8004c18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	791b      	ldrb	r3, [r3, #4]
 8004c2a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c2c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	059b      	lsls	r3, r3, #22
 8004c32:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c34:	431a      	orrs	r2, r3
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	0159      	lsls	r1, r3, #5
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	440b      	add	r3, r1
 8004c3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c42:	4619      	mov	r1, r3
 8004c44:	4b20      	ldr	r3, [pc, #128]	@ (8004cc8 <USB_ActivateEndpoint+0x10c>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	600b      	str	r3, [r1, #0]
 8004c4a:	e035      	b.n	8004cb8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c52:	69da      	ldr	r2, [r3, #28]
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	f003 030f 	and.w	r3, r3, #15
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c62:	041b      	lsls	r3, r3, #16
 8004c64:	68f9      	ldr	r1, [r7, #12]
 8004c66:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	015a      	lsls	r2, r3, #5
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	4413      	add	r3, r2
 8004c76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d119      	bne.n	8004cb8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	015a      	lsls	r2, r3, #5
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	791b      	ldrb	r3, [r3, #4]
 8004c9e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004ca0:	430b      	orrs	r3, r1
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	0159      	lsls	r1, r3, #5
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	440b      	add	r3, r1
 8004cac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	4b05      	ldr	r3, [pc, #20]	@ (8004cc8 <USB_ActivateEndpoint+0x10c>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	10008000 	.word	0x10008000

08004ccc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	785b      	ldrb	r3, [r3, #1]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d161      	bne.n	8004dac <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	015a      	lsls	r2, r3, #5
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004cfe:	d11f      	bne.n	8004d40 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	015a      	lsls	r2, r3, #5
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	4413      	add	r3, r2
 8004d08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68ba      	ldr	r2, [r7, #8]
 8004d10:	0151      	lsls	r1, r2, #5
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	440a      	add	r2, r1
 8004d16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d1a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004d1e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	015a      	lsls	r2, r3, #5
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	4413      	add	r3, r2
 8004d28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68ba      	ldr	r2, [r7, #8]
 8004d30:	0151      	lsls	r1, r2, #5
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	440a      	add	r2, r1
 8004d36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d3a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004d3e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	f003 030f 	and.w	r3, r3, #15
 8004d50:	2101      	movs	r1, #1
 8004d52:	fa01 f303 	lsl.w	r3, r1, r3
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	43db      	mvns	r3, r3
 8004d5a:	68f9      	ldr	r1, [r7, #12]
 8004d5c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004d60:	4013      	ands	r3, r2
 8004d62:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d6a:	69da      	ldr	r2, [r3, #28]
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	f003 030f 	and.w	r3, r3, #15
 8004d74:	2101      	movs	r1, #1
 8004d76:	fa01 f303 	lsl.w	r3, r1, r3
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	43db      	mvns	r3, r3
 8004d7e:	68f9      	ldr	r1, [r7, #12]
 8004d80:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004d84:	4013      	ands	r3, r2
 8004d86:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	015a      	lsls	r2, r3, #5
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	4413      	add	r3, r2
 8004d90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	0159      	lsls	r1, r3, #5
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	440b      	add	r3, r1
 8004d9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004da2:	4619      	mov	r1, r3
 8004da4:	4b35      	ldr	r3, [pc, #212]	@ (8004e7c <USB_DeactivateEndpoint+0x1b0>)
 8004da6:	4013      	ands	r3, r2
 8004da8:	600b      	str	r3, [r1, #0]
 8004daa:	e060      	b.n	8004e6e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	015a      	lsls	r2, r3, #5
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	4413      	add	r3, r2
 8004db4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004dbe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004dc2:	d11f      	bne.n	8004e04 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	015a      	lsls	r2, r3, #5
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	4413      	add	r3, r2
 8004dcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68ba      	ldr	r2, [r7, #8]
 8004dd4:	0151      	lsls	r1, r2, #5
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	440a      	add	r2, r1
 8004dda:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004dde:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004de2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	015a      	lsls	r2, r3, #5
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	4413      	add	r3, r2
 8004dec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68ba      	ldr	r2, [r7, #8]
 8004df4:	0151      	lsls	r1, r2, #5
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	440a      	add	r2, r1
 8004dfa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004dfe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004e02:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	f003 030f 	and.w	r3, r3, #15
 8004e14:	2101      	movs	r1, #1
 8004e16:	fa01 f303 	lsl.w	r3, r1, r3
 8004e1a:	041b      	lsls	r3, r3, #16
 8004e1c:	43db      	mvns	r3, r3
 8004e1e:	68f9      	ldr	r1, [r7, #12]
 8004e20:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e24:	4013      	ands	r3, r2
 8004e26:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e2e:	69da      	ldr	r2, [r3, #28]
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	f003 030f 	and.w	r3, r3, #15
 8004e38:	2101      	movs	r1, #1
 8004e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e3e:	041b      	lsls	r3, r3, #16
 8004e40:	43db      	mvns	r3, r3
 8004e42:	68f9      	ldr	r1, [r7, #12]
 8004e44:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e48:	4013      	ands	r3, r2
 8004e4a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	015a      	lsls	r2, r3, #5
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	4413      	add	r3, r2
 8004e54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	0159      	lsls	r1, r3, #5
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	440b      	add	r3, r1
 8004e62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e66:	4619      	mov	r1, r3
 8004e68:	4b05      	ldr	r3, [pc, #20]	@ (8004e80 <USB_DeactivateEndpoint+0x1b4>)
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3714      	adds	r7, #20
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr
 8004e7c:	ec337800 	.word	0xec337800
 8004e80:	eff37800 	.word	0xeff37800

08004e84 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b08a      	sub	sp, #40	@ 0x28
 8004e88:	af02      	add	r7, sp, #8
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	785b      	ldrb	r3, [r3, #1]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	f040 8163 	bne.w	800516c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d132      	bne.n	8004f14 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	015a      	lsls	r2, r3, #5
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004eba:	691a      	ldr	r2, [r3, #16]
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	0159      	lsls	r1, r3, #5
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	440b      	add	r3, r1
 8004ec4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ec8:	4619      	mov	r1, r3
 8004eca:	4ba5      	ldr	r3, [pc, #660]	@ (8005160 <USB_EPStartXfer+0x2dc>)
 8004ecc:	4013      	ands	r3, r2
 8004ece:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	015a      	lsls	r2, r3, #5
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	69ba      	ldr	r2, [r7, #24]
 8004ee0:	0151      	lsls	r1, r2, #5
 8004ee2:	69fa      	ldr	r2, [r7, #28]
 8004ee4:	440a      	add	r2, r1
 8004ee6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004eea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004eee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	015a      	lsls	r2, r3, #5
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004efc:	691a      	ldr	r2, [r3, #16]
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	0159      	lsls	r1, r3, #5
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	440b      	add	r3, r1
 8004f06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	4b95      	ldr	r3, [pc, #596]	@ (8005164 <USB_EPStartXfer+0x2e0>)
 8004f0e:	4013      	ands	r3, r2
 8004f10:	610b      	str	r3, [r1, #16]
 8004f12:	e074      	b.n	8004ffe <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	015a      	lsls	r2, r3, #5
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f20:	691a      	ldr	r2, [r3, #16]
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	0159      	lsls	r1, r3, #5
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	440b      	add	r3, r1
 8004f2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f2e:	4619      	mov	r1, r3
 8004f30:	4b8c      	ldr	r3, [pc, #560]	@ (8005164 <USB_EPStartXfer+0x2e0>)
 8004f32:	4013      	ands	r3, r2
 8004f34:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	015a      	lsls	r2, r3, #5
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f42:	691a      	ldr	r2, [r3, #16]
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	0159      	lsls	r1, r3, #5
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	440b      	add	r3, r1
 8004f4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f50:	4619      	mov	r1, r3
 8004f52:	4b83      	ldr	r3, [pc, #524]	@ (8005160 <USB_EPStartXfer+0x2dc>)
 8004f54:	4013      	ands	r3, r2
 8004f56:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	015a      	lsls	r2, r3, #5
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	4413      	add	r3, r2
 8004f60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f64:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	6999      	ldr	r1, [r3, #24]
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	440b      	add	r3, r1
 8004f70:	1e59      	subs	r1, r3, #1
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f7a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004f7c:	4b7a      	ldr	r3, [pc, #488]	@ (8005168 <USB_EPStartXfer+0x2e4>)
 8004f7e:	400b      	ands	r3, r1
 8004f80:	69b9      	ldr	r1, [r7, #24]
 8004f82:	0148      	lsls	r0, r1, #5
 8004f84:	69f9      	ldr	r1, [r7, #28]
 8004f86:	4401      	add	r1, r0
 8004f88:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	015a      	lsls	r2, r3, #5
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	4413      	add	r3, r2
 8004f98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f9c:	691a      	ldr	r2, [r3, #16]
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fa6:	69b9      	ldr	r1, [r7, #24]
 8004fa8:	0148      	lsls	r0, r1, #5
 8004faa:	69f9      	ldr	r1, [r7, #28]
 8004fac:	4401      	add	r1, r0
 8004fae:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	791b      	ldrb	r3, [r3, #4]
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d11f      	bne.n	8004ffe <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	015a      	lsls	r2, r3, #5
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	0151      	lsls	r1, r2, #5
 8004fd0:	69fa      	ldr	r2, [r7, #28]
 8004fd2:	440a      	add	r2, r1
 8004fd4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fd8:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004fdc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	015a      	lsls	r2, r3, #5
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	69ba      	ldr	r2, [r7, #24]
 8004fee:	0151      	lsls	r1, r2, #5
 8004ff0:	69fa      	ldr	r2, [r7, #28]
 8004ff2:	440a      	add	r2, r1
 8004ff4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ff8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004ffc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004ffe:	79fb      	ldrb	r3, [r7, #7]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d14b      	bne.n	800509c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	695b      	ldr	r3, [r3, #20]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d009      	beq.n	8005020 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	015a      	lsls	r2, r3, #5
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	4413      	add	r3, r2
 8005014:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005018:	461a      	mov	r2, r3
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	791b      	ldrb	r3, [r3, #4]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d128      	bne.n	800507a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005034:	2b00      	cmp	r3, #0
 8005036:	d110      	bne.n	800505a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	015a      	lsls	r2, r3, #5
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	4413      	add	r3, r2
 8005040:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	69ba      	ldr	r2, [r7, #24]
 8005048:	0151      	lsls	r1, r2, #5
 800504a:	69fa      	ldr	r2, [r7, #28]
 800504c:	440a      	add	r2, r1
 800504e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005052:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005056:	6013      	str	r3, [r2, #0]
 8005058:	e00f      	b.n	800507a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	015a      	lsls	r2, r3, #5
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	4413      	add	r3, r2
 8005062:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	69ba      	ldr	r2, [r7, #24]
 800506a:	0151      	lsls	r1, r2, #5
 800506c:	69fa      	ldr	r2, [r7, #28]
 800506e:	440a      	add	r2, r1
 8005070:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005074:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005078:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	015a      	lsls	r2, r3, #5
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	4413      	add	r3, r2
 8005082:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	0151      	lsls	r1, r2, #5
 800508c:	69fa      	ldr	r2, [r7, #28]
 800508e:	440a      	add	r2, r1
 8005090:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005094:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005098:	6013      	str	r3, [r2, #0]
 800509a:	e137      	b.n	800530c <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	015a      	lsls	r2, r3, #5
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	4413      	add	r3, r2
 80050a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	69ba      	ldr	r2, [r7, #24]
 80050ac:	0151      	lsls	r1, r2, #5
 80050ae:	69fa      	ldr	r2, [r7, #28]
 80050b0:	440a      	add	r2, r1
 80050b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050b6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80050ba:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	791b      	ldrb	r3, [r3, #4]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d015      	beq.n	80050f0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f000 811f 	beq.w	800530c <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	f003 030f 	and.w	r3, r3, #15
 80050de:	2101      	movs	r1, #1
 80050e0:	fa01 f303 	lsl.w	r3, r1, r3
 80050e4:	69f9      	ldr	r1, [r7, #28]
 80050e6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80050ea:	4313      	orrs	r3, r2
 80050ec:	634b      	str	r3, [r1, #52]	@ 0x34
 80050ee:	e10d      	b.n	800530c <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d110      	bne.n	8005122 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	015a      	lsls	r2, r3, #5
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	4413      	add	r3, r2
 8005108:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	69ba      	ldr	r2, [r7, #24]
 8005110:	0151      	lsls	r1, r2, #5
 8005112:	69fa      	ldr	r2, [r7, #28]
 8005114:	440a      	add	r2, r1
 8005116:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800511a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800511e:	6013      	str	r3, [r2, #0]
 8005120:	e00f      	b.n	8005142 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	015a      	lsls	r2, r3, #5
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	4413      	add	r3, r2
 800512a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	69ba      	ldr	r2, [r7, #24]
 8005132:	0151      	lsls	r1, r2, #5
 8005134:	69fa      	ldr	r2, [r7, #28]
 8005136:	440a      	add	r2, r1
 8005138:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800513c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005140:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	6919      	ldr	r1, [r3, #16]
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	781a      	ldrb	r2, [r3, #0]
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	b298      	uxth	r0, r3
 8005150:	79fb      	ldrb	r3, [r7, #7]
 8005152:	9300      	str	r3, [sp, #0]
 8005154:	4603      	mov	r3, r0
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f000 faea 	bl	8005730 <USB_WritePacket>
 800515c:	e0d6      	b.n	800530c <USB_EPStartXfer+0x488>
 800515e:	bf00      	nop
 8005160:	e007ffff 	.word	0xe007ffff
 8005164:	fff80000 	.word	0xfff80000
 8005168:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	015a      	lsls	r2, r3, #5
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	4413      	add	r3, r2
 8005174:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005178:	691a      	ldr	r2, [r3, #16]
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	0159      	lsls	r1, r3, #5
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	440b      	add	r3, r1
 8005182:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005186:	4619      	mov	r1, r3
 8005188:	4b63      	ldr	r3, [pc, #396]	@ (8005318 <USB_EPStartXfer+0x494>)
 800518a:	4013      	ands	r3, r2
 800518c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	015a      	lsls	r2, r3, #5
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	4413      	add	r3, r2
 8005196:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800519a:	691a      	ldr	r2, [r3, #16]
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	0159      	lsls	r1, r3, #5
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	440b      	add	r3, r1
 80051a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051a8:	4619      	mov	r1, r3
 80051aa:	4b5c      	ldr	r3, [pc, #368]	@ (800531c <USB_EPStartXfer+0x498>)
 80051ac:	4013      	ands	r3, r2
 80051ae:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	699b      	ldr	r3, [r3, #24]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d123      	bne.n	8005200 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	015a      	lsls	r2, r3, #5
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051c4:	691a      	ldr	r2, [r3, #16]
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051ce:	69b9      	ldr	r1, [r7, #24]
 80051d0:	0148      	lsls	r0, r1, #5
 80051d2:	69f9      	ldr	r1, [r7, #28]
 80051d4:	4401      	add	r1, r0
 80051d6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80051da:	4313      	orrs	r3, r2
 80051dc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	015a      	lsls	r2, r3, #5
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	4413      	add	r3, r2
 80051e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	69ba      	ldr	r2, [r7, #24]
 80051ee:	0151      	lsls	r1, r2, #5
 80051f0:	69fa      	ldr	r2, [r7, #28]
 80051f2:	440a      	add	r2, r1
 80051f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051f8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80051fc:	6113      	str	r3, [r2, #16]
 80051fe:	e037      	b.n	8005270 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	699a      	ldr	r2, [r3, #24]
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	4413      	add	r3, r2
 800520a:	1e5a      	subs	r2, r3, #1
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	fbb2 f3f3 	udiv	r3, r2, r3
 8005214:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	8afa      	ldrh	r2, [r7, #22]
 800521c:	fb03 f202 	mul.w	r2, r3, r2
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	015a      	lsls	r2, r3, #5
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	4413      	add	r3, r2
 800522c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005230:	691a      	ldr	r2, [r3, #16]
 8005232:	8afb      	ldrh	r3, [r7, #22]
 8005234:	04d9      	lsls	r1, r3, #19
 8005236:	4b3a      	ldr	r3, [pc, #232]	@ (8005320 <USB_EPStartXfer+0x49c>)
 8005238:	400b      	ands	r3, r1
 800523a:	69b9      	ldr	r1, [r7, #24]
 800523c:	0148      	lsls	r0, r1, #5
 800523e:	69f9      	ldr	r1, [r7, #28]
 8005240:	4401      	add	r1, r0
 8005242:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005246:	4313      	orrs	r3, r2
 8005248:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	015a      	lsls	r2, r3, #5
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	4413      	add	r3, r2
 8005252:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005256:	691a      	ldr	r2, [r3, #16]
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	69db      	ldr	r3, [r3, #28]
 800525c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005260:	69b9      	ldr	r1, [r7, #24]
 8005262:	0148      	lsls	r0, r1, #5
 8005264:	69f9      	ldr	r1, [r7, #28]
 8005266:	4401      	add	r1, r0
 8005268:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800526c:	4313      	orrs	r3, r2
 800526e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005270:	79fb      	ldrb	r3, [r7, #7]
 8005272:	2b01      	cmp	r3, #1
 8005274:	d10d      	bne.n	8005292 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d009      	beq.n	8005292 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	6919      	ldr	r1, [r3, #16]
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	015a      	lsls	r2, r3, #5
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	4413      	add	r3, r2
 800528a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800528e:	460a      	mov	r2, r1
 8005290:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	791b      	ldrb	r3, [r3, #4]
 8005296:	2b01      	cmp	r3, #1
 8005298:	d128      	bne.n	80052ec <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d110      	bne.n	80052cc <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	015a      	lsls	r2, r3, #5
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	4413      	add	r3, r2
 80052b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	69ba      	ldr	r2, [r7, #24]
 80052ba:	0151      	lsls	r1, r2, #5
 80052bc:	69fa      	ldr	r2, [r7, #28]
 80052be:	440a      	add	r2, r1
 80052c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052c4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80052c8:	6013      	str	r3, [r2, #0]
 80052ca:	e00f      	b.n	80052ec <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	69ba      	ldr	r2, [r7, #24]
 80052dc:	0151      	lsls	r1, r2, #5
 80052de:	69fa      	ldr	r2, [r7, #28]
 80052e0:	440a      	add	r2, r1
 80052e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052ea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	015a      	lsls	r2, r3, #5
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	4413      	add	r3, r2
 80052f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	69ba      	ldr	r2, [r7, #24]
 80052fc:	0151      	lsls	r1, r2, #5
 80052fe:	69fa      	ldr	r2, [r7, #28]
 8005300:	440a      	add	r2, r1
 8005302:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005306:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800530a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3720      	adds	r7, #32
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	fff80000 	.word	0xfff80000
 800531c:	e007ffff 	.word	0xe007ffff
 8005320:	1ff80000 	.word	0x1ff80000

08005324 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005324:	b480      	push	{r7}
 8005326:	b087      	sub	sp, #28
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	4613      	mov	r3, r2
 8005330:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	785b      	ldrb	r3, [r3, #1]
 8005340:	2b01      	cmp	r3, #1
 8005342:	f040 80ce 	bne.w	80054e2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d132      	bne.n	80053b4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	015a      	lsls	r2, r3, #5
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	4413      	add	r3, r2
 8005356:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800535a:	691a      	ldr	r2, [r3, #16]
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	0159      	lsls	r1, r3, #5
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	440b      	add	r3, r1
 8005364:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005368:	4619      	mov	r1, r3
 800536a:	4b9a      	ldr	r3, [pc, #616]	@ (80055d4 <USB_EP0StartXfer+0x2b0>)
 800536c:	4013      	ands	r3, r2
 800536e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	015a      	lsls	r2, r3, #5
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	4413      	add	r3, r2
 8005378:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	0151      	lsls	r1, r2, #5
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	440a      	add	r2, r1
 8005386:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800538a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800538e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	015a      	lsls	r2, r3, #5
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	4413      	add	r3, r2
 8005398:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800539c:	691a      	ldr	r2, [r3, #16]
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	0159      	lsls	r1, r3, #5
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	440b      	add	r3, r1
 80053a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053aa:	4619      	mov	r1, r3
 80053ac:	4b8a      	ldr	r3, [pc, #552]	@ (80055d8 <USB_EP0StartXfer+0x2b4>)
 80053ae:	4013      	ands	r3, r2
 80053b0:	610b      	str	r3, [r1, #16]
 80053b2:	e04e      	b.n	8005452 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	015a      	lsls	r2, r3, #5
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	4413      	add	r3, r2
 80053bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053c0:	691a      	ldr	r2, [r3, #16]
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	0159      	lsls	r1, r3, #5
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	440b      	add	r3, r1
 80053ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053ce:	4619      	mov	r1, r3
 80053d0:	4b81      	ldr	r3, [pc, #516]	@ (80055d8 <USB_EP0StartXfer+0x2b4>)
 80053d2:	4013      	ands	r3, r2
 80053d4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	015a      	lsls	r2, r3, #5
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	4413      	add	r3, r2
 80053de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053e2:	691a      	ldr	r2, [r3, #16]
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	0159      	lsls	r1, r3, #5
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	440b      	add	r3, r1
 80053ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053f0:	4619      	mov	r1, r3
 80053f2:	4b78      	ldr	r3, [pc, #480]	@ (80055d4 <USB_EP0StartXfer+0x2b0>)
 80053f4:	4013      	ands	r3, r2
 80053f6:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	699a      	ldr	r2, [r3, #24]
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	429a      	cmp	r2, r3
 8005402:	d903      	bls.n	800540c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	68da      	ldr	r2, [r3, #12]
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	015a      	lsls	r2, r3, #5
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	4413      	add	r3, r2
 8005414:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	0151      	lsls	r1, r2, #5
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	440a      	add	r2, r1
 8005422:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005426:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800542a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	015a      	lsls	r2, r3, #5
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	4413      	add	r3, r2
 8005434:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005438:	691a      	ldr	r2, [r3, #16]
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005442:	6939      	ldr	r1, [r7, #16]
 8005444:	0148      	lsls	r0, r1, #5
 8005446:	6979      	ldr	r1, [r7, #20]
 8005448:	4401      	add	r1, r0
 800544a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800544e:	4313      	orrs	r3, r2
 8005450:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005452:	79fb      	ldrb	r3, [r7, #7]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d11e      	bne.n	8005496 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	695b      	ldr	r3, [r3, #20]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d009      	beq.n	8005474 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	015a      	lsls	r2, r3, #5
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	4413      	add	r3, r2
 8005468:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800546c:	461a      	mov	r2, r3
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	015a      	lsls	r2, r3, #5
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	4413      	add	r3, r2
 800547c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	0151      	lsls	r1, r2, #5
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	440a      	add	r2, r1
 800548a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800548e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005492:	6013      	str	r3, [r2, #0]
 8005494:	e097      	b.n	80055c6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	015a      	lsls	r2, r3, #5
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	4413      	add	r3, r2
 800549e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	0151      	lsls	r1, r2, #5
 80054a8:	697a      	ldr	r2, [r7, #20]
 80054aa:	440a      	add	r2, r1
 80054ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054b0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80054b4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	f000 8083 	beq.w	80055c6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	f003 030f 	and.w	r3, r3, #15
 80054d0:	2101      	movs	r1, #1
 80054d2:	fa01 f303 	lsl.w	r3, r1, r3
 80054d6:	6979      	ldr	r1, [r7, #20]
 80054d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80054dc:	4313      	orrs	r3, r2
 80054de:	634b      	str	r3, [r1, #52]	@ 0x34
 80054e0:	e071      	b.n	80055c6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	015a      	lsls	r2, r3, #5
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	4413      	add	r3, r2
 80054ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054ee:	691a      	ldr	r2, [r3, #16]
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	0159      	lsls	r1, r3, #5
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	440b      	add	r3, r1
 80054f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054fc:	4619      	mov	r1, r3
 80054fe:	4b36      	ldr	r3, [pc, #216]	@ (80055d8 <USB_EP0StartXfer+0x2b4>)
 8005500:	4013      	ands	r3, r2
 8005502:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	4413      	add	r3, r2
 800550c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005510:	691a      	ldr	r2, [r3, #16]
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	0159      	lsls	r1, r3, #5
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	440b      	add	r3, r1
 800551a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800551e:	4619      	mov	r1, r3
 8005520:	4b2c      	ldr	r3, [pc, #176]	@ (80055d4 <USB_EP0StartXfer+0x2b0>)
 8005522:	4013      	ands	r3, r2
 8005524:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	699b      	ldr	r3, [r3, #24]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d003      	beq.n	8005536 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	68da      	ldr	r2, [r3, #12]
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	68da      	ldr	r2, [r3, #12]
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	015a      	lsls	r2, r3, #5
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	4413      	add	r3, r2
 8005546:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	693a      	ldr	r2, [r7, #16]
 800554e:	0151      	lsls	r1, r2, #5
 8005550:	697a      	ldr	r2, [r7, #20]
 8005552:	440a      	add	r2, r1
 8005554:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005558:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800555c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	015a      	lsls	r2, r3, #5
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	4413      	add	r3, r2
 8005566:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800556a:	691a      	ldr	r2, [r3, #16]
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	69db      	ldr	r3, [r3, #28]
 8005570:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005574:	6939      	ldr	r1, [r7, #16]
 8005576:	0148      	lsls	r0, r1, #5
 8005578:	6979      	ldr	r1, [r7, #20]
 800557a:	4401      	add	r1, r0
 800557c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005580:	4313      	orrs	r3, r2
 8005582:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005584:	79fb      	ldrb	r3, [r7, #7]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d10d      	bne.n	80055a6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d009      	beq.n	80055a6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	6919      	ldr	r1, [r3, #16]
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	015a      	lsls	r2, r3, #5
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	4413      	add	r3, r2
 800559e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055a2:	460a      	mov	r2, r1
 80055a4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	0151      	lsls	r1, r2, #5
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	440a      	add	r2, r1
 80055bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055c0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80055c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	371c      	adds	r7, #28
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr
 80055d4:	e007ffff 	.word	0xe007ffff
 80055d8:	fff80000 	.word	0xfff80000

080055dc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80055dc:	b480      	push	{r7}
 80055de:	b087      	sub	sp, #28
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80055e6:	2300      	movs	r3, #0
 80055e8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80055ea:	2300      	movs	r3, #0
 80055ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	785b      	ldrb	r3, [r3, #1]
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d14a      	bne.n	8005690 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	015a      	lsls	r2, r3, #5
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	4413      	add	r3, r2
 8005604:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800560e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005612:	f040 8086 	bne.w	8005722 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	015a      	lsls	r2, r3, #5
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	4413      	add	r3, r2
 8005620:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	683a      	ldr	r2, [r7, #0]
 8005628:	7812      	ldrb	r2, [r2, #0]
 800562a:	0151      	lsls	r1, r2, #5
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	440a      	add	r2, r1
 8005630:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005634:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005638:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	015a      	lsls	r2, r3, #5
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	4413      	add	r3, r2
 8005644:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	683a      	ldr	r2, [r7, #0]
 800564c:	7812      	ldrb	r2, [r2, #0]
 800564e:	0151      	lsls	r1, r2, #5
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	440a      	add	r2, r1
 8005654:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005658:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800565c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	3301      	adds	r3, #1
 8005662:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f242 7210 	movw	r2, #10000	@ 0x2710
 800566a:	4293      	cmp	r3, r2
 800566c:	d902      	bls.n	8005674 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	75fb      	strb	r3, [r7, #23]
          break;
 8005672:	e056      	b.n	8005722 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	015a      	lsls	r2, r3, #5
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	4413      	add	r3, r2
 800567e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005688:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800568c:	d0e7      	beq.n	800565e <USB_EPStopXfer+0x82>
 800568e:	e048      	b.n	8005722 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	015a      	lsls	r2, r3, #5
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	4413      	add	r3, r2
 800569a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056a8:	d13b      	bne.n	8005722 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	015a      	lsls	r2, r3, #5
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	4413      	add	r3, r2
 80056b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	683a      	ldr	r2, [r7, #0]
 80056bc:	7812      	ldrb	r2, [r2, #0]
 80056be:	0151      	lsls	r1, r2, #5
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	440a      	add	r2, r1
 80056c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056c8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80056cc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	015a      	lsls	r2, r3, #5
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	4413      	add	r3, r2
 80056d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	683a      	ldr	r2, [r7, #0]
 80056e0:	7812      	ldrb	r2, [r2, #0]
 80056e2:	0151      	lsls	r1, r2, #5
 80056e4:	693a      	ldr	r2, [r7, #16]
 80056e6:	440a      	add	r2, r1
 80056e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80056f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	3301      	adds	r3, #1
 80056f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f242 7210 	movw	r2, #10000	@ 0x2710
 80056fe:	4293      	cmp	r3, r2
 8005700:	d902      	bls.n	8005708 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	75fb      	strb	r3, [r7, #23]
          break;
 8005706:	e00c      	b.n	8005722 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	015a      	lsls	r2, r3, #5
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	4413      	add	r3, r2
 8005712:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800571c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005720:	d0e7      	beq.n	80056f2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005722:	7dfb      	ldrb	r3, [r7, #23]
}
 8005724:	4618      	mov	r0, r3
 8005726:	371c      	adds	r7, #28
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005730:	b480      	push	{r7}
 8005732:	b089      	sub	sp, #36	@ 0x24
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	4611      	mov	r1, r2
 800573c:	461a      	mov	r2, r3
 800573e:	460b      	mov	r3, r1
 8005740:	71fb      	strb	r3, [r7, #7]
 8005742:	4613      	mov	r3, r2
 8005744:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800574e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005752:	2b00      	cmp	r3, #0
 8005754:	d123      	bne.n	800579e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005756:	88bb      	ldrh	r3, [r7, #4]
 8005758:	3303      	adds	r3, #3
 800575a:	089b      	lsrs	r3, r3, #2
 800575c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800575e:	2300      	movs	r3, #0
 8005760:	61bb      	str	r3, [r7, #24]
 8005762:	e018      	b.n	8005796 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005764:	79fb      	ldrb	r3, [r7, #7]
 8005766:	031a      	lsls	r2, r3, #12
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	4413      	add	r3, r2
 800576c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005770:	461a      	mov	r2, r3
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	3301      	adds	r3, #1
 800577c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	3301      	adds	r3, #1
 8005782:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	3301      	adds	r3, #1
 8005788:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	3301      	adds	r3, #1
 800578e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	3301      	adds	r3, #1
 8005794:	61bb      	str	r3, [r7, #24]
 8005796:	69ba      	ldr	r2, [r7, #24]
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	429a      	cmp	r2, r3
 800579c:	d3e2      	bcc.n	8005764 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3724      	adds	r7, #36	@ 0x24
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b08b      	sub	sp, #44	@ 0x2c
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	4613      	mov	r3, r2
 80057b8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80057c2:	88fb      	ldrh	r3, [r7, #6]
 80057c4:	089b      	lsrs	r3, r3, #2
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80057ca:	88fb      	ldrh	r3, [r7, #6]
 80057cc:	f003 0303 	and.w	r3, r3, #3
 80057d0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80057d2:	2300      	movs	r3, #0
 80057d4:	623b      	str	r3, [r7, #32]
 80057d6:	e014      	b.n	8005802 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e2:	601a      	str	r2, [r3, #0]
    pDest++;
 80057e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e6:	3301      	adds	r3, #1
 80057e8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80057ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ec:	3301      	adds	r3, #1
 80057ee:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80057f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f2:	3301      	adds	r3, #1
 80057f4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80057f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f8:	3301      	adds	r3, #1
 80057fa:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80057fc:	6a3b      	ldr	r3, [r7, #32]
 80057fe:	3301      	adds	r3, #1
 8005800:	623b      	str	r3, [r7, #32]
 8005802:	6a3a      	ldr	r2, [r7, #32]
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	429a      	cmp	r2, r3
 8005808:	d3e6      	bcc.n	80057d8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800580a:	8bfb      	ldrh	r3, [r7, #30]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d01e      	beq.n	800584e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005810:	2300      	movs	r3, #0
 8005812:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800581a:	461a      	mov	r2, r3
 800581c:	f107 0310 	add.w	r3, r7, #16
 8005820:	6812      	ldr	r2, [r2, #0]
 8005822:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	6a3b      	ldr	r3, [r7, #32]
 8005828:	b2db      	uxtb	r3, r3
 800582a:	00db      	lsls	r3, r3, #3
 800582c:	fa22 f303 	lsr.w	r3, r2, r3
 8005830:	b2da      	uxtb	r2, r3
 8005832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005834:	701a      	strb	r2, [r3, #0]
      i++;
 8005836:	6a3b      	ldr	r3, [r7, #32]
 8005838:	3301      	adds	r3, #1
 800583a:	623b      	str	r3, [r7, #32]
      pDest++;
 800583c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800583e:	3301      	adds	r3, #1
 8005840:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005842:	8bfb      	ldrh	r3, [r7, #30]
 8005844:	3b01      	subs	r3, #1
 8005846:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005848:	8bfb      	ldrh	r3, [r7, #30]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1ea      	bne.n	8005824 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800584e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005850:	4618      	mov	r0, r3
 8005852:	372c      	adds	r7, #44	@ 0x2c
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	785b      	ldrb	r3, [r3, #1]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d12c      	bne.n	80058d2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	015a      	lsls	r2, r3, #5
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	4413      	add	r3, r2
 8005880:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2b00      	cmp	r3, #0
 8005888:	db12      	blt.n	80058b0 <USB_EPSetStall+0x54>
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00f      	beq.n	80058b0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	015a      	lsls	r2, r3, #5
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	4413      	add	r3, r2
 8005898:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68ba      	ldr	r2, [r7, #8]
 80058a0:	0151      	lsls	r1, r2, #5
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	440a      	add	r2, r1
 80058a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058aa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80058ae:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	015a      	lsls	r2, r3, #5
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	4413      	add	r3, r2
 80058b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68ba      	ldr	r2, [r7, #8]
 80058c0:	0151      	lsls	r1, r2, #5
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	440a      	add	r2, r1
 80058c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80058ce:	6013      	str	r3, [r2, #0]
 80058d0:	e02b      	b.n	800592a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	015a      	lsls	r2, r3, #5
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	4413      	add	r3, r2
 80058da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	db12      	blt.n	800590a <USB_EPSetStall+0xae>
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00f      	beq.n	800590a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	015a      	lsls	r2, r3, #5
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	4413      	add	r3, r2
 80058f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68ba      	ldr	r2, [r7, #8]
 80058fa:	0151      	lsls	r1, r2, #5
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	440a      	add	r2, r1
 8005900:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005904:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005908:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	015a      	lsls	r2, r3, #5
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	4413      	add	r3, r2
 8005912:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68ba      	ldr	r2, [r7, #8]
 800591a:	0151      	lsls	r1, r2, #5
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	440a      	add	r2, r1
 8005920:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005924:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005928:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3714      	adds	r7, #20
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	785b      	ldrb	r3, [r3, #1]
 8005950:	2b01      	cmp	r3, #1
 8005952:	d128      	bne.n	80059a6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	015a      	lsls	r2, r3, #5
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	4413      	add	r3, r2
 800595c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	0151      	lsls	r1, r2, #5
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	440a      	add	r2, r1
 800596a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800596e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005972:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	791b      	ldrb	r3, [r3, #4]
 8005978:	2b03      	cmp	r3, #3
 800597a:	d003      	beq.n	8005984 <USB_EPClearStall+0x4c>
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	791b      	ldrb	r3, [r3, #4]
 8005980:	2b02      	cmp	r3, #2
 8005982:	d138      	bne.n	80059f6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	015a      	lsls	r2, r3, #5
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	4413      	add	r3, r2
 800598c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68ba      	ldr	r2, [r7, #8]
 8005994:	0151      	lsls	r1, r2, #5
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	440a      	add	r2, r1
 800599a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800599e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059a2:	6013      	str	r3, [r2, #0]
 80059a4:	e027      	b.n	80059f6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	015a      	lsls	r2, r3, #5
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	4413      	add	r3, r2
 80059ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68ba      	ldr	r2, [r7, #8]
 80059b6:	0151      	lsls	r1, r2, #5
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	440a      	add	r2, r1
 80059bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059c0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80059c4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	791b      	ldrb	r3, [r3, #4]
 80059ca:	2b03      	cmp	r3, #3
 80059cc:	d003      	beq.n	80059d6 <USB_EPClearStall+0x9e>
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	791b      	ldrb	r3, [r3, #4]
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d10f      	bne.n	80059f6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	015a      	lsls	r2, r3, #5
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	4413      	add	r3, r2
 80059de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68ba      	ldr	r2, [r7, #8]
 80059e6:	0151      	lsls	r1, r2, #5
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	440a      	add	r2, r1
 80059ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059f4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3714      	adds	r7, #20
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a22:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005a26:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	78fb      	ldrb	r3, [r7, #3]
 8005a32:	011b      	lsls	r3, r3, #4
 8005a34:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005a38:	68f9      	ldr	r1, [r7, #12]
 8005a3a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005a42:	2300      	movs	r3, #0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3714      	adds	r7, #20
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b085      	sub	sp, #20
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005a6a:	f023 0303 	bic.w	r3, r3, #3
 8005a6e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a7e:	f023 0302 	bic.w	r3, r3, #2
 8005a82:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3714      	adds	r7, #20
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr

08005a92 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005a92:	b480      	push	{r7}
 8005a94:	b085      	sub	sp, #20
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005aac:	f023 0303 	bic.w	r3, r3, #3
 8005ab0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ac0:	f043 0302 	orr.w	r3, r3, #2
 8005ac4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ac6:	2300      	movs	r3, #0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3714      	adds	r7, #20
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	695b      	ldr	r3, [r3, #20]
 8005ae0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	4013      	ands	r3, r2
 8005aea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005aec:	68fb      	ldr	r3, [r7, #12]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3714      	adds	r7, #20
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr

08005afa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005afa:	b480      	push	{r7}
 8005afc:	b085      	sub	sp, #20
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b16:	69db      	ldr	r3, [r3, #28]
 8005b18:	68ba      	ldr	r2, [r7, #8]
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	0c1b      	lsrs	r3, r3, #16
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3714      	adds	r7, #20
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr

08005b2e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b2e:	b480      	push	{r7}
 8005b30:	b085      	sub	sp, #20
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b4a:	69db      	ldr	r3, [r3, #28]
 8005b4c:	68ba      	ldr	r2, [r7, #8]
 8005b4e:	4013      	ands	r3, r2
 8005b50:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	b29b      	uxth	r3, r3
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3714      	adds	r7, #20
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr

08005b62 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005b62:	b480      	push	{r7}
 8005b64:	b085      	sub	sp, #20
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005b72:	78fb      	ldrb	r3, [r7, #3]
 8005b74:	015a      	lsls	r2, r3, #5
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	4413      	add	r3, r2
 8005b7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	68ba      	ldr	r2, [r7, #8]
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005b90:	68bb      	ldr	r3, [r7, #8]
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3714      	adds	r7, #20
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr

08005b9e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b087      	sub	sp, #28
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
 8005ba6:	460b      	mov	r3, r1
 8005ba8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bc0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005bc2:	78fb      	ldrb	r3, [r7, #3]
 8005bc4:	f003 030f 	and.w	r3, r3, #15
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	fa22 f303 	lsr.w	r3, r2, r3
 8005bce:	01db      	lsls	r3, r3, #7
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	693a      	ldr	r2, [r7, #16]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005bd8:	78fb      	ldrb	r3, [r7, #3]
 8005bda:	015a      	lsls	r2, r3, #5
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	4413      	add	r3, r2
 8005be0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	693a      	ldr	r2, [r7, #16]
 8005be8:	4013      	ands	r3, r2
 8005bea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005bec:	68bb      	ldr	r3, [r7, #8]
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	371c      	adds	r7, #28
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	b083      	sub	sp, #12
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	f003 0301 	and.w	r3, r3, #1
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	370c      	adds	r7, #12
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
	...

08005c18 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c32:	4619      	mov	r1, r3
 8005c34:	4b09      	ldr	r3, [pc, #36]	@ (8005c5c <USB_ActivateSetup+0x44>)
 8005c36:	4013      	ands	r3, r2
 8005c38:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3714      	adds	r7, #20
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr
 8005c5c:	fffff800 	.word	0xfffff800

08005c60 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b087      	sub	sp, #28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	460b      	mov	r3, r1
 8005c6a:	607a      	str	r2, [r7, #4]
 8005c6c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	333c      	adds	r3, #60	@ 0x3c
 8005c76:	3304      	adds	r3, #4
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	4a26      	ldr	r2, [pc, #152]	@ (8005d18 <USB_EP0_OutStart+0xb8>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d90a      	bls.n	8005c9a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c94:	d101      	bne.n	8005c9a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005c96:	2300      	movs	r3, #0
 8005c98:	e037      	b.n	8005d0a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	697a      	ldr	r2, [r7, #20]
 8005cb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cb4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005cb8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	697a      	ldr	r2, [r7, #20]
 8005cc4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cc8:	f043 0318 	orr.w	r3, r3, #24
 8005ccc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cdc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005ce0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005ce2:	7afb      	ldrb	r3, [r7, #11]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d10f      	bne.n	8005d08 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cee:	461a      	mov	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d02:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005d06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	371c      	adds	r7, #28
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop
 8005d18:	4f54300a 	.word	0x4f54300a

08005d1c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b085      	sub	sp, #20
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d24:	2300      	movs	r3, #0
 8005d26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	4a13      	ldr	r2, [pc, #76]	@ (8005d80 <USB_CoreReset+0x64>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d901      	bls.n	8005d3a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e01b      	b.n	8005d72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	daf2      	bge.n	8005d28 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005d42:	2300      	movs	r3, #0
 8005d44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	f043 0201 	orr.w	r2, r3, #1
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	3301      	adds	r3, #1
 8005d56:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	4a09      	ldr	r2, [pc, #36]	@ (8005d80 <USB_CoreReset+0x64>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d901      	bls.n	8005d64 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005d60:	2303      	movs	r3, #3
 8005d62:	e006      	b.n	8005d72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	f003 0301 	and.w	r3, r3, #1
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d0f0      	beq.n	8005d52 <USB_CoreReset+0x36>

  return HAL_OK;
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3714      	adds	r7, #20
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr
 8005d7e:	bf00      	nop
 8005d80:	00030d40 	.word	0x00030d40

08005d84 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005d90:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005d94:	f002 fcfc 	bl	8008790 <malloc>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d109      	bne.n	8005db6 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	32b0      	adds	r2, #176	@ 0xb0
 8005dac:	2100      	movs	r1, #0
 8005dae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005db2:	2302      	movs	r3, #2
 8005db4:	e0d4      	b.n	8005f60 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005db6:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005dba:	2100      	movs	r1, #0
 8005dbc:	68f8      	ldr	r0, [r7, #12]
 8005dbe:	f002 fda5 	bl	800890c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	32b0      	adds	r2, #176	@ 0xb0
 8005dcc:	68f9      	ldr	r1, [r7, #12]
 8005dce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	32b0      	adds	r2, #176	@ 0xb0
 8005ddc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	7c1b      	ldrb	r3, [r3, #16]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d138      	bne.n	8005e60 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005dee:	4b5e      	ldr	r3, [pc, #376]	@ (8005f68 <USBD_CDC_Init+0x1e4>)
 8005df0:	7819      	ldrb	r1, [r3, #0]
 8005df2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005df6:	2202      	movs	r2, #2
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f002 fb26 	bl	800844a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005dfe:	4b5a      	ldr	r3, [pc, #360]	@ (8005f68 <USBD_CDC_Init+0x1e4>)
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	f003 020f 	and.w	r2, r3, #15
 8005e06:	6879      	ldr	r1, [r7, #4]
 8005e08:	4613      	mov	r3, r2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	4413      	add	r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	440b      	add	r3, r1
 8005e12:	3324      	adds	r3, #36	@ 0x24
 8005e14:	2201      	movs	r2, #1
 8005e16:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005e18:	4b54      	ldr	r3, [pc, #336]	@ (8005f6c <USBD_CDC_Init+0x1e8>)
 8005e1a:	7819      	ldrb	r1, [r3, #0]
 8005e1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005e20:	2202      	movs	r2, #2
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f002 fb11 	bl	800844a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005e28:	4b50      	ldr	r3, [pc, #320]	@ (8005f6c <USBD_CDC_Init+0x1e8>)
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	f003 020f 	and.w	r2, r3, #15
 8005e30:	6879      	ldr	r1, [r7, #4]
 8005e32:	4613      	mov	r3, r2
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	4413      	add	r3, r2
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	440b      	add	r3, r1
 8005e3c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005e40:	2201      	movs	r2, #1
 8005e42:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005e44:	4b4a      	ldr	r3, [pc, #296]	@ (8005f70 <USBD_CDC_Init+0x1ec>)
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	f003 020f 	and.w	r2, r3, #15
 8005e4c:	6879      	ldr	r1, [r7, #4]
 8005e4e:	4613      	mov	r3, r2
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	4413      	add	r3, r2
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	440b      	add	r3, r1
 8005e58:	3326      	adds	r3, #38	@ 0x26
 8005e5a:	2210      	movs	r2, #16
 8005e5c:	801a      	strh	r2, [r3, #0]
 8005e5e:	e035      	b.n	8005ecc <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005e60:	4b41      	ldr	r3, [pc, #260]	@ (8005f68 <USBD_CDC_Init+0x1e4>)
 8005e62:	7819      	ldrb	r1, [r3, #0]
 8005e64:	2340      	movs	r3, #64	@ 0x40
 8005e66:	2202      	movs	r2, #2
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f002 faee 	bl	800844a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005e6e:	4b3e      	ldr	r3, [pc, #248]	@ (8005f68 <USBD_CDC_Init+0x1e4>)
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	f003 020f 	and.w	r2, r3, #15
 8005e76:	6879      	ldr	r1, [r7, #4]
 8005e78:	4613      	mov	r3, r2
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	4413      	add	r3, r2
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	440b      	add	r3, r1
 8005e82:	3324      	adds	r3, #36	@ 0x24
 8005e84:	2201      	movs	r2, #1
 8005e86:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005e88:	4b38      	ldr	r3, [pc, #224]	@ (8005f6c <USBD_CDC_Init+0x1e8>)
 8005e8a:	7819      	ldrb	r1, [r3, #0]
 8005e8c:	2340      	movs	r3, #64	@ 0x40
 8005e8e:	2202      	movs	r2, #2
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f002 fada 	bl	800844a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005e96:	4b35      	ldr	r3, [pc, #212]	@ (8005f6c <USBD_CDC_Init+0x1e8>)
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	f003 020f 	and.w	r2, r3, #15
 8005e9e:	6879      	ldr	r1, [r7, #4]
 8005ea0:	4613      	mov	r3, r2
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	4413      	add	r3, r2
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	440b      	add	r3, r1
 8005eaa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005eae:	2201      	movs	r2, #1
 8005eb0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005eb2:	4b2f      	ldr	r3, [pc, #188]	@ (8005f70 <USBD_CDC_Init+0x1ec>)
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	f003 020f 	and.w	r2, r3, #15
 8005eba:	6879      	ldr	r1, [r7, #4]
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	4413      	add	r3, r2
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	440b      	add	r3, r1
 8005ec6:	3326      	adds	r3, #38	@ 0x26
 8005ec8:	2210      	movs	r2, #16
 8005eca:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005ecc:	4b28      	ldr	r3, [pc, #160]	@ (8005f70 <USBD_CDC_Init+0x1ec>)
 8005ece:	7819      	ldrb	r1, [r3, #0]
 8005ed0:	2308      	movs	r3, #8
 8005ed2:	2203      	movs	r2, #3
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f002 fab8 	bl	800844a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005eda:	4b25      	ldr	r3, [pc, #148]	@ (8005f70 <USBD_CDC_Init+0x1ec>)
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	f003 020f 	and.w	r2, r3, #15
 8005ee2:	6879      	ldr	r1, [r7, #4]
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	4413      	add	r3, r2
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	440b      	add	r3, r1
 8005eee:	3324      	adds	r3, #36	@ 0x24
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	33b0      	adds	r3, #176	@ 0xb0
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	4413      	add	r3, r2
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d101      	bne.n	8005f2e <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 8005f2a:	2302      	movs	r3, #2
 8005f2c:	e018      	b.n	8005f60 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	7c1b      	ldrb	r3, [r3, #16]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d10a      	bne.n	8005f4c <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005f36:	4b0d      	ldr	r3, [pc, #52]	@ (8005f6c <USBD_CDC_Init+0x1e8>)
 8005f38:	7819      	ldrb	r1, [r3, #0]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005f40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f002 fb6f 	bl	8008628 <USBD_LL_PrepareReceive>
 8005f4a:	e008      	b.n	8005f5e <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005f4c:	4b07      	ldr	r3, [pc, #28]	@ (8005f6c <USBD_CDC_Init+0x1e8>)
 8005f4e:	7819      	ldrb	r1, [r3, #0]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005f56:	2340      	movs	r3, #64	@ 0x40
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f002 fb65 	bl	8008628 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3710      	adds	r7, #16
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	20000093 	.word	0x20000093
 8005f6c:	20000094 	.word	0x20000094
 8005f70:	20000095 	.word	0x20000095

08005f74 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005f80:	4b3a      	ldr	r3, [pc, #232]	@ (800606c <USBD_CDC_DeInit+0xf8>)
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	4619      	mov	r1, r3
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f002 fa85 	bl	8008496 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005f8c:	4b37      	ldr	r3, [pc, #220]	@ (800606c <USBD_CDC_DeInit+0xf8>)
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	f003 020f 	and.w	r2, r3, #15
 8005f94:	6879      	ldr	r1, [r7, #4]
 8005f96:	4613      	mov	r3, r2
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	4413      	add	r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	440b      	add	r3, r1
 8005fa0:	3324      	adds	r3, #36	@ 0x24
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005fa6:	4b32      	ldr	r3, [pc, #200]	@ (8006070 <USBD_CDC_DeInit+0xfc>)
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	4619      	mov	r1, r3
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f002 fa72 	bl	8008496 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005fb2:	4b2f      	ldr	r3, [pc, #188]	@ (8006070 <USBD_CDC_DeInit+0xfc>)
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	f003 020f 	and.w	r2, r3, #15
 8005fba:	6879      	ldr	r1, [r7, #4]
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	4413      	add	r3, r2
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	440b      	add	r3, r1
 8005fc6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005fca:	2200      	movs	r2, #0
 8005fcc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005fce:	4b29      	ldr	r3, [pc, #164]	@ (8006074 <USBD_CDC_DeInit+0x100>)
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f002 fa5e 	bl	8008496 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005fda:	4b26      	ldr	r3, [pc, #152]	@ (8006074 <USBD_CDC_DeInit+0x100>)
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	f003 020f 	and.w	r2, r3, #15
 8005fe2:	6879      	ldr	r1, [r7, #4]
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4413      	add	r3, r2
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	440b      	add	r3, r1
 8005fee:	3324      	adds	r3, #36	@ 0x24
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005ff4:	4b1f      	ldr	r3, [pc, #124]	@ (8006074 <USBD_CDC_DeInit+0x100>)
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	f003 020f 	and.w	r2, r3, #15
 8005ffc:	6879      	ldr	r1, [r7, #4]
 8005ffe:	4613      	mov	r3, r2
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	4413      	add	r3, r2
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	440b      	add	r3, r1
 8006008:	3326      	adds	r3, #38	@ 0x26
 800600a:	2200      	movs	r2, #0
 800600c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	32b0      	adds	r2, #176	@ 0xb0
 8006018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d01f      	beq.n	8006060 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	33b0      	adds	r3, #176	@ 0xb0
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	4413      	add	r3, r2
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	32b0      	adds	r2, #176	@ 0xb0
 800603e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006042:	4618      	mov	r0, r3
 8006044:	f002 fbac 	bl	80087a0 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	32b0      	adds	r2, #176	@ 0xb0
 8006052:	2100      	movs	r1, #0
 8006054:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3708      	adds	r7, #8
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	20000093 	.word	0x20000093
 8006070:	20000094 	.word	0x20000094
 8006074:	20000095 	.word	0x20000095

08006078 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b086      	sub	sp, #24
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	32b0      	adds	r2, #176	@ 0xb0
 800608c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006090:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006092:	2300      	movs	r3, #0
 8006094:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006096:	2300      	movs	r3, #0
 8006098:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800609a:	2300      	movs	r3, #0
 800609c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d101      	bne.n	80060a8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e0bf      	b.n	8006228 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d050      	beq.n	8006156 <USBD_CDC_Setup+0xde>
 80060b4:	2b20      	cmp	r3, #32
 80060b6:	f040 80af 	bne.w	8006218 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	88db      	ldrh	r3, [r3, #6]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d03a      	beq.n	8006138 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	b25b      	sxtb	r3, r3
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	da1b      	bge.n	8006104 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	33b0      	adds	r3, #176	@ 0xb0
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	4413      	add	r3, r2
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	683a      	ldr	r2, [r7, #0]
 80060e0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80060e2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80060e4:	683a      	ldr	r2, [r7, #0]
 80060e6:	88d2      	ldrh	r2, [r2, #6]
 80060e8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	88db      	ldrh	r3, [r3, #6]
 80060ee:	2b07      	cmp	r3, #7
 80060f0:	bf28      	it	cs
 80060f2:	2307      	movcs	r3, #7
 80060f4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	89fa      	ldrh	r2, [r7, #14]
 80060fa:	4619      	mov	r1, r3
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f001 fd6b 	bl	8007bd8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006102:	e090      	b.n	8006226 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	785a      	ldrb	r2, [r3, #1]
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	88db      	ldrh	r3, [r3, #6]
 8006112:	2b3f      	cmp	r3, #63	@ 0x3f
 8006114:	d803      	bhi.n	800611e <USBD_CDC_Setup+0xa6>
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	88db      	ldrh	r3, [r3, #6]
 800611a:	b2da      	uxtb	r2, r3
 800611c:	e000      	b.n	8006120 <USBD_CDC_Setup+0xa8>
 800611e:	2240      	movs	r2, #64	@ 0x40
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006126:	6939      	ldr	r1, [r7, #16]
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800612e:	461a      	mov	r2, r3
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f001 fd7d 	bl	8007c30 <USBD_CtlPrepareRx>
      break;
 8006136:	e076      	b.n	8006226 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	33b0      	adds	r3, #176	@ 0xb0
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	4413      	add	r3, r2
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	683a      	ldr	r2, [r7, #0]
 800614c:	7850      	ldrb	r0, [r2, #1]
 800614e:	2200      	movs	r2, #0
 8006150:	6839      	ldr	r1, [r7, #0]
 8006152:	4798      	blx	r3
      break;
 8006154:	e067      	b.n	8006226 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	785b      	ldrb	r3, [r3, #1]
 800615a:	2b0b      	cmp	r3, #11
 800615c:	d851      	bhi.n	8006202 <USBD_CDC_Setup+0x18a>
 800615e:	a201      	add	r2, pc, #4	@ (adr r2, 8006164 <USBD_CDC_Setup+0xec>)
 8006160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006164:	08006195 	.word	0x08006195
 8006168:	08006211 	.word	0x08006211
 800616c:	08006203 	.word	0x08006203
 8006170:	08006203 	.word	0x08006203
 8006174:	08006203 	.word	0x08006203
 8006178:	08006203 	.word	0x08006203
 800617c:	08006203 	.word	0x08006203
 8006180:	08006203 	.word	0x08006203
 8006184:	08006203 	.word	0x08006203
 8006188:	08006203 	.word	0x08006203
 800618c:	080061bf 	.word	0x080061bf
 8006190:	080061e9 	.word	0x080061e9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800619a:	b2db      	uxtb	r3, r3
 800619c:	2b03      	cmp	r3, #3
 800619e:	d107      	bne.n	80061b0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80061a0:	f107 030a 	add.w	r3, r7, #10
 80061a4:	2202      	movs	r2, #2
 80061a6:	4619      	mov	r1, r3
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f001 fd15 	bl	8007bd8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80061ae:	e032      	b.n	8006216 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80061b0:	6839      	ldr	r1, [r7, #0]
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f001 fc9f 	bl	8007af6 <USBD_CtlError>
            ret = USBD_FAIL;
 80061b8:	2303      	movs	r3, #3
 80061ba:	75fb      	strb	r3, [r7, #23]
          break;
 80061bc:	e02b      	b.n	8006216 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	2b03      	cmp	r3, #3
 80061c8:	d107      	bne.n	80061da <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80061ca:	f107 030d 	add.w	r3, r7, #13
 80061ce:	2201      	movs	r2, #1
 80061d0:	4619      	mov	r1, r3
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f001 fd00 	bl	8007bd8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80061d8:	e01d      	b.n	8006216 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80061da:	6839      	ldr	r1, [r7, #0]
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f001 fc8a 	bl	8007af6 <USBD_CtlError>
            ret = USBD_FAIL;
 80061e2:	2303      	movs	r3, #3
 80061e4:	75fb      	strb	r3, [r7, #23]
          break;
 80061e6:	e016      	b.n	8006216 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	2b03      	cmp	r3, #3
 80061f2:	d00f      	beq.n	8006214 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80061f4:	6839      	ldr	r1, [r7, #0]
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f001 fc7d 	bl	8007af6 <USBD_CtlError>
            ret = USBD_FAIL;
 80061fc:	2303      	movs	r3, #3
 80061fe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006200:	e008      	b.n	8006214 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006202:	6839      	ldr	r1, [r7, #0]
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f001 fc76 	bl	8007af6 <USBD_CtlError>
          ret = USBD_FAIL;
 800620a:	2303      	movs	r3, #3
 800620c:	75fb      	strb	r3, [r7, #23]
          break;
 800620e:	e002      	b.n	8006216 <USBD_CDC_Setup+0x19e>
          break;
 8006210:	bf00      	nop
 8006212:	e008      	b.n	8006226 <USBD_CDC_Setup+0x1ae>
          break;
 8006214:	bf00      	nop
      }
      break;
 8006216:	e006      	b.n	8006226 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006218:	6839      	ldr	r1, [r7, #0]
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f001 fc6b 	bl	8007af6 <USBD_CtlError>
      ret = USBD_FAIL;
 8006220:	2303      	movs	r3, #3
 8006222:	75fb      	strb	r3, [r7, #23]
      break;
 8006224:	bf00      	nop
  }

  return (uint8_t)ret;
 8006226:	7dfb      	ldrb	r3, [r7, #23]
}
 8006228:	4618      	mov	r0, r3
 800622a:	3718      	adds	r7, #24
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	460b      	mov	r3, r1
 800623a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006242:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	32b0      	adds	r2, #176	@ 0xb0
 800624e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d101      	bne.n	800625a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006256:	2303      	movs	r3, #3
 8006258:	e065      	b.n	8006326 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	32b0      	adds	r2, #176	@ 0xb0
 8006264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006268:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800626a:	78fb      	ldrb	r3, [r7, #3]
 800626c:	f003 020f 	and.w	r2, r3, #15
 8006270:	6879      	ldr	r1, [r7, #4]
 8006272:	4613      	mov	r3, r2
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	4413      	add	r3, r2
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	440b      	add	r3, r1
 800627c:	3318      	adds	r3, #24
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d02f      	beq.n	80062e4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006284:	78fb      	ldrb	r3, [r7, #3]
 8006286:	f003 020f 	and.w	r2, r3, #15
 800628a:	6879      	ldr	r1, [r7, #4]
 800628c:	4613      	mov	r3, r2
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	4413      	add	r3, r2
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	440b      	add	r3, r1
 8006296:	3318      	adds	r3, #24
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	78fb      	ldrb	r3, [r7, #3]
 800629c:	f003 010f 	and.w	r1, r3, #15
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	460b      	mov	r3, r1
 80062a4:	00db      	lsls	r3, r3, #3
 80062a6:	440b      	add	r3, r1
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	4403      	add	r3, r0
 80062ac:	3348      	adds	r3, #72	@ 0x48
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	fbb2 f1f3 	udiv	r1, r2, r3
 80062b4:	fb01 f303 	mul.w	r3, r1, r3
 80062b8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d112      	bne.n	80062e4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80062be:	78fb      	ldrb	r3, [r7, #3]
 80062c0:	f003 020f 	and.w	r2, r3, #15
 80062c4:	6879      	ldr	r1, [r7, #4]
 80062c6:	4613      	mov	r3, r2
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	4413      	add	r3, r2
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	440b      	add	r3, r1
 80062d0:	3318      	adds	r3, #24
 80062d2:	2200      	movs	r2, #0
 80062d4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80062d6:	78f9      	ldrb	r1, [r7, #3]
 80062d8:	2300      	movs	r3, #0
 80062da:	2200      	movs	r2, #0
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f002 f982 	bl	80085e6 <USBD_LL_Transmit>
 80062e2:	e01f      	b.n	8006324 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	33b0      	adds	r3, #176	@ 0xb0
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	4413      	add	r3, r2
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d010      	beq.n	8006324 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	33b0      	adds	r3, #176	@ 0xb0
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4413      	add	r3, r2
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800631a:	68ba      	ldr	r2, [r7, #8]
 800631c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006320:	78fa      	ldrb	r2, [r7, #3]
 8006322:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3710      	adds	r7, #16
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b084      	sub	sp, #16
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
 8006336:	460b      	mov	r3, r1
 8006338:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	32b0      	adds	r2, #176	@ 0xb0
 8006344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006348:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	32b0      	adds	r2, #176	@ 0xb0
 8006354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d101      	bne.n	8006360 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800635c:	2303      	movs	r3, #3
 800635e:	e01a      	b.n	8006396 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006360:	78fb      	ldrb	r3, [r7, #3]
 8006362:	4619      	mov	r1, r3
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f002 f980 	bl	800866a <USBD_LL_GetRxDataSize>
 800636a:	4602      	mov	r2, r0
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	33b0      	adds	r3, #176	@ 0xb0
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	4413      	add	r3, r2
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006390:	4611      	mov	r1, r2
 8006392:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b084      	sub	sp, #16
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	32b0      	adds	r2, #176	@ 0xb0
 80063b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063b4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d101      	bne.n	80063c0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80063bc:	2303      	movs	r3, #3
 80063be:	e024      	b.n	800640a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	33b0      	adds	r3, #176	@ 0xb0
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	4413      	add	r3, r2
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d019      	beq.n	8006408 <USBD_CDC_EP0_RxReady+0x6a>
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80063da:	2bff      	cmp	r3, #255	@ 0xff
 80063dc:	d014      	beq.n	8006408 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	33b0      	adds	r3, #176	@ 0xb0
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	4413      	add	r3, r2
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80063f6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80063fe:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	22ff      	movs	r2, #255	@ 0xff
 8006404:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
	...

08006414 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b086      	sub	sp, #24
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800641c:	2182      	movs	r1, #130	@ 0x82
 800641e:	4818      	ldr	r0, [pc, #96]	@ (8006480 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006420:	f000 fd09 	bl	8006e36 <USBD_GetEpDesc>
 8006424:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006426:	2101      	movs	r1, #1
 8006428:	4815      	ldr	r0, [pc, #84]	@ (8006480 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800642a:	f000 fd04 	bl	8006e36 <USBD_GetEpDesc>
 800642e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006430:	2181      	movs	r1, #129	@ 0x81
 8006432:	4813      	ldr	r0, [pc, #76]	@ (8006480 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006434:	f000 fcff 	bl	8006e36 <USBD_GetEpDesc>
 8006438:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d002      	beq.n	8006446 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	2210      	movs	r2, #16
 8006444:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d006      	beq.n	800645a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	2200      	movs	r2, #0
 8006450:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006454:	711a      	strb	r2, [r3, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d006      	beq.n	800646e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2200      	movs	r2, #0
 8006464:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006468:	711a      	strb	r2, [r3, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2243      	movs	r2, #67	@ 0x43
 8006472:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006474:	4b02      	ldr	r3, [pc, #8]	@ (8006480 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006476:	4618      	mov	r0, r3
 8006478:	3718      	adds	r7, #24
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	20000050 	.word	0x20000050

08006484 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b086      	sub	sp, #24
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800648c:	2182      	movs	r1, #130	@ 0x82
 800648e:	4818      	ldr	r0, [pc, #96]	@ (80064f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006490:	f000 fcd1 	bl	8006e36 <USBD_GetEpDesc>
 8006494:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006496:	2101      	movs	r1, #1
 8006498:	4815      	ldr	r0, [pc, #84]	@ (80064f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800649a:	f000 fccc 	bl	8006e36 <USBD_GetEpDesc>
 800649e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80064a0:	2181      	movs	r1, #129	@ 0x81
 80064a2:	4813      	ldr	r0, [pc, #76]	@ (80064f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80064a4:	f000 fcc7 	bl	8006e36 <USBD_GetEpDesc>
 80064a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d002      	beq.n	80064b6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	2210      	movs	r2, #16
 80064b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d006      	beq.n	80064ca <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	2200      	movs	r2, #0
 80064c0:	711a      	strb	r2, [r3, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f042 0202 	orr.w	r2, r2, #2
 80064c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d006      	beq.n	80064de <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2200      	movs	r2, #0
 80064d4:	711a      	strb	r2, [r3, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f042 0202 	orr.w	r2, r2, #2
 80064dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2243      	movs	r2, #67	@ 0x43
 80064e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80064e4:	4b02      	ldr	r3, [pc, #8]	@ (80064f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3718      	adds	r7, #24
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	20000050 	.word	0x20000050

080064f4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b086      	sub	sp, #24
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80064fc:	2182      	movs	r1, #130	@ 0x82
 80064fe:	4818      	ldr	r0, [pc, #96]	@ (8006560 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006500:	f000 fc99 	bl	8006e36 <USBD_GetEpDesc>
 8006504:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006506:	2101      	movs	r1, #1
 8006508:	4815      	ldr	r0, [pc, #84]	@ (8006560 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800650a:	f000 fc94 	bl	8006e36 <USBD_GetEpDesc>
 800650e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006510:	2181      	movs	r1, #129	@ 0x81
 8006512:	4813      	ldr	r0, [pc, #76]	@ (8006560 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006514:	f000 fc8f 	bl	8006e36 <USBD_GetEpDesc>
 8006518:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d002      	beq.n	8006526 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	2210      	movs	r2, #16
 8006524:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d006      	beq.n	800653a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	2200      	movs	r2, #0
 8006530:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006534:	711a      	strb	r2, [r3, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d006      	beq.n	800654e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2200      	movs	r2, #0
 8006544:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006548:	711a      	strb	r2, [r3, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2243      	movs	r2, #67	@ 0x43
 8006552:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006554:	4b02      	ldr	r3, [pc, #8]	@ (8006560 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006556:	4618      	mov	r0, r3
 8006558:	3718      	adds	r7, #24
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	20000050 	.word	0x20000050

08006564 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	220a      	movs	r2, #10
 8006570:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006572:	4b03      	ldr	r3, [pc, #12]	@ (8006580 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006574:	4618      	mov	r0, r3
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr
 8006580:	2000000c 	.word	0x2000000c

08006584 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d101      	bne.n	8006598 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006594:	2303      	movs	r3, #3
 8006596:	e009      	b.n	80065ac <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	33b0      	adds	r3, #176	@ 0xb0
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	4413      	add	r3, r2
 80065a6:	683a      	ldr	r2, [r7, #0]
 80065a8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b087      	sub	sp, #28
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	32b0      	adds	r2, #176	@ 0xb0
 80065ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065d2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d101      	bne.n	80065de <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80065da:	2303      	movs	r3, #3
 80065dc:	e008      	b.n	80065f0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	68ba      	ldr	r2, [r7, #8]
 80065e2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80065ee:	2300      	movs	r3, #0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	371c      	adds	r7, #28
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b085      	sub	sp, #20
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	32b0      	adds	r2, #176	@ 0xb0
 8006610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006614:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d101      	bne.n	8006620 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800661c:	2303      	movs	r3, #3
 800661e:	e004      	b.n	800662a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	683a      	ldr	r2, [r7, #0]
 8006624:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	3714      	adds	r7, #20
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
	...

08006638 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	32b0      	adds	r2, #176	@ 0xb0
 800664a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800664e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	32b0      	adds	r2, #176	@ 0xb0
 800665a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d101      	bne.n	8006666 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006662:	2303      	movs	r3, #3
 8006664:	e018      	b.n	8006698 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	7c1b      	ldrb	r3, [r3, #16]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d10a      	bne.n	8006684 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800666e:	4b0c      	ldr	r3, [pc, #48]	@ (80066a0 <USBD_CDC_ReceivePacket+0x68>)
 8006670:	7819      	ldrb	r1, [r3, #0]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006678:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f001 ffd3 	bl	8008628 <USBD_LL_PrepareReceive>
 8006682:	e008      	b.n	8006696 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006684:	4b06      	ldr	r3, [pc, #24]	@ (80066a0 <USBD_CDC_ReceivePacket+0x68>)
 8006686:	7819      	ldrb	r1, [r3, #0]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800668e:	2340      	movs	r3, #64	@ 0x40
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f001 ffc9 	bl	8008628 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006696:	2300      	movs	r3, #0
}
 8006698:	4618      	mov	r0, r3
 800669a:	3710      	adds	r7, #16
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}
 80066a0:	20000094 	.word	0x20000094

080066a4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b086      	sub	sp, #24
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	4613      	mov	r3, r2
 80066b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d101      	bne.n	80066bc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80066b8:	2303      	movs	r3, #3
 80066ba:	e01f      	b.n	80066fc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2200      	movs	r2, #0
 80066c0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d003      	beq.n	80066e2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	68ba      	ldr	r2, [r7, #8]
 80066de:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2201      	movs	r2, #1
 80066e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	79fa      	ldrb	r2, [r7, #7]
 80066ee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f001 fe3d 	bl	8008370 <USBD_LL_Init>
 80066f6:	4603      	mov	r3, r0
 80066f8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80066fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3718      	adds	r7, #24
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800670e:	2300      	movs	r3, #0
 8006710:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d101      	bne.n	800671c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006718:	2303      	movs	r3, #3
 800671a:	e025      	b.n	8006768 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	683a      	ldr	r2, [r7, #0]
 8006720:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	32ae      	adds	r2, #174	@ 0xae
 800672e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006734:	2b00      	cmp	r3, #0
 8006736:	d00f      	beq.n	8006758 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	32ae      	adds	r2, #174	@ 0xae
 8006742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006748:	f107 020e 	add.w	r2, r7, #14
 800674c:	4610      	mov	r0, r2
 800674e:	4798      	blx	r3
 8006750:	4602      	mov	r2, r0
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800675e:	1c5a      	adds	r2, r3, #1
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3710      	adds	r7, #16
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f001 fe4b 	bl	8008414 <USBD_LL_Start>
 800677e:	4603      	mov	r3, r0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3708      	adds	r7, #8
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006790:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006792:	4618      	mov	r0, r3
 8006794:	370c      	adds	r7, #12
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr

0800679e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800679e:	b580      	push	{r7, lr}
 80067a0:	b084      	sub	sp, #16
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
 80067a6:	460b      	mov	r3, r1
 80067a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80067aa:	2300      	movs	r3, #0
 80067ac:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d009      	beq.n	80067cc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	78fa      	ldrb	r2, [r7, #3]
 80067c2:	4611      	mov	r1, r2
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	4798      	blx	r3
 80067c8:	4603      	mov	r3, r0
 80067ca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80067cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b084      	sub	sp, #16
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
 80067de:	460b      	mov	r3, r1
 80067e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80067e2:	2300      	movs	r3, #0
 80067e4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	78fa      	ldrb	r2, [r7, #3]
 80067f0:	4611      	mov	r1, r2
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	4798      	blx	r3
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d001      	beq.n	8006800 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80067fc:	2303      	movs	r3, #3
 80067fe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006800:	7bfb      	ldrb	r3, [r7, #15]
}
 8006802:	4618      	mov	r0, r3
 8006804:	3710      	adds	r7, #16
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}

0800680a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800680a:	b580      	push	{r7, lr}
 800680c:	b084      	sub	sp, #16
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
 8006812:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800681a:	6839      	ldr	r1, [r7, #0]
 800681c:	4618      	mov	r0, r3
 800681e:	f001 f930 	bl	8007a82 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2201      	movs	r2, #1
 8006826:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006830:	461a      	mov	r2, r3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800683e:	f003 031f 	and.w	r3, r3, #31
 8006842:	2b02      	cmp	r3, #2
 8006844:	d01a      	beq.n	800687c <USBD_LL_SetupStage+0x72>
 8006846:	2b02      	cmp	r3, #2
 8006848:	d822      	bhi.n	8006890 <USBD_LL_SetupStage+0x86>
 800684a:	2b00      	cmp	r3, #0
 800684c:	d002      	beq.n	8006854 <USBD_LL_SetupStage+0x4a>
 800684e:	2b01      	cmp	r3, #1
 8006850:	d00a      	beq.n	8006868 <USBD_LL_SetupStage+0x5e>
 8006852:	e01d      	b.n	8006890 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800685a:	4619      	mov	r1, r3
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 fb5d 	bl	8006f1c <USBD_StdDevReq>
 8006862:	4603      	mov	r3, r0
 8006864:	73fb      	strb	r3, [r7, #15]
      break;
 8006866:	e020      	b.n	80068aa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800686e:	4619      	mov	r1, r3
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 fbc5 	bl	8007000 <USBD_StdItfReq>
 8006876:	4603      	mov	r3, r0
 8006878:	73fb      	strb	r3, [r7, #15]
      break;
 800687a:	e016      	b.n	80068aa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006882:	4619      	mov	r1, r3
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 fc27 	bl	80070d8 <USBD_StdEPReq>
 800688a:	4603      	mov	r3, r0
 800688c:	73fb      	strb	r3, [r7, #15]
      break;
 800688e:	e00c      	b.n	80068aa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006896:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800689a:	b2db      	uxtb	r3, r3
 800689c:	4619      	mov	r1, r3
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f001 fe18 	bl	80084d4 <USBD_LL_StallEP>
 80068a4:	4603      	mov	r3, r0
 80068a6:	73fb      	strb	r3, [r7, #15]
      break;
 80068a8:	bf00      	nop
  }

  return ret;
 80068aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3710      	adds	r7, #16
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b086      	sub	sp, #24
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	460b      	mov	r3, r1
 80068be:	607a      	str	r2, [r7, #4]
 80068c0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80068c2:	2300      	movs	r3, #0
 80068c4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80068c6:	7afb      	ldrb	r3, [r7, #11]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d16e      	bne.n	80069aa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80068d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80068da:	2b03      	cmp	r3, #3
 80068dc:	f040 8098 	bne.w	8006a10 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	689a      	ldr	r2, [r3, #8]
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d913      	bls.n	8006914 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	689a      	ldr	r2, [r3, #8]
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	1ad2      	subs	r2, r2, r3
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	68da      	ldr	r2, [r3, #12]
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	4293      	cmp	r3, r2
 8006904:	bf28      	it	cs
 8006906:	4613      	movcs	r3, r2
 8006908:	461a      	mov	r2, r3
 800690a:	6879      	ldr	r1, [r7, #4]
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	f001 f9ac 	bl	8007c6a <USBD_CtlContinueRx>
 8006912:	e07d      	b.n	8006a10 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800691a:	f003 031f 	and.w	r3, r3, #31
 800691e:	2b02      	cmp	r3, #2
 8006920:	d014      	beq.n	800694c <USBD_LL_DataOutStage+0x98>
 8006922:	2b02      	cmp	r3, #2
 8006924:	d81d      	bhi.n	8006962 <USBD_LL_DataOutStage+0xae>
 8006926:	2b00      	cmp	r3, #0
 8006928:	d002      	beq.n	8006930 <USBD_LL_DataOutStage+0x7c>
 800692a:	2b01      	cmp	r3, #1
 800692c:	d003      	beq.n	8006936 <USBD_LL_DataOutStage+0x82>
 800692e:	e018      	b.n	8006962 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006930:	2300      	movs	r3, #0
 8006932:	75bb      	strb	r3, [r7, #22]
            break;
 8006934:	e018      	b.n	8006968 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800693c:	b2db      	uxtb	r3, r3
 800693e:	4619      	mov	r1, r3
 8006940:	68f8      	ldr	r0, [r7, #12]
 8006942:	f000 fa5e 	bl	8006e02 <USBD_CoreFindIF>
 8006946:	4603      	mov	r3, r0
 8006948:	75bb      	strb	r3, [r7, #22]
            break;
 800694a:	e00d      	b.n	8006968 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006952:	b2db      	uxtb	r3, r3
 8006954:	4619      	mov	r1, r3
 8006956:	68f8      	ldr	r0, [r7, #12]
 8006958:	f000 fa60 	bl	8006e1c <USBD_CoreFindEP>
 800695c:	4603      	mov	r3, r0
 800695e:	75bb      	strb	r3, [r7, #22]
            break;
 8006960:	e002      	b.n	8006968 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006962:	2300      	movs	r3, #0
 8006964:	75bb      	strb	r3, [r7, #22]
            break;
 8006966:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006968:	7dbb      	ldrb	r3, [r7, #22]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d119      	bne.n	80069a2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006974:	b2db      	uxtb	r3, r3
 8006976:	2b03      	cmp	r3, #3
 8006978:	d113      	bne.n	80069a2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800697a:	7dba      	ldrb	r2, [r7, #22]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	32ae      	adds	r2, #174	@ 0xae
 8006980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00b      	beq.n	80069a2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800698a:	7dba      	ldrb	r2, [r7, #22]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006992:	7dba      	ldrb	r2, [r7, #22]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	32ae      	adds	r2, #174	@ 0xae
 8006998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	f001 f972 	bl	8007c8c <USBD_CtlSendStatus>
 80069a8:	e032      	b.n	8006a10 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80069aa:	7afb      	ldrb	r3, [r7, #11]
 80069ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	4619      	mov	r1, r3
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f000 fa31 	bl	8006e1c <USBD_CoreFindEP>
 80069ba:	4603      	mov	r3, r0
 80069bc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80069be:	7dbb      	ldrb	r3, [r7, #22]
 80069c0:	2bff      	cmp	r3, #255	@ 0xff
 80069c2:	d025      	beq.n	8006a10 <USBD_LL_DataOutStage+0x15c>
 80069c4:	7dbb      	ldrb	r3, [r7, #22]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d122      	bne.n	8006a10 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	2b03      	cmp	r3, #3
 80069d4:	d117      	bne.n	8006a06 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80069d6:	7dba      	ldrb	r2, [r7, #22]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	32ae      	adds	r2, #174	@ 0xae
 80069dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069e0:	699b      	ldr	r3, [r3, #24]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00f      	beq.n	8006a06 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80069e6:	7dba      	ldrb	r2, [r7, #22]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80069ee:	7dba      	ldrb	r2, [r7, #22]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	32ae      	adds	r2, #174	@ 0xae
 80069f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	7afa      	ldrb	r2, [r7, #11]
 80069fc:	4611      	mov	r1, r2
 80069fe:	68f8      	ldr	r0, [r7, #12]
 8006a00:	4798      	blx	r3
 8006a02:	4603      	mov	r3, r0
 8006a04:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006a06:	7dfb      	ldrb	r3, [r7, #23]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d001      	beq.n	8006a10 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006a0c:	7dfb      	ldrb	r3, [r7, #23]
 8006a0e:	e000      	b.n	8006a12 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3718      	adds	r7, #24
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}

08006a1a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	b086      	sub	sp, #24
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	60f8      	str	r0, [r7, #12]
 8006a22:	460b      	mov	r3, r1
 8006a24:	607a      	str	r2, [r7, #4]
 8006a26:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006a28:	7afb      	ldrb	r3, [r7, #11]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d16f      	bne.n	8006b0e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	3314      	adds	r3, #20
 8006a32:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d15a      	bne.n	8006af4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	689a      	ldr	r2, [r3, #8]
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d914      	bls.n	8006a74 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	689a      	ldr	r2, [r3, #8]
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	1ad2      	subs	r2, r2, r3
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	6879      	ldr	r1, [r7, #4]
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	f001 f8d4 	bl	8007c0e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a66:	2300      	movs	r3, #0
 8006a68:	2200      	movs	r2, #0
 8006a6a:	2100      	movs	r1, #0
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f001 fddb 	bl	8008628 <USBD_LL_PrepareReceive>
 8006a72:	e03f      	b.n	8006af4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	68da      	ldr	r2, [r3, #12]
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d11c      	bne.n	8006aba <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	685a      	ldr	r2, [r3, #4]
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d316      	bcc.n	8006aba <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	685a      	ldr	r2, [r3, #4]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d20f      	bcs.n	8006aba <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	2100      	movs	r1, #0
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	f001 f8b5 	bl	8007c0e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006aac:	2300      	movs	r3, #0
 8006aae:	2200      	movs	r2, #0
 8006ab0:	2100      	movs	r1, #0
 8006ab2:	68f8      	ldr	r0, [r7, #12]
 8006ab4:	f001 fdb8 	bl	8008628 <USBD_LL_PrepareReceive>
 8006ab8:	e01c      	b.n	8006af4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	2b03      	cmp	r3, #3
 8006ac4:	d10f      	bne.n	8006ae6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d009      	beq.n	8006ae6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	68f8      	ldr	r0, [r7, #12]
 8006ae4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ae6:	2180      	movs	r1, #128	@ 0x80
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f001 fcf3 	bl	80084d4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	f001 f8df 	bl	8007cb2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d03a      	beq.n	8006b74 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006afe:	68f8      	ldr	r0, [r7, #12]
 8006b00:	f7ff fe42 	bl	8006788 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006b0c:	e032      	b.n	8006b74 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006b0e:	7afb      	ldrb	r3, [r7, #11]
 8006b10:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	4619      	mov	r1, r3
 8006b18:	68f8      	ldr	r0, [r7, #12]
 8006b1a:	f000 f97f 	bl	8006e1c <USBD_CoreFindEP>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b22:	7dfb      	ldrb	r3, [r7, #23]
 8006b24:	2bff      	cmp	r3, #255	@ 0xff
 8006b26:	d025      	beq.n	8006b74 <USBD_LL_DataInStage+0x15a>
 8006b28:	7dfb      	ldrb	r3, [r7, #23]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d122      	bne.n	8006b74 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	2b03      	cmp	r3, #3
 8006b38:	d11c      	bne.n	8006b74 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006b3a:	7dfa      	ldrb	r2, [r7, #23]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	32ae      	adds	r2, #174	@ 0xae
 8006b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b44:	695b      	ldr	r3, [r3, #20]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d014      	beq.n	8006b74 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006b4a:	7dfa      	ldrb	r2, [r7, #23]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006b52:	7dfa      	ldrb	r2, [r7, #23]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	32ae      	adds	r2, #174	@ 0xae
 8006b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b5c:	695b      	ldr	r3, [r3, #20]
 8006b5e:	7afa      	ldrb	r2, [r7, #11]
 8006b60:	4611      	mov	r1, r2
 8006b62:	68f8      	ldr	r0, [r7, #12]
 8006b64:	4798      	blx	r3
 8006b66:	4603      	mov	r3, r0
 8006b68:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006b6a:	7dbb      	ldrb	r3, [r7, #22]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d001      	beq.n	8006b74 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006b70:	7dbb      	ldrb	r3, [r7, #22]
 8006b72:	e000      	b.n	8006b76 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3718      	adds	r7, #24
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b084      	sub	sp, #16
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b86:	2300      	movs	r3, #0
 8006b88:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d014      	beq.n	8006be4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d00e      	beq.n	8006be4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	6852      	ldr	r2, [r2, #4]
 8006bd2:	b2d2      	uxtb	r2, r2
 8006bd4:	4611      	mov	r1, r2
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	4798      	blx	r3
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d001      	beq.n	8006be4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006be0:	2303      	movs	r3, #3
 8006be2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006be4:	2340      	movs	r3, #64	@ 0x40
 8006be6:	2200      	movs	r2, #0
 8006be8:	2100      	movs	r1, #0
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f001 fc2d 	bl	800844a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2240      	movs	r2, #64	@ 0x40
 8006bfc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c00:	2340      	movs	r3, #64	@ 0x40
 8006c02:	2200      	movs	r2, #0
 8006c04:	2180      	movs	r1, #128	@ 0x80
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f001 fc1f 	bl	800844a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2240      	movs	r2, #64	@ 0x40
 8006c16:	621a      	str	r2, [r3, #32]

  return ret;
 8006c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3710      	adds	r7, #16
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}

08006c22 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006c22:	b480      	push	{r7}
 8006c24:	b083      	sub	sp, #12
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	78fa      	ldrb	r2, [r7, #3]
 8006c32:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006c34:	2300      	movs	r3, #0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	370c      	adds	r7, #12
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr

08006c42 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006c42:	b480      	push	{r7}
 8006c44:	b083      	sub	sp, #12
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c50:	b2da      	uxtb	r2, r3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2204      	movs	r2, #4
 8006c5c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	370c      	adds	r7, #12
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr

08006c6e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006c6e:	b480      	push	{r7}
 8006c70:	b083      	sub	sp, #12
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	2b04      	cmp	r3, #4
 8006c80:	d106      	bne.n	8006c90 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006c88:	b2da      	uxtb	r2, r3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	370c      	adds	r7, #12
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr

08006c9e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b082      	sub	sp, #8
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	2b03      	cmp	r3, #3
 8006cb0:	d110      	bne.n	8006cd4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d00b      	beq.n	8006cd4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cc2:	69db      	ldr	r3, [r3, #28]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d005      	beq.n	8006cd4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cce:	69db      	ldr	r3, [r3, #28]
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3708      	adds	r7, #8
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}

08006cde <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006cde:	b580      	push	{r7, lr}
 8006ce0:	b082      	sub	sp, #8
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	32ae      	adds	r2, #174	@ 0xae
 8006cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d101      	bne.n	8006d00 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006cfc:	2303      	movs	r3, #3
 8006cfe:	e01c      	b.n	8006d3a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	2b03      	cmp	r3, #3
 8006d0a:	d115      	bne.n	8006d38 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	32ae      	adds	r2, #174	@ 0xae
 8006d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d1a:	6a1b      	ldr	r3, [r3, #32]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d00b      	beq.n	8006d38 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	32ae      	adds	r2, #174	@ 0xae
 8006d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d2e:	6a1b      	ldr	r3, [r3, #32]
 8006d30:	78fa      	ldrb	r2, [r7, #3]
 8006d32:	4611      	mov	r1, r2
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3708      	adds	r7, #8
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}

08006d42 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006d42:	b580      	push	{r7, lr}
 8006d44:	b082      	sub	sp, #8
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
 8006d4a:	460b      	mov	r3, r1
 8006d4c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	32ae      	adds	r2, #174	@ 0xae
 8006d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d101      	bne.n	8006d64 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006d60:	2303      	movs	r3, #3
 8006d62:	e01c      	b.n	8006d9e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	2b03      	cmp	r3, #3
 8006d6e:	d115      	bne.n	8006d9c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	32ae      	adds	r2, #174	@ 0xae
 8006d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d00b      	beq.n	8006d9c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	32ae      	adds	r2, #174	@ 0xae
 8006d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d94:	78fa      	ldrb	r2, [r7, #3]
 8006d96:	4611      	mov	r1, r2
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d9c:	2300      	movs	r3, #0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3708      	adds	r7, #8
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006da6:	b480      	push	{r7}
 8006da8:	b083      	sub	sp, #12
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d00e      	beq.n	8006df8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	6852      	ldr	r2, [r2, #4]
 8006de6:	b2d2      	uxtb	r2, r2
 8006de8:	4611      	mov	r1, r2
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	4798      	blx	r3
 8006dee:	4603      	mov	r3, r0
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d001      	beq.n	8006df8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006df4:	2303      	movs	r3, #3
 8006df6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3710      	adds	r7, #16
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006e02:	b480      	push	{r7}
 8006e04:	b083      	sub	sp, #12
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
 8006e0a:	460b      	mov	r3, r1
 8006e0c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006e0e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	460b      	mov	r3, r1
 8006e26:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006e28:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	370c      	adds	r7, #12
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr

08006e36 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b086      	sub	sp, #24
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
 8006e3e:	460b      	mov	r3, r1
 8006e40:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	885b      	ldrh	r3, [r3, #2]
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	7812      	ldrb	r2, [r2, #0]
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d91f      	bls.n	8006e9c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006e62:	e013      	b.n	8006e8c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006e64:	f107 030a 	add.w	r3, r7, #10
 8006e68:	4619      	mov	r1, r3
 8006e6a:	6978      	ldr	r0, [r7, #20]
 8006e6c:	f000 f81b 	bl	8006ea6 <USBD_GetNextDesc>
 8006e70:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	785b      	ldrb	r3, [r3, #1]
 8006e76:	2b05      	cmp	r3, #5
 8006e78:	d108      	bne.n	8006e8c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	789b      	ldrb	r3, [r3, #2]
 8006e82:	78fa      	ldrb	r2, [r7, #3]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d008      	beq.n	8006e9a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	885b      	ldrh	r3, [r3, #2]
 8006e90:	b29a      	uxth	r2, r3
 8006e92:	897b      	ldrh	r3, [r7, #10]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d8e5      	bhi.n	8006e64 <USBD_GetEpDesc+0x2e>
 8006e98:	e000      	b.n	8006e9c <USBD_GetEpDesc+0x66>
          break;
 8006e9a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006e9c:	693b      	ldr	r3, [r7, #16]
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3718      	adds	r7, #24
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}

08006ea6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006ea6:	b480      	push	{r7}
 8006ea8:	b085      	sub	sp, #20
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
 8006eae:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	881b      	ldrh	r3, [r3, #0]
 8006eb8:	68fa      	ldr	r2, [r7, #12]
 8006eba:	7812      	ldrb	r2, [r2, #0]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	461a      	mov	r2, r3
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4413      	add	r3, r2
 8006ece:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3714      	adds	r7, #20
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr

08006ede <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006ede:	b480      	push	{r7}
 8006ee0:	b087      	sub	sp, #28
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006efc:	8a3b      	ldrh	r3, [r7, #16]
 8006efe:	021b      	lsls	r3, r3, #8
 8006f00:	b21a      	sxth	r2, r3
 8006f02:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	b21b      	sxth	r3, r3
 8006f0a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006f0c:	89fb      	ldrh	r3, [r7, #14]
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	371c      	adds	r7, #28
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr
	...

08006f1c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f26:	2300      	movs	r3, #0
 8006f28:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006f32:	2b40      	cmp	r3, #64	@ 0x40
 8006f34:	d005      	beq.n	8006f42 <USBD_StdDevReq+0x26>
 8006f36:	2b40      	cmp	r3, #64	@ 0x40
 8006f38:	d857      	bhi.n	8006fea <USBD_StdDevReq+0xce>
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00f      	beq.n	8006f5e <USBD_StdDevReq+0x42>
 8006f3e:	2b20      	cmp	r3, #32
 8006f40:	d153      	bne.n	8006fea <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	32ae      	adds	r2, #174	@ 0xae
 8006f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	6839      	ldr	r1, [r7, #0]
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	4798      	blx	r3
 8006f58:	4603      	mov	r3, r0
 8006f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8006f5c:	e04a      	b.n	8006ff4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	785b      	ldrb	r3, [r3, #1]
 8006f62:	2b09      	cmp	r3, #9
 8006f64:	d83b      	bhi.n	8006fde <USBD_StdDevReq+0xc2>
 8006f66:	a201      	add	r2, pc, #4	@ (adr r2, 8006f6c <USBD_StdDevReq+0x50>)
 8006f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f6c:	08006fc1 	.word	0x08006fc1
 8006f70:	08006fd5 	.word	0x08006fd5
 8006f74:	08006fdf 	.word	0x08006fdf
 8006f78:	08006fcb 	.word	0x08006fcb
 8006f7c:	08006fdf 	.word	0x08006fdf
 8006f80:	08006f9f 	.word	0x08006f9f
 8006f84:	08006f95 	.word	0x08006f95
 8006f88:	08006fdf 	.word	0x08006fdf
 8006f8c:	08006fb7 	.word	0x08006fb7
 8006f90:	08006fa9 	.word	0x08006fa9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006f94:	6839      	ldr	r1, [r7, #0]
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 fa3c 	bl	8007414 <USBD_GetDescriptor>
          break;
 8006f9c:	e024      	b.n	8006fe8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006f9e:	6839      	ldr	r1, [r7, #0]
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 fbcb 	bl	800773c <USBD_SetAddress>
          break;
 8006fa6:	e01f      	b.n	8006fe8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006fa8:	6839      	ldr	r1, [r7, #0]
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 fc0a 	bl	80077c4 <USBD_SetConfig>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	73fb      	strb	r3, [r7, #15]
          break;
 8006fb4:	e018      	b.n	8006fe8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006fb6:	6839      	ldr	r1, [r7, #0]
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 fcad 	bl	8007918 <USBD_GetConfig>
          break;
 8006fbe:	e013      	b.n	8006fe8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006fc0:	6839      	ldr	r1, [r7, #0]
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 fcde 	bl	8007984 <USBD_GetStatus>
          break;
 8006fc8:	e00e      	b.n	8006fe8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006fca:	6839      	ldr	r1, [r7, #0]
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 fd0d 	bl	80079ec <USBD_SetFeature>
          break;
 8006fd2:	e009      	b.n	8006fe8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006fd4:	6839      	ldr	r1, [r7, #0]
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 fd31 	bl	8007a3e <USBD_ClrFeature>
          break;
 8006fdc:	e004      	b.n	8006fe8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006fde:	6839      	ldr	r1, [r7, #0]
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 fd88 	bl	8007af6 <USBD_CtlError>
          break;
 8006fe6:	bf00      	nop
      }
      break;
 8006fe8:	e004      	b.n	8006ff4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006fea:	6839      	ldr	r1, [r7, #0]
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 fd82 	bl	8007af6 <USBD_CtlError>
      break;
 8006ff2:	bf00      	nop
  }

  return ret;
 8006ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3710      	adds	r7, #16
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop

08007000 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800700a:	2300      	movs	r3, #0
 800700c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007016:	2b40      	cmp	r3, #64	@ 0x40
 8007018:	d005      	beq.n	8007026 <USBD_StdItfReq+0x26>
 800701a:	2b40      	cmp	r3, #64	@ 0x40
 800701c:	d852      	bhi.n	80070c4 <USBD_StdItfReq+0xc4>
 800701e:	2b00      	cmp	r3, #0
 8007020:	d001      	beq.n	8007026 <USBD_StdItfReq+0x26>
 8007022:	2b20      	cmp	r3, #32
 8007024:	d14e      	bne.n	80070c4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800702c:	b2db      	uxtb	r3, r3
 800702e:	3b01      	subs	r3, #1
 8007030:	2b02      	cmp	r3, #2
 8007032:	d840      	bhi.n	80070b6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	889b      	ldrh	r3, [r3, #4]
 8007038:	b2db      	uxtb	r3, r3
 800703a:	2b01      	cmp	r3, #1
 800703c:	d836      	bhi.n	80070ac <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	889b      	ldrh	r3, [r3, #4]
 8007042:	b2db      	uxtb	r3, r3
 8007044:	4619      	mov	r1, r3
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f7ff fedb 	bl	8006e02 <USBD_CoreFindIF>
 800704c:	4603      	mov	r3, r0
 800704e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007050:	7bbb      	ldrb	r3, [r7, #14]
 8007052:	2bff      	cmp	r3, #255	@ 0xff
 8007054:	d01d      	beq.n	8007092 <USBD_StdItfReq+0x92>
 8007056:	7bbb      	ldrb	r3, [r7, #14]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d11a      	bne.n	8007092 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800705c:	7bba      	ldrb	r2, [r7, #14]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	32ae      	adds	r2, #174	@ 0xae
 8007062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00f      	beq.n	800708c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800706c:	7bba      	ldrb	r2, [r7, #14]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007074:	7bba      	ldrb	r2, [r7, #14]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	32ae      	adds	r2, #174	@ 0xae
 800707a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	6839      	ldr	r1, [r7, #0]
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	4798      	blx	r3
 8007086:	4603      	mov	r3, r0
 8007088:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800708a:	e004      	b.n	8007096 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800708c:	2303      	movs	r3, #3
 800708e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007090:	e001      	b.n	8007096 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007092:	2303      	movs	r3, #3
 8007094:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	88db      	ldrh	r3, [r3, #6]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d110      	bne.n	80070c0 <USBD_StdItfReq+0xc0>
 800709e:	7bfb      	ldrb	r3, [r7, #15]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d10d      	bne.n	80070c0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 fdf1 	bl	8007c8c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80070aa:	e009      	b.n	80070c0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80070ac:	6839      	ldr	r1, [r7, #0]
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 fd21 	bl	8007af6 <USBD_CtlError>
          break;
 80070b4:	e004      	b.n	80070c0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80070b6:	6839      	ldr	r1, [r7, #0]
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 fd1c 	bl	8007af6 <USBD_CtlError>
          break;
 80070be:	e000      	b.n	80070c2 <USBD_StdItfReq+0xc2>
          break;
 80070c0:	bf00      	nop
      }
      break;
 80070c2:	e004      	b.n	80070ce <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80070c4:	6839      	ldr	r1, [r7, #0]
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 fd15 	bl	8007af6 <USBD_CtlError>
      break;
 80070cc:	bf00      	nop
  }

  return ret;
 80070ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3710      	adds	r7, #16
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80070e2:	2300      	movs	r3, #0
 80070e4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	889b      	ldrh	r3, [r3, #4]
 80070ea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80070f4:	2b40      	cmp	r3, #64	@ 0x40
 80070f6:	d007      	beq.n	8007108 <USBD_StdEPReq+0x30>
 80070f8:	2b40      	cmp	r3, #64	@ 0x40
 80070fa:	f200 817f 	bhi.w	80073fc <USBD_StdEPReq+0x324>
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d02a      	beq.n	8007158 <USBD_StdEPReq+0x80>
 8007102:	2b20      	cmp	r3, #32
 8007104:	f040 817a 	bne.w	80073fc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007108:	7bbb      	ldrb	r3, [r7, #14]
 800710a:	4619      	mov	r1, r3
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f7ff fe85 	bl	8006e1c <USBD_CoreFindEP>
 8007112:	4603      	mov	r3, r0
 8007114:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007116:	7b7b      	ldrb	r3, [r7, #13]
 8007118:	2bff      	cmp	r3, #255	@ 0xff
 800711a:	f000 8174 	beq.w	8007406 <USBD_StdEPReq+0x32e>
 800711e:	7b7b      	ldrb	r3, [r7, #13]
 8007120:	2b00      	cmp	r3, #0
 8007122:	f040 8170 	bne.w	8007406 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007126:	7b7a      	ldrb	r2, [r7, #13]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800712e:	7b7a      	ldrb	r2, [r7, #13]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	32ae      	adds	r2, #174	@ 0xae
 8007134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	2b00      	cmp	r3, #0
 800713c:	f000 8163 	beq.w	8007406 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007140:	7b7a      	ldrb	r2, [r7, #13]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	32ae      	adds	r2, #174	@ 0xae
 8007146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	6839      	ldr	r1, [r7, #0]
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	4798      	blx	r3
 8007152:	4603      	mov	r3, r0
 8007154:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007156:	e156      	b.n	8007406 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	785b      	ldrb	r3, [r3, #1]
 800715c:	2b03      	cmp	r3, #3
 800715e:	d008      	beq.n	8007172 <USBD_StdEPReq+0x9a>
 8007160:	2b03      	cmp	r3, #3
 8007162:	f300 8145 	bgt.w	80073f0 <USBD_StdEPReq+0x318>
 8007166:	2b00      	cmp	r3, #0
 8007168:	f000 809b 	beq.w	80072a2 <USBD_StdEPReq+0x1ca>
 800716c:	2b01      	cmp	r3, #1
 800716e:	d03c      	beq.n	80071ea <USBD_StdEPReq+0x112>
 8007170:	e13e      	b.n	80073f0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007178:	b2db      	uxtb	r3, r3
 800717a:	2b02      	cmp	r3, #2
 800717c:	d002      	beq.n	8007184 <USBD_StdEPReq+0xac>
 800717e:	2b03      	cmp	r3, #3
 8007180:	d016      	beq.n	80071b0 <USBD_StdEPReq+0xd8>
 8007182:	e02c      	b.n	80071de <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007184:	7bbb      	ldrb	r3, [r7, #14]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00d      	beq.n	80071a6 <USBD_StdEPReq+0xce>
 800718a:	7bbb      	ldrb	r3, [r7, #14]
 800718c:	2b80      	cmp	r3, #128	@ 0x80
 800718e:	d00a      	beq.n	80071a6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007190:	7bbb      	ldrb	r3, [r7, #14]
 8007192:	4619      	mov	r1, r3
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f001 f99d 	bl	80084d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800719a:	2180      	movs	r1, #128	@ 0x80
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f001 f999 	bl	80084d4 <USBD_LL_StallEP>
 80071a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80071a4:	e020      	b.n	80071e8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80071a6:	6839      	ldr	r1, [r7, #0]
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 fca4 	bl	8007af6 <USBD_CtlError>
              break;
 80071ae:	e01b      	b.n	80071e8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	885b      	ldrh	r3, [r3, #2]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d10e      	bne.n	80071d6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80071b8:	7bbb      	ldrb	r3, [r7, #14]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d00b      	beq.n	80071d6 <USBD_StdEPReq+0xfe>
 80071be:	7bbb      	ldrb	r3, [r7, #14]
 80071c0:	2b80      	cmp	r3, #128	@ 0x80
 80071c2:	d008      	beq.n	80071d6 <USBD_StdEPReq+0xfe>
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	88db      	ldrh	r3, [r3, #6]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d104      	bne.n	80071d6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80071cc:	7bbb      	ldrb	r3, [r7, #14]
 80071ce:	4619      	mov	r1, r3
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f001 f97f 	bl	80084d4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 fd58 	bl	8007c8c <USBD_CtlSendStatus>

              break;
 80071dc:	e004      	b.n	80071e8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80071de:	6839      	ldr	r1, [r7, #0]
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 fc88 	bl	8007af6 <USBD_CtlError>
              break;
 80071e6:	bf00      	nop
          }
          break;
 80071e8:	e107      	b.n	80073fa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	d002      	beq.n	80071fc <USBD_StdEPReq+0x124>
 80071f6:	2b03      	cmp	r3, #3
 80071f8:	d016      	beq.n	8007228 <USBD_StdEPReq+0x150>
 80071fa:	e04b      	b.n	8007294 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071fc:	7bbb      	ldrb	r3, [r7, #14]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00d      	beq.n	800721e <USBD_StdEPReq+0x146>
 8007202:	7bbb      	ldrb	r3, [r7, #14]
 8007204:	2b80      	cmp	r3, #128	@ 0x80
 8007206:	d00a      	beq.n	800721e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007208:	7bbb      	ldrb	r3, [r7, #14]
 800720a:	4619      	mov	r1, r3
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f001 f961 	bl	80084d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007212:	2180      	movs	r1, #128	@ 0x80
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f001 f95d 	bl	80084d4 <USBD_LL_StallEP>
 800721a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800721c:	e040      	b.n	80072a0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800721e:	6839      	ldr	r1, [r7, #0]
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 fc68 	bl	8007af6 <USBD_CtlError>
              break;
 8007226:	e03b      	b.n	80072a0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	885b      	ldrh	r3, [r3, #2]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d136      	bne.n	800729e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007230:	7bbb      	ldrb	r3, [r7, #14]
 8007232:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007236:	2b00      	cmp	r3, #0
 8007238:	d004      	beq.n	8007244 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800723a:	7bbb      	ldrb	r3, [r7, #14]
 800723c:	4619      	mov	r1, r3
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f001 f967 	bl	8008512 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 fd21 	bl	8007c8c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800724a:	7bbb      	ldrb	r3, [r7, #14]
 800724c:	4619      	mov	r1, r3
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f7ff fde4 	bl	8006e1c <USBD_CoreFindEP>
 8007254:	4603      	mov	r3, r0
 8007256:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007258:	7b7b      	ldrb	r3, [r7, #13]
 800725a:	2bff      	cmp	r3, #255	@ 0xff
 800725c:	d01f      	beq.n	800729e <USBD_StdEPReq+0x1c6>
 800725e:	7b7b      	ldrb	r3, [r7, #13]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d11c      	bne.n	800729e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007264:	7b7a      	ldrb	r2, [r7, #13]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800726c:	7b7a      	ldrb	r2, [r7, #13]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	32ae      	adds	r2, #174	@ 0xae
 8007272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d010      	beq.n	800729e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800727c:	7b7a      	ldrb	r2, [r7, #13]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	32ae      	adds	r2, #174	@ 0xae
 8007282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	6839      	ldr	r1, [r7, #0]
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	4798      	blx	r3
 800728e:	4603      	mov	r3, r0
 8007290:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007292:	e004      	b.n	800729e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007294:	6839      	ldr	r1, [r7, #0]
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 fc2d 	bl	8007af6 <USBD_CtlError>
              break;
 800729c:	e000      	b.n	80072a0 <USBD_StdEPReq+0x1c8>
              break;
 800729e:	bf00      	nop
          }
          break;
 80072a0:	e0ab      	b.n	80073fa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	2b02      	cmp	r3, #2
 80072ac:	d002      	beq.n	80072b4 <USBD_StdEPReq+0x1dc>
 80072ae:	2b03      	cmp	r3, #3
 80072b0:	d032      	beq.n	8007318 <USBD_StdEPReq+0x240>
 80072b2:	e097      	b.n	80073e4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072b4:	7bbb      	ldrb	r3, [r7, #14]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d007      	beq.n	80072ca <USBD_StdEPReq+0x1f2>
 80072ba:	7bbb      	ldrb	r3, [r7, #14]
 80072bc:	2b80      	cmp	r3, #128	@ 0x80
 80072be:	d004      	beq.n	80072ca <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80072c0:	6839      	ldr	r1, [r7, #0]
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 fc17 	bl	8007af6 <USBD_CtlError>
                break;
 80072c8:	e091      	b.n	80073ee <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	da0b      	bge.n	80072ea <USBD_StdEPReq+0x212>
 80072d2:	7bbb      	ldrb	r3, [r7, #14]
 80072d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80072d8:	4613      	mov	r3, r2
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	4413      	add	r3, r2
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	3310      	adds	r3, #16
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	4413      	add	r3, r2
 80072e6:	3304      	adds	r3, #4
 80072e8:	e00b      	b.n	8007302 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80072ea:	7bbb      	ldrb	r3, [r7, #14]
 80072ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072f0:	4613      	mov	r3, r2
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	4413      	add	r3, r2
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	4413      	add	r3, r2
 8007300:	3304      	adds	r3, #4
 8007302:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	2200      	movs	r2, #0
 8007308:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	2202      	movs	r2, #2
 800730e:	4619      	mov	r1, r3
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 fc61 	bl	8007bd8 <USBD_CtlSendData>
              break;
 8007316:	e06a      	b.n	80073ee <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007318:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800731c:	2b00      	cmp	r3, #0
 800731e:	da11      	bge.n	8007344 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007320:	7bbb      	ldrb	r3, [r7, #14]
 8007322:	f003 020f 	and.w	r2, r3, #15
 8007326:	6879      	ldr	r1, [r7, #4]
 8007328:	4613      	mov	r3, r2
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	4413      	add	r3, r2
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	440b      	add	r3, r1
 8007332:	3324      	adds	r3, #36	@ 0x24
 8007334:	881b      	ldrh	r3, [r3, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d117      	bne.n	800736a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800733a:	6839      	ldr	r1, [r7, #0]
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 fbda 	bl	8007af6 <USBD_CtlError>
                  break;
 8007342:	e054      	b.n	80073ee <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007344:	7bbb      	ldrb	r3, [r7, #14]
 8007346:	f003 020f 	and.w	r2, r3, #15
 800734a:	6879      	ldr	r1, [r7, #4]
 800734c:	4613      	mov	r3, r2
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	4413      	add	r3, r2
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	440b      	add	r3, r1
 8007356:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800735a:	881b      	ldrh	r3, [r3, #0]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d104      	bne.n	800736a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007360:	6839      	ldr	r1, [r7, #0]
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 fbc7 	bl	8007af6 <USBD_CtlError>
                  break;
 8007368:	e041      	b.n	80073ee <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800736a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800736e:	2b00      	cmp	r3, #0
 8007370:	da0b      	bge.n	800738a <USBD_StdEPReq+0x2b2>
 8007372:	7bbb      	ldrb	r3, [r7, #14]
 8007374:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007378:	4613      	mov	r3, r2
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	4413      	add	r3, r2
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	3310      	adds	r3, #16
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	4413      	add	r3, r2
 8007386:	3304      	adds	r3, #4
 8007388:	e00b      	b.n	80073a2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800738a:	7bbb      	ldrb	r3, [r7, #14]
 800738c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007390:	4613      	mov	r3, r2
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	4413      	add	r3, r2
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	4413      	add	r3, r2
 80073a0:	3304      	adds	r3, #4
 80073a2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80073a4:	7bbb      	ldrb	r3, [r7, #14]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d002      	beq.n	80073b0 <USBD_StdEPReq+0x2d8>
 80073aa:	7bbb      	ldrb	r3, [r7, #14]
 80073ac:	2b80      	cmp	r3, #128	@ 0x80
 80073ae:	d103      	bne.n	80073b8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	2200      	movs	r2, #0
 80073b4:	601a      	str	r2, [r3, #0]
 80073b6:	e00e      	b.n	80073d6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80073b8:	7bbb      	ldrb	r3, [r7, #14]
 80073ba:	4619      	mov	r1, r3
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f001 f8c7 	bl	8008550 <USBD_LL_IsStallEP>
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d003      	beq.n	80073d0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	2201      	movs	r2, #1
 80073cc:	601a      	str	r2, [r3, #0]
 80073ce:	e002      	b.n	80073d6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	2200      	movs	r2, #0
 80073d4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	2202      	movs	r2, #2
 80073da:	4619      	mov	r1, r3
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 fbfb 	bl	8007bd8 <USBD_CtlSendData>
              break;
 80073e2:	e004      	b.n	80073ee <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80073e4:	6839      	ldr	r1, [r7, #0]
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 fb85 	bl	8007af6 <USBD_CtlError>
              break;
 80073ec:	bf00      	nop
          }
          break;
 80073ee:	e004      	b.n	80073fa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80073f0:	6839      	ldr	r1, [r7, #0]
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 fb7f 	bl	8007af6 <USBD_CtlError>
          break;
 80073f8:	bf00      	nop
      }
      break;
 80073fa:	e005      	b.n	8007408 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80073fc:	6839      	ldr	r1, [r7, #0]
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 fb79 	bl	8007af6 <USBD_CtlError>
      break;
 8007404:	e000      	b.n	8007408 <USBD_StdEPReq+0x330>
      break;
 8007406:	bf00      	nop
  }

  return ret;
 8007408:	7bfb      	ldrb	r3, [r7, #15]
}
 800740a:	4618      	mov	r0, r3
 800740c:	3710      	adds	r7, #16
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
	...

08007414 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800741e:	2300      	movs	r3, #0
 8007420:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007422:	2300      	movs	r3, #0
 8007424:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007426:	2300      	movs	r3, #0
 8007428:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	885b      	ldrh	r3, [r3, #2]
 800742e:	0a1b      	lsrs	r3, r3, #8
 8007430:	b29b      	uxth	r3, r3
 8007432:	3b01      	subs	r3, #1
 8007434:	2b0e      	cmp	r3, #14
 8007436:	f200 8152 	bhi.w	80076de <USBD_GetDescriptor+0x2ca>
 800743a:	a201      	add	r2, pc, #4	@ (adr r2, 8007440 <USBD_GetDescriptor+0x2c>)
 800743c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007440:	080074b1 	.word	0x080074b1
 8007444:	080074c9 	.word	0x080074c9
 8007448:	08007509 	.word	0x08007509
 800744c:	080076df 	.word	0x080076df
 8007450:	080076df 	.word	0x080076df
 8007454:	0800767f 	.word	0x0800767f
 8007458:	080076ab 	.word	0x080076ab
 800745c:	080076df 	.word	0x080076df
 8007460:	080076df 	.word	0x080076df
 8007464:	080076df 	.word	0x080076df
 8007468:	080076df 	.word	0x080076df
 800746c:	080076df 	.word	0x080076df
 8007470:	080076df 	.word	0x080076df
 8007474:	080076df 	.word	0x080076df
 8007478:	0800747d 	.word	0x0800747d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007482:	69db      	ldr	r3, [r3, #28]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d00b      	beq.n	80074a0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800748e:	69db      	ldr	r3, [r3, #28]
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	7c12      	ldrb	r2, [r2, #16]
 8007494:	f107 0108 	add.w	r1, r7, #8
 8007498:	4610      	mov	r0, r2
 800749a:	4798      	blx	r3
 800749c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800749e:	e126      	b.n	80076ee <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80074a0:	6839      	ldr	r1, [r7, #0]
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 fb27 	bl	8007af6 <USBD_CtlError>
        err++;
 80074a8:	7afb      	ldrb	r3, [r7, #11]
 80074aa:	3301      	adds	r3, #1
 80074ac:	72fb      	strb	r3, [r7, #11]
      break;
 80074ae:	e11e      	b.n	80076ee <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	7c12      	ldrb	r2, [r2, #16]
 80074bc:	f107 0108 	add.w	r1, r7, #8
 80074c0:	4610      	mov	r0, r2
 80074c2:	4798      	blx	r3
 80074c4:	60f8      	str	r0, [r7, #12]
      break;
 80074c6:	e112      	b.n	80076ee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	7c1b      	ldrb	r3, [r3, #16]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d10d      	bne.n	80074ec <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074d8:	f107 0208 	add.w	r2, r7, #8
 80074dc:	4610      	mov	r0, r2
 80074de:	4798      	blx	r3
 80074e0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	3301      	adds	r3, #1
 80074e6:	2202      	movs	r2, #2
 80074e8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80074ea:	e100      	b.n	80076ee <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074f4:	f107 0208 	add.w	r2, r7, #8
 80074f8:	4610      	mov	r0, r2
 80074fa:	4798      	blx	r3
 80074fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	3301      	adds	r3, #1
 8007502:	2202      	movs	r2, #2
 8007504:	701a      	strb	r2, [r3, #0]
      break;
 8007506:	e0f2      	b.n	80076ee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	885b      	ldrh	r3, [r3, #2]
 800750c:	b2db      	uxtb	r3, r3
 800750e:	2b05      	cmp	r3, #5
 8007510:	f200 80ac 	bhi.w	800766c <USBD_GetDescriptor+0x258>
 8007514:	a201      	add	r2, pc, #4	@ (adr r2, 800751c <USBD_GetDescriptor+0x108>)
 8007516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800751a:	bf00      	nop
 800751c:	08007535 	.word	0x08007535
 8007520:	08007569 	.word	0x08007569
 8007524:	0800759d 	.word	0x0800759d
 8007528:	080075d1 	.word	0x080075d1
 800752c:	08007605 	.word	0x08007605
 8007530:	08007639 	.word	0x08007639
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00b      	beq.n	8007558 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	7c12      	ldrb	r2, [r2, #16]
 800754c:	f107 0108 	add.w	r1, r7, #8
 8007550:	4610      	mov	r0, r2
 8007552:	4798      	blx	r3
 8007554:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007556:	e091      	b.n	800767c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007558:	6839      	ldr	r1, [r7, #0]
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 facb 	bl	8007af6 <USBD_CtlError>
            err++;
 8007560:	7afb      	ldrb	r3, [r7, #11]
 8007562:	3301      	adds	r3, #1
 8007564:	72fb      	strb	r3, [r7, #11]
          break;
 8007566:	e089      	b.n	800767c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00b      	beq.n	800758c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	7c12      	ldrb	r2, [r2, #16]
 8007580:	f107 0108 	add.w	r1, r7, #8
 8007584:	4610      	mov	r0, r2
 8007586:	4798      	blx	r3
 8007588:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800758a:	e077      	b.n	800767c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800758c:	6839      	ldr	r1, [r7, #0]
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 fab1 	bl	8007af6 <USBD_CtlError>
            err++;
 8007594:	7afb      	ldrb	r3, [r7, #11]
 8007596:	3301      	adds	r3, #1
 8007598:	72fb      	strb	r3, [r7, #11]
          break;
 800759a:	e06f      	b.n	800767c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00b      	beq.n	80075c0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	7c12      	ldrb	r2, [r2, #16]
 80075b4:	f107 0108 	add.w	r1, r7, #8
 80075b8:	4610      	mov	r0, r2
 80075ba:	4798      	blx	r3
 80075bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075be:	e05d      	b.n	800767c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80075c0:	6839      	ldr	r1, [r7, #0]
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 fa97 	bl	8007af6 <USBD_CtlError>
            err++;
 80075c8:	7afb      	ldrb	r3, [r7, #11]
 80075ca:	3301      	adds	r3, #1
 80075cc:	72fb      	strb	r3, [r7, #11]
          break;
 80075ce:	e055      	b.n	800767c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075d6:	691b      	ldr	r3, [r3, #16]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d00b      	beq.n	80075f4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075e2:	691b      	ldr	r3, [r3, #16]
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	7c12      	ldrb	r2, [r2, #16]
 80075e8:	f107 0108 	add.w	r1, r7, #8
 80075ec:	4610      	mov	r0, r2
 80075ee:	4798      	blx	r3
 80075f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075f2:	e043      	b.n	800767c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80075f4:	6839      	ldr	r1, [r7, #0]
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 fa7d 	bl	8007af6 <USBD_CtlError>
            err++;
 80075fc:	7afb      	ldrb	r3, [r7, #11]
 80075fe:	3301      	adds	r3, #1
 8007600:	72fb      	strb	r3, [r7, #11]
          break;
 8007602:	e03b      	b.n	800767c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800760a:	695b      	ldr	r3, [r3, #20]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d00b      	beq.n	8007628 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007616:	695b      	ldr	r3, [r3, #20]
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	7c12      	ldrb	r2, [r2, #16]
 800761c:	f107 0108 	add.w	r1, r7, #8
 8007620:	4610      	mov	r0, r2
 8007622:	4798      	blx	r3
 8007624:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007626:	e029      	b.n	800767c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007628:	6839      	ldr	r1, [r7, #0]
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 fa63 	bl	8007af6 <USBD_CtlError>
            err++;
 8007630:	7afb      	ldrb	r3, [r7, #11]
 8007632:	3301      	adds	r3, #1
 8007634:	72fb      	strb	r3, [r7, #11]
          break;
 8007636:	e021      	b.n	800767c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800763e:	699b      	ldr	r3, [r3, #24]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d00b      	beq.n	800765c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800764a:	699b      	ldr	r3, [r3, #24]
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	7c12      	ldrb	r2, [r2, #16]
 8007650:	f107 0108 	add.w	r1, r7, #8
 8007654:	4610      	mov	r0, r2
 8007656:	4798      	blx	r3
 8007658:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800765a:	e00f      	b.n	800767c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800765c:	6839      	ldr	r1, [r7, #0]
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 fa49 	bl	8007af6 <USBD_CtlError>
            err++;
 8007664:	7afb      	ldrb	r3, [r7, #11]
 8007666:	3301      	adds	r3, #1
 8007668:	72fb      	strb	r3, [r7, #11]
          break;
 800766a:	e007      	b.n	800767c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800766c:	6839      	ldr	r1, [r7, #0]
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 fa41 	bl	8007af6 <USBD_CtlError>
          err++;
 8007674:	7afb      	ldrb	r3, [r7, #11]
 8007676:	3301      	adds	r3, #1
 8007678:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800767a:	bf00      	nop
      }
      break;
 800767c:	e037      	b.n	80076ee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	7c1b      	ldrb	r3, [r3, #16]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d109      	bne.n	800769a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800768c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800768e:	f107 0208 	add.w	r2, r7, #8
 8007692:	4610      	mov	r0, r2
 8007694:	4798      	blx	r3
 8007696:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007698:	e029      	b.n	80076ee <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800769a:	6839      	ldr	r1, [r7, #0]
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 fa2a 	bl	8007af6 <USBD_CtlError>
        err++;
 80076a2:	7afb      	ldrb	r3, [r7, #11]
 80076a4:	3301      	adds	r3, #1
 80076a6:	72fb      	strb	r3, [r7, #11]
      break;
 80076a8:	e021      	b.n	80076ee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	7c1b      	ldrb	r3, [r3, #16]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d10d      	bne.n	80076ce <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076ba:	f107 0208 	add.w	r2, r7, #8
 80076be:	4610      	mov	r0, r2
 80076c0:	4798      	blx	r3
 80076c2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	3301      	adds	r3, #1
 80076c8:	2207      	movs	r2, #7
 80076ca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076cc:	e00f      	b.n	80076ee <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80076ce:	6839      	ldr	r1, [r7, #0]
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 fa10 	bl	8007af6 <USBD_CtlError>
        err++;
 80076d6:	7afb      	ldrb	r3, [r7, #11]
 80076d8:	3301      	adds	r3, #1
 80076da:	72fb      	strb	r3, [r7, #11]
      break;
 80076dc:	e007      	b.n	80076ee <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80076de:	6839      	ldr	r1, [r7, #0]
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 fa08 	bl	8007af6 <USBD_CtlError>
      err++;
 80076e6:	7afb      	ldrb	r3, [r7, #11]
 80076e8:	3301      	adds	r3, #1
 80076ea:	72fb      	strb	r3, [r7, #11]
      break;
 80076ec:	bf00      	nop
  }

  if (err != 0U)
 80076ee:	7afb      	ldrb	r3, [r7, #11]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d11e      	bne.n	8007732 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	88db      	ldrh	r3, [r3, #6]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d016      	beq.n	800772a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80076fc:	893b      	ldrh	r3, [r7, #8]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00e      	beq.n	8007720 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	88da      	ldrh	r2, [r3, #6]
 8007706:	893b      	ldrh	r3, [r7, #8]
 8007708:	4293      	cmp	r3, r2
 800770a:	bf28      	it	cs
 800770c:	4613      	movcs	r3, r2
 800770e:	b29b      	uxth	r3, r3
 8007710:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007712:	893b      	ldrh	r3, [r7, #8]
 8007714:	461a      	mov	r2, r3
 8007716:	68f9      	ldr	r1, [r7, #12]
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 fa5d 	bl	8007bd8 <USBD_CtlSendData>
 800771e:	e009      	b.n	8007734 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007720:	6839      	ldr	r1, [r7, #0]
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 f9e7 	bl	8007af6 <USBD_CtlError>
 8007728:	e004      	b.n	8007734 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 faae 	bl	8007c8c <USBD_CtlSendStatus>
 8007730:	e000      	b.n	8007734 <USBD_GetDescriptor+0x320>
    return;
 8007732:	bf00      	nop
  }
}
 8007734:	3710      	adds	r7, #16
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop

0800773c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	889b      	ldrh	r3, [r3, #4]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d131      	bne.n	80077b2 <USBD_SetAddress+0x76>
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	88db      	ldrh	r3, [r3, #6]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d12d      	bne.n	80077b2 <USBD_SetAddress+0x76>
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	885b      	ldrh	r3, [r3, #2]
 800775a:	2b7f      	cmp	r3, #127	@ 0x7f
 800775c:	d829      	bhi.n	80077b2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	885b      	ldrh	r3, [r3, #2]
 8007762:	b2db      	uxtb	r3, r3
 8007764:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007768:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007770:	b2db      	uxtb	r3, r3
 8007772:	2b03      	cmp	r3, #3
 8007774:	d104      	bne.n	8007780 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007776:	6839      	ldr	r1, [r7, #0]
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 f9bc 	bl	8007af6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800777e:	e01d      	b.n	80077bc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	7bfa      	ldrb	r2, [r7, #15]
 8007784:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007788:	7bfb      	ldrb	r3, [r7, #15]
 800778a:	4619      	mov	r1, r3
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 ff0b 	bl	80085a8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 fa7a 	bl	8007c8c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007798:	7bfb      	ldrb	r3, [r7, #15]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d004      	beq.n	80077a8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2202      	movs	r2, #2
 80077a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077a6:	e009      	b.n	80077bc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077b0:	e004      	b.n	80077bc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80077b2:	6839      	ldr	r1, [r7, #0]
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 f99e 	bl	8007af6 <USBD_CtlError>
  }
}
 80077ba:	bf00      	nop
 80077bc:	bf00      	nop
 80077be:	3710      	adds	r7, #16
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077ce:	2300      	movs	r3, #0
 80077d0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	885b      	ldrh	r3, [r3, #2]
 80077d6:	b2da      	uxtb	r2, r3
 80077d8:	4b4e      	ldr	r3, [pc, #312]	@ (8007914 <USBD_SetConfig+0x150>)
 80077da:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80077dc:	4b4d      	ldr	r3, [pc, #308]	@ (8007914 <USBD_SetConfig+0x150>)
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d905      	bls.n	80077f0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80077e4:	6839      	ldr	r1, [r7, #0]
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 f985 	bl	8007af6 <USBD_CtlError>
    return USBD_FAIL;
 80077ec:	2303      	movs	r3, #3
 80077ee:	e08c      	b.n	800790a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	2b02      	cmp	r3, #2
 80077fa:	d002      	beq.n	8007802 <USBD_SetConfig+0x3e>
 80077fc:	2b03      	cmp	r3, #3
 80077fe:	d029      	beq.n	8007854 <USBD_SetConfig+0x90>
 8007800:	e075      	b.n	80078ee <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007802:	4b44      	ldr	r3, [pc, #272]	@ (8007914 <USBD_SetConfig+0x150>)
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d020      	beq.n	800784c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800780a:	4b42      	ldr	r3, [pc, #264]	@ (8007914 <USBD_SetConfig+0x150>)
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	461a      	mov	r2, r3
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007814:	4b3f      	ldr	r3, [pc, #252]	@ (8007914 <USBD_SetConfig+0x150>)
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	4619      	mov	r1, r3
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f7fe ffbf 	bl	800679e <USBD_SetClassConfig>
 8007820:	4603      	mov	r3, r0
 8007822:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007824:	7bfb      	ldrb	r3, [r7, #15]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d008      	beq.n	800783c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800782a:	6839      	ldr	r1, [r7, #0]
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 f962 	bl	8007af6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2202      	movs	r2, #2
 8007836:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800783a:	e065      	b.n	8007908 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 fa25 	bl	8007c8c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2203      	movs	r2, #3
 8007846:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800784a:	e05d      	b.n	8007908 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 fa1d 	bl	8007c8c <USBD_CtlSendStatus>
      break;
 8007852:	e059      	b.n	8007908 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007854:	4b2f      	ldr	r3, [pc, #188]	@ (8007914 <USBD_SetConfig+0x150>)
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d112      	bne.n	8007882 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2202      	movs	r2, #2
 8007860:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007864:	4b2b      	ldr	r3, [pc, #172]	@ (8007914 <USBD_SetConfig+0x150>)
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	461a      	mov	r2, r3
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800786e:	4b29      	ldr	r3, [pc, #164]	@ (8007914 <USBD_SetConfig+0x150>)
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	4619      	mov	r1, r3
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f7fe ffae 	bl	80067d6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 fa06 	bl	8007c8c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007880:	e042      	b.n	8007908 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007882:	4b24      	ldr	r3, [pc, #144]	@ (8007914 <USBD_SetConfig+0x150>)
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	461a      	mov	r2, r3
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	429a      	cmp	r2, r3
 800788e:	d02a      	beq.n	80078e6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	b2db      	uxtb	r3, r3
 8007896:	4619      	mov	r1, r3
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f7fe ff9c 	bl	80067d6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800789e:	4b1d      	ldr	r3, [pc, #116]	@ (8007914 <USBD_SetConfig+0x150>)
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	461a      	mov	r2, r3
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80078a8:	4b1a      	ldr	r3, [pc, #104]	@ (8007914 <USBD_SetConfig+0x150>)
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	4619      	mov	r1, r3
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f7fe ff75 	bl	800679e <USBD_SetClassConfig>
 80078b4:	4603      	mov	r3, r0
 80078b6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80078b8:	7bfb      	ldrb	r3, [r7, #15]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d00f      	beq.n	80078de <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80078be:	6839      	ldr	r1, [r7, #0]
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 f918 	bl	8007af6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	4619      	mov	r1, r3
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f7fe ff81 	bl	80067d6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2202      	movs	r2, #2
 80078d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80078dc:	e014      	b.n	8007908 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 f9d4 	bl	8007c8c <USBD_CtlSendStatus>
      break;
 80078e4:	e010      	b.n	8007908 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f9d0 	bl	8007c8c <USBD_CtlSendStatus>
      break;
 80078ec:	e00c      	b.n	8007908 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80078ee:	6839      	ldr	r1, [r7, #0]
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 f900 	bl	8007af6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80078f6:	4b07      	ldr	r3, [pc, #28]	@ (8007914 <USBD_SetConfig+0x150>)
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	4619      	mov	r1, r3
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f7fe ff6a 	bl	80067d6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007902:	2303      	movs	r3, #3
 8007904:	73fb      	strb	r3, [r7, #15]
      break;
 8007906:	bf00      	nop
  }

  return ret;
 8007908:	7bfb      	ldrb	r3, [r7, #15]
}
 800790a:	4618      	mov	r0, r3
 800790c:	3710      	adds	r7, #16
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	200001f0 	.word	0x200001f0

08007918 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	88db      	ldrh	r3, [r3, #6]
 8007926:	2b01      	cmp	r3, #1
 8007928:	d004      	beq.n	8007934 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800792a:	6839      	ldr	r1, [r7, #0]
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 f8e2 	bl	8007af6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007932:	e023      	b.n	800797c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800793a:	b2db      	uxtb	r3, r3
 800793c:	2b02      	cmp	r3, #2
 800793e:	dc02      	bgt.n	8007946 <USBD_GetConfig+0x2e>
 8007940:	2b00      	cmp	r3, #0
 8007942:	dc03      	bgt.n	800794c <USBD_GetConfig+0x34>
 8007944:	e015      	b.n	8007972 <USBD_GetConfig+0x5a>
 8007946:	2b03      	cmp	r3, #3
 8007948:	d00b      	beq.n	8007962 <USBD_GetConfig+0x4a>
 800794a:	e012      	b.n	8007972 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	3308      	adds	r3, #8
 8007956:	2201      	movs	r2, #1
 8007958:	4619      	mov	r1, r3
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 f93c 	bl	8007bd8 <USBD_CtlSendData>
        break;
 8007960:	e00c      	b.n	800797c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	3304      	adds	r3, #4
 8007966:	2201      	movs	r2, #1
 8007968:	4619      	mov	r1, r3
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 f934 	bl	8007bd8 <USBD_CtlSendData>
        break;
 8007970:	e004      	b.n	800797c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007972:	6839      	ldr	r1, [r7, #0]
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 f8be 	bl	8007af6 <USBD_CtlError>
        break;
 800797a:	bf00      	nop
}
 800797c:	bf00      	nop
 800797e:	3708      	adds	r7, #8
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b082      	sub	sp, #8
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007994:	b2db      	uxtb	r3, r3
 8007996:	3b01      	subs	r3, #1
 8007998:	2b02      	cmp	r3, #2
 800799a:	d81e      	bhi.n	80079da <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	88db      	ldrh	r3, [r3, #6]
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	d004      	beq.n	80079ae <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80079a4:	6839      	ldr	r1, [r7, #0]
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 f8a5 	bl	8007af6 <USBD_CtlError>
        break;
 80079ac:	e01a      	b.n	80079e4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2201      	movs	r2, #1
 80079b2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d005      	beq.n	80079ca <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	68db      	ldr	r3, [r3, #12]
 80079c2:	f043 0202 	orr.w	r2, r3, #2
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	330c      	adds	r3, #12
 80079ce:	2202      	movs	r2, #2
 80079d0:	4619      	mov	r1, r3
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 f900 	bl	8007bd8 <USBD_CtlSendData>
      break;
 80079d8:	e004      	b.n	80079e4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80079da:	6839      	ldr	r1, [r7, #0]
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 f88a 	bl	8007af6 <USBD_CtlError>
      break;
 80079e2:	bf00      	nop
  }
}
 80079e4:	bf00      	nop
 80079e6:	3708      	adds	r7, #8
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	885b      	ldrh	r3, [r3, #2]
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d107      	bne.n	8007a0e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2201      	movs	r2, #1
 8007a02:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 f940 	bl	8007c8c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007a0c:	e013      	b.n	8007a36 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	885b      	ldrh	r3, [r3, #2]
 8007a12:	2b02      	cmp	r3, #2
 8007a14:	d10b      	bne.n	8007a2e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	889b      	ldrh	r3, [r3, #4]
 8007a1a:	0a1b      	lsrs	r3, r3, #8
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	b2da      	uxtb	r2, r3
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 f930 	bl	8007c8c <USBD_CtlSendStatus>
}
 8007a2c:	e003      	b.n	8007a36 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007a2e:	6839      	ldr	r1, [r7, #0]
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 f860 	bl	8007af6 <USBD_CtlError>
}
 8007a36:	bf00      	nop
 8007a38:	3708      	adds	r7, #8
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}

08007a3e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b082      	sub	sp, #8
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
 8007a46:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	3b01      	subs	r3, #1
 8007a52:	2b02      	cmp	r3, #2
 8007a54:	d80b      	bhi.n	8007a6e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	885b      	ldrh	r3, [r3, #2]
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d10c      	bne.n	8007a78 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 f910 	bl	8007c8c <USBD_CtlSendStatus>
      }
      break;
 8007a6c:	e004      	b.n	8007a78 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007a6e:	6839      	ldr	r1, [r7, #0]
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 f840 	bl	8007af6 <USBD_CtlError>
      break;
 8007a76:	e000      	b.n	8007a7a <USBD_ClrFeature+0x3c>
      break;
 8007a78:	bf00      	nop
  }
}
 8007a7a:	bf00      	nop
 8007a7c:	3708      	adds	r7, #8
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b084      	sub	sp, #16
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
 8007a8a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	781a      	ldrb	r2, [r3, #0]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	781a      	ldrb	r2, [r3, #0]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007aac:	68f8      	ldr	r0, [r7, #12]
 8007aae:	f7ff fa16 	bl	8006ede <SWAPBYTE>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	3301      	adds	r3, #1
 8007abe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007ac6:	68f8      	ldr	r0, [r7, #12]
 8007ac8:	f7ff fa09 	bl	8006ede <SWAPBYTE>
 8007acc:	4603      	mov	r3, r0
 8007ace:	461a      	mov	r2, r3
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	3301      	adds	r3, #1
 8007ade:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	f7ff f9fc 	bl	8006ede <SWAPBYTE>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	461a      	mov	r2, r3
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	80da      	strh	r2, [r3, #6]
}
 8007aee:	bf00      	nop
 8007af0:	3710      	adds	r7, #16
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}

08007af6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007af6:	b580      	push	{r7, lr}
 8007af8:	b082      	sub	sp, #8
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
 8007afe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b00:	2180      	movs	r1, #128	@ 0x80
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 fce6 	bl	80084d4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007b08:	2100      	movs	r1, #0
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 fce2 	bl	80084d4 <USBD_LL_StallEP>
}
 8007b10:	bf00      	nop
 8007b12:	3708      	adds	r7, #8
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b086      	sub	sp, #24
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007b24:	2300      	movs	r3, #0
 8007b26:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d036      	beq.n	8007b9c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007b32:	6938      	ldr	r0, [r7, #16]
 8007b34:	f000 f836 	bl	8007ba4 <USBD_GetLen>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	005b      	lsls	r3, r3, #1
 8007b40:	b29a      	uxth	r2, r3
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007b46:	7dfb      	ldrb	r3, [r7, #23]
 8007b48:	68ba      	ldr	r2, [r7, #8]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	7812      	ldrb	r2, [r2, #0]
 8007b50:	701a      	strb	r2, [r3, #0]
  idx++;
 8007b52:	7dfb      	ldrb	r3, [r7, #23]
 8007b54:	3301      	adds	r3, #1
 8007b56:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007b58:	7dfb      	ldrb	r3, [r7, #23]
 8007b5a:	68ba      	ldr	r2, [r7, #8]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	2203      	movs	r2, #3
 8007b60:	701a      	strb	r2, [r3, #0]
  idx++;
 8007b62:	7dfb      	ldrb	r3, [r7, #23]
 8007b64:	3301      	adds	r3, #1
 8007b66:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007b68:	e013      	b.n	8007b92 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007b6a:	7dfb      	ldrb	r3, [r7, #23]
 8007b6c:	68ba      	ldr	r2, [r7, #8]
 8007b6e:	4413      	add	r3, r2
 8007b70:	693a      	ldr	r2, [r7, #16]
 8007b72:	7812      	ldrb	r2, [r2, #0]
 8007b74:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	3301      	adds	r3, #1
 8007b7a:	613b      	str	r3, [r7, #16]
    idx++;
 8007b7c:	7dfb      	ldrb	r3, [r7, #23]
 8007b7e:	3301      	adds	r3, #1
 8007b80:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007b82:	7dfb      	ldrb	r3, [r7, #23]
 8007b84:	68ba      	ldr	r2, [r7, #8]
 8007b86:	4413      	add	r3, r2
 8007b88:	2200      	movs	r2, #0
 8007b8a:	701a      	strb	r2, [r3, #0]
    idx++;
 8007b8c:	7dfb      	ldrb	r3, [r7, #23]
 8007b8e:	3301      	adds	r3, #1
 8007b90:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1e7      	bne.n	8007b6a <USBD_GetString+0x52>
 8007b9a:	e000      	b.n	8007b9e <USBD_GetString+0x86>
    return;
 8007b9c:	bf00      	nop
  }
}
 8007b9e:	3718      	adds	r7, #24
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b085      	sub	sp, #20
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007bac:	2300      	movs	r3, #0
 8007bae:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007bb4:	e005      	b.n	8007bc2 <USBD_GetLen+0x1e>
  {
    len++;
 8007bb6:	7bfb      	ldrb	r3, [r7, #15]
 8007bb8:	3301      	adds	r3, #1
 8007bba:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d1f5      	bne.n	8007bb6 <USBD_GetLen+0x12>
  }

  return len;
 8007bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3714      	adds	r7, #20
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b084      	sub	sp, #16
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	60f8      	str	r0, [r7, #12]
 8007be0:	60b9      	str	r1, [r7, #8]
 8007be2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2202      	movs	r2, #2
 8007be8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	68ba      	ldr	r2, [r7, #8]
 8007bfc:	2100      	movs	r1, #0
 8007bfe:	68f8      	ldr	r0, [r7, #12]
 8007c00:	f000 fcf1 	bl	80085e6 <USBD_LL_Transmit>

  return USBD_OK;
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3710      	adds	r7, #16
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}

08007c0e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007c0e:	b580      	push	{r7, lr}
 8007c10:	b084      	sub	sp, #16
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	60f8      	str	r0, [r7, #12]
 8007c16:	60b9      	str	r1, [r7, #8]
 8007c18:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	68ba      	ldr	r2, [r7, #8]
 8007c1e:	2100      	movs	r1, #0
 8007c20:	68f8      	ldr	r0, [r7, #12]
 8007c22:	f000 fce0 	bl	80085e6 <USBD_LL_Transmit>

  return USBD_OK;
 8007c26:	2300      	movs	r3, #0
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3710      	adds	r7, #16
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b084      	sub	sp, #16
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	60f8      	str	r0, [r7, #12]
 8007c38:	60b9      	str	r1, [r7, #8]
 8007c3a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2203      	movs	r2, #3
 8007c40:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	68ba      	ldr	r2, [r7, #8]
 8007c58:	2100      	movs	r1, #0
 8007c5a:	68f8      	ldr	r0, [r7, #12]
 8007c5c:	f000 fce4 	bl	8008628 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c60:	2300      	movs	r3, #0
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3710      	adds	r7, #16
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b084      	sub	sp, #16
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	60f8      	str	r0, [r7, #12]
 8007c72:	60b9      	str	r1, [r7, #8]
 8007c74:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	68ba      	ldr	r2, [r7, #8]
 8007c7a:	2100      	movs	r1, #0
 8007c7c:	68f8      	ldr	r0, [r7, #12]
 8007c7e:	f000 fcd3 	bl	8008628 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c82:	2300      	movs	r3, #0
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3710      	adds	r7, #16
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2204      	movs	r2, #4
 8007c98:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	2100      	movs	r1, #0
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 fc9f 	bl	80085e6 <USBD_LL_Transmit>

  return USBD_OK;
 8007ca8:	2300      	movs	r3, #0
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3708      	adds	r7, #8
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007cb2:	b580      	push	{r7, lr}
 8007cb4:	b082      	sub	sp, #8
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2205      	movs	r2, #5
 8007cbe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	2100      	movs	r1, #0
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 fcad 	bl	8008628 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007cce:	2300      	movs	r3, #0
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3708      	adds	r7, #8
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8007cdc:	2201      	movs	r2, #1
 8007cde:	4912      	ldr	r1, [pc, #72]	@ (8007d28 <MX_USB_DEVICE_Init+0x50>)
 8007ce0:	4812      	ldr	r0, [pc, #72]	@ (8007d2c <MX_USB_DEVICE_Init+0x54>)
 8007ce2:	f7fe fcdf 	bl	80066a4 <USBD_Init>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d001      	beq.n	8007cf0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007cec:	f7f8 fdba 	bl	8000864 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8007cf0:	490f      	ldr	r1, [pc, #60]	@ (8007d30 <MX_USB_DEVICE_Init+0x58>)
 8007cf2:	480e      	ldr	r0, [pc, #56]	@ (8007d2c <MX_USB_DEVICE_Init+0x54>)
 8007cf4:	f7fe fd06 	bl	8006704 <USBD_RegisterClass>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d001      	beq.n	8007d02 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007cfe:	f7f8 fdb1 	bl	8000864 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8007d02:	490c      	ldr	r1, [pc, #48]	@ (8007d34 <MX_USB_DEVICE_Init+0x5c>)
 8007d04:	4809      	ldr	r0, [pc, #36]	@ (8007d2c <MX_USB_DEVICE_Init+0x54>)
 8007d06:	f7fe fc3d 	bl	8006584 <USBD_CDC_RegisterInterface>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d001      	beq.n	8007d14 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007d10:	f7f8 fda8 	bl	8000864 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8007d14:	4805      	ldr	r0, [pc, #20]	@ (8007d2c <MX_USB_DEVICE_Init+0x54>)
 8007d16:	f7fe fd2b 	bl	8006770 <USBD_Start>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d001      	beq.n	8007d24 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007d20:	f7f8 fda0 	bl	8000864 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007d24:	bf00      	nop
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	200000ac 	.word	0x200000ac
 8007d2c:	200001f4 	.word	0x200001f4
 8007d30:	20000018 	.word	0x20000018
 8007d34:	20000098 	.word	0x20000098

08007d38 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	4905      	ldr	r1, [pc, #20]	@ (8007d54 <CDC_Init_HS+0x1c>)
 8007d40:	4805      	ldr	r0, [pc, #20]	@ (8007d58 <CDC_Init_HS+0x20>)
 8007d42:	f7fe fc39 	bl	80065b8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8007d46:	4905      	ldr	r1, [pc, #20]	@ (8007d5c <CDC_Init_HS+0x24>)
 8007d48:	4803      	ldr	r0, [pc, #12]	@ (8007d58 <CDC_Init_HS+0x20>)
 8007d4a:	f7fe fc57 	bl	80065fc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007d4e:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	bd80      	pop	{r7, pc}
 8007d54:	20000cd0 	.word	0x20000cd0
 8007d58:	200001f4 	.word	0x200001f4
 8007d5c:	200004d0 	.word	0x200004d0

08007d60 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8007d60:	b480      	push	{r7}
 8007d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8007d64:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	4603      	mov	r3, r0
 8007d78:	6039      	str	r1, [r7, #0]
 8007d7a:	71fb      	strb	r3, [r7, #7]
 8007d7c:	4613      	mov	r3, r2
 8007d7e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8007d80:	79fb      	ldrb	r3, [r7, #7]
 8007d82:	2b23      	cmp	r3, #35	@ 0x23
 8007d84:	d84a      	bhi.n	8007e1c <CDC_Control_HS+0xac>
 8007d86:	a201      	add	r2, pc, #4	@ (adr r2, 8007d8c <CDC_Control_HS+0x1c>)
 8007d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d8c:	08007e1d 	.word	0x08007e1d
 8007d90:	08007e1d 	.word	0x08007e1d
 8007d94:	08007e1d 	.word	0x08007e1d
 8007d98:	08007e1d 	.word	0x08007e1d
 8007d9c:	08007e1d 	.word	0x08007e1d
 8007da0:	08007e1d 	.word	0x08007e1d
 8007da4:	08007e1d 	.word	0x08007e1d
 8007da8:	08007e1d 	.word	0x08007e1d
 8007dac:	08007e1d 	.word	0x08007e1d
 8007db0:	08007e1d 	.word	0x08007e1d
 8007db4:	08007e1d 	.word	0x08007e1d
 8007db8:	08007e1d 	.word	0x08007e1d
 8007dbc:	08007e1d 	.word	0x08007e1d
 8007dc0:	08007e1d 	.word	0x08007e1d
 8007dc4:	08007e1d 	.word	0x08007e1d
 8007dc8:	08007e1d 	.word	0x08007e1d
 8007dcc:	08007e1d 	.word	0x08007e1d
 8007dd0:	08007e1d 	.word	0x08007e1d
 8007dd4:	08007e1d 	.word	0x08007e1d
 8007dd8:	08007e1d 	.word	0x08007e1d
 8007ddc:	08007e1d 	.word	0x08007e1d
 8007de0:	08007e1d 	.word	0x08007e1d
 8007de4:	08007e1d 	.word	0x08007e1d
 8007de8:	08007e1d 	.word	0x08007e1d
 8007dec:	08007e1d 	.word	0x08007e1d
 8007df0:	08007e1d 	.word	0x08007e1d
 8007df4:	08007e1d 	.word	0x08007e1d
 8007df8:	08007e1d 	.word	0x08007e1d
 8007dfc:	08007e1d 	.word	0x08007e1d
 8007e00:	08007e1d 	.word	0x08007e1d
 8007e04:	08007e1d 	.word	0x08007e1d
 8007e08:	08007e1d 	.word	0x08007e1d
 8007e0c:	08007e1d 	.word	0x08007e1d
 8007e10:	08007e1d 	.word	0x08007e1d
 8007e14:	08007e1d 	.word	0x08007e1d
 8007e18:	08007e1d 	.word	0x08007e1d
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007e1c:	bf00      	nop
  }

  return (USBD_OK);
 8007e1e:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	370c      	adds	r7, #12
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr

08007e2c <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8007e36:	6879      	ldr	r1, [r7, #4]
 8007e38:	4805      	ldr	r0, [pc, #20]	@ (8007e50 <CDC_Receive_HS+0x24>)
 8007e3a:	f7fe fbdf 	bl	80065fc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8007e3e:	4804      	ldr	r0, [pc, #16]	@ (8007e50 <CDC_Receive_HS+0x24>)
 8007e40:	f7fe fbfa 	bl	8006638 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007e44:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3708      	adds	r7, #8
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	200001f4 	.word	0x200001f4

08007e54 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b087      	sub	sp, #28
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	60f8      	str	r0, [r7, #12]
 8007e5c:	60b9      	str	r1, [r7, #8]
 8007e5e:	4613      	mov	r3, r2
 8007e60:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007e62:	2300      	movs	r3, #0
 8007e64:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8007e66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	371c      	adds	r7, #28
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr
	...

08007e78 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b083      	sub	sp, #12
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	4603      	mov	r3, r0
 8007e80:	6039      	str	r1, [r7, #0]
 8007e82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	2212      	movs	r2, #18
 8007e88:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8007e8a:	4b03      	ldr	r3, [pc, #12]	@ (8007e98 <USBD_HS_DeviceDescriptor+0x20>)
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr
 8007e98:	200000cc 	.word	0x200000cc

08007e9c <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	6039      	str	r1, [r7, #0]
 8007ea6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	2204      	movs	r2, #4
 8007eac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007eae:	4b03      	ldr	r3, [pc, #12]	@ (8007ebc <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	370c      	adds	r7, #12
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr
 8007ebc:	200000ec 	.word	0x200000ec

08007ec0 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	6039      	str	r1, [r7, #0]
 8007eca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007ecc:	79fb      	ldrb	r3, [r7, #7]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d105      	bne.n	8007ede <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8007ed2:	683a      	ldr	r2, [r7, #0]
 8007ed4:	4907      	ldr	r1, [pc, #28]	@ (8007ef4 <USBD_HS_ProductStrDescriptor+0x34>)
 8007ed6:	4808      	ldr	r0, [pc, #32]	@ (8007ef8 <USBD_HS_ProductStrDescriptor+0x38>)
 8007ed8:	f7ff fe1e 	bl	8007b18 <USBD_GetString>
 8007edc:	e004      	b.n	8007ee8 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8007ede:	683a      	ldr	r2, [r7, #0]
 8007ee0:	4904      	ldr	r1, [pc, #16]	@ (8007ef4 <USBD_HS_ProductStrDescriptor+0x34>)
 8007ee2:	4805      	ldr	r0, [pc, #20]	@ (8007ef8 <USBD_HS_ProductStrDescriptor+0x38>)
 8007ee4:	f7ff fe18 	bl	8007b18 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ee8:	4b02      	ldr	r3, [pc, #8]	@ (8007ef4 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3708      	adds	r7, #8
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	200014d0 	.word	0x200014d0
 8007ef8:	08008a40 	.word	0x08008a40

08007efc <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b082      	sub	sp, #8
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	4603      	mov	r3, r0
 8007f04:	6039      	str	r1, [r7, #0]
 8007f06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007f08:	683a      	ldr	r2, [r7, #0]
 8007f0a:	4904      	ldr	r1, [pc, #16]	@ (8007f1c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8007f0c:	4804      	ldr	r0, [pc, #16]	@ (8007f20 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8007f0e:	f7ff fe03 	bl	8007b18 <USBD_GetString>
  return USBD_StrDesc;
 8007f12:	4b02      	ldr	r3, [pc, #8]	@ (8007f1c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3708      	adds	r7, #8
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}
 8007f1c:	200014d0 	.word	0x200014d0
 8007f20:	08008a58 	.word	0x08008a58

08007f24 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	6039      	str	r1, [r7, #0]
 8007f2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	221a      	movs	r2, #26
 8007f34:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007f36:	f000 f855 	bl	8007fe4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8007f3a:	4b02      	ldr	r3, [pc, #8]	@ (8007f44 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3708      	adds	r7, #8
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	200000f0 	.word	0x200000f0

08007f48 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	4603      	mov	r3, r0
 8007f50:	6039      	str	r1, [r7, #0]
 8007f52:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007f54:	79fb      	ldrb	r3, [r7, #7]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d105      	bne.n	8007f66 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8007f5a:	683a      	ldr	r2, [r7, #0]
 8007f5c:	4907      	ldr	r1, [pc, #28]	@ (8007f7c <USBD_HS_ConfigStrDescriptor+0x34>)
 8007f5e:	4808      	ldr	r0, [pc, #32]	@ (8007f80 <USBD_HS_ConfigStrDescriptor+0x38>)
 8007f60:	f7ff fdda 	bl	8007b18 <USBD_GetString>
 8007f64:	e004      	b.n	8007f70 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8007f66:	683a      	ldr	r2, [r7, #0]
 8007f68:	4904      	ldr	r1, [pc, #16]	@ (8007f7c <USBD_HS_ConfigStrDescriptor+0x34>)
 8007f6a:	4805      	ldr	r0, [pc, #20]	@ (8007f80 <USBD_HS_ConfigStrDescriptor+0x38>)
 8007f6c:	f7ff fdd4 	bl	8007b18 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f70:	4b02      	ldr	r3, [pc, #8]	@ (8007f7c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3708      	adds	r7, #8
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	200014d0 	.word	0x200014d0
 8007f80:	08008a6c 	.word	0x08008a6c

08007f84 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	6039      	str	r1, [r7, #0]
 8007f8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f90:	79fb      	ldrb	r3, [r7, #7]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d105      	bne.n	8007fa2 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8007f96:	683a      	ldr	r2, [r7, #0]
 8007f98:	4907      	ldr	r1, [pc, #28]	@ (8007fb8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8007f9a:	4808      	ldr	r0, [pc, #32]	@ (8007fbc <USBD_HS_InterfaceStrDescriptor+0x38>)
 8007f9c:	f7ff fdbc 	bl	8007b18 <USBD_GetString>
 8007fa0:	e004      	b.n	8007fac <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8007fa2:	683a      	ldr	r2, [r7, #0]
 8007fa4:	4904      	ldr	r1, [pc, #16]	@ (8007fb8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8007fa6:	4805      	ldr	r0, [pc, #20]	@ (8007fbc <USBD_HS_InterfaceStrDescriptor+0x38>)
 8007fa8:	f7ff fdb6 	bl	8007b18 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007fac:	4b02      	ldr	r3, [pc, #8]	@ (8007fb8 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3708      	adds	r7, #8
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	200014d0 	.word	0x200014d0
 8007fbc:	08008a78 	.word	0x08008a78

08007fc0 <USBD_HS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b083      	sub	sp, #12
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	6039      	str	r1, [r7, #0]
 8007fca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_BOSDesc);
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	220c      	movs	r2, #12
 8007fd0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_HS_BOSDesc;
 8007fd2:	4b03      	ldr	r3, [pc, #12]	@ (8007fe0 <USBD_HS_USR_BOSDescriptor+0x20>)
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	370c      	adds	r7, #12
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr
 8007fe0:	200000e0 	.word	0x200000e0

08007fe4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007fea:	4b0f      	ldr	r3, [pc, #60]	@ (8008028 <Get_SerialNum+0x44>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007ff0:	4b0e      	ldr	r3, [pc, #56]	@ (800802c <Get_SerialNum+0x48>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8008030 <Get_SerialNum+0x4c>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007ffc:	68fa      	ldr	r2, [r7, #12]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4413      	add	r3, r2
 8008002:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d009      	beq.n	800801e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800800a:	2208      	movs	r2, #8
 800800c:	4909      	ldr	r1, [pc, #36]	@ (8008034 <Get_SerialNum+0x50>)
 800800e:	68f8      	ldr	r0, [r7, #12]
 8008010:	f000 f814 	bl	800803c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008014:	2204      	movs	r2, #4
 8008016:	4908      	ldr	r1, [pc, #32]	@ (8008038 <Get_SerialNum+0x54>)
 8008018:	68b8      	ldr	r0, [r7, #8]
 800801a:	f000 f80f 	bl	800803c <IntToUnicode>
  }
}
 800801e:	bf00      	nop
 8008020:	3710      	adds	r7, #16
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
 8008026:	bf00      	nop
 8008028:	1ff0f420 	.word	0x1ff0f420
 800802c:	1ff0f424 	.word	0x1ff0f424
 8008030:	1ff0f428 	.word	0x1ff0f428
 8008034:	200000f2 	.word	0x200000f2
 8008038:	20000102 	.word	0x20000102

0800803c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800803c:	b480      	push	{r7}
 800803e:	b087      	sub	sp, #28
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	4613      	mov	r3, r2
 8008048:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800804a:	2300      	movs	r3, #0
 800804c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800804e:	2300      	movs	r3, #0
 8008050:	75fb      	strb	r3, [r7, #23]
 8008052:	e027      	b.n	80080a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	0f1b      	lsrs	r3, r3, #28
 8008058:	2b09      	cmp	r3, #9
 800805a:	d80b      	bhi.n	8008074 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	0f1b      	lsrs	r3, r3, #28
 8008060:	b2da      	uxtb	r2, r3
 8008062:	7dfb      	ldrb	r3, [r7, #23]
 8008064:	005b      	lsls	r3, r3, #1
 8008066:	4619      	mov	r1, r3
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	440b      	add	r3, r1
 800806c:	3230      	adds	r2, #48	@ 0x30
 800806e:	b2d2      	uxtb	r2, r2
 8008070:	701a      	strb	r2, [r3, #0]
 8008072:	e00a      	b.n	800808a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	0f1b      	lsrs	r3, r3, #28
 8008078:	b2da      	uxtb	r2, r3
 800807a:	7dfb      	ldrb	r3, [r7, #23]
 800807c:	005b      	lsls	r3, r3, #1
 800807e:	4619      	mov	r1, r3
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	440b      	add	r3, r1
 8008084:	3237      	adds	r2, #55	@ 0x37
 8008086:	b2d2      	uxtb	r2, r2
 8008088:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	011b      	lsls	r3, r3, #4
 800808e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008090:	7dfb      	ldrb	r3, [r7, #23]
 8008092:	005b      	lsls	r3, r3, #1
 8008094:	3301      	adds	r3, #1
 8008096:	68ba      	ldr	r2, [r7, #8]
 8008098:	4413      	add	r3, r2
 800809a:	2200      	movs	r2, #0
 800809c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800809e:	7dfb      	ldrb	r3, [r7, #23]
 80080a0:	3301      	adds	r3, #1
 80080a2:	75fb      	strb	r3, [r7, #23]
 80080a4:	7dfa      	ldrb	r2, [r7, #23]
 80080a6:	79fb      	ldrb	r3, [r7, #7]
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d3d3      	bcc.n	8008054 <IntToUnicode+0x18>
  }
}
 80080ac:	bf00      	nop
 80080ae:	bf00      	nop
 80080b0:	371c      	adds	r7, #28
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr
	...

080080bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b0aa      	sub	sp, #168	@ 0xa8
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080c4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80080c8:	2200      	movs	r2, #0
 80080ca:	601a      	str	r2, [r3, #0]
 80080cc:	605a      	str	r2, [r3, #4]
 80080ce:	609a      	str	r2, [r3, #8]
 80080d0:	60da      	str	r2, [r3, #12]
 80080d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80080d4:	f107 0310 	add.w	r3, r7, #16
 80080d8:	2284      	movs	r2, #132	@ 0x84
 80080da:	2100      	movs	r1, #0
 80080dc:	4618      	mov	r0, r3
 80080de:	f000 fc15 	bl	800890c <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a26      	ldr	r2, [pc, #152]	@ (8008180 <HAL_PCD_MspInit+0xc4>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d145      	bne.n	8008178 <HAL_PCD_MspInit+0xbc>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80080ec:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80080f0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80080f2:	2300      	movs	r3, #0
 80080f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80080f8:	f107 0310 	add.w	r3, r7, #16
 80080fc:	4618      	mov	r0, r3
 80080fe:	f7fb fe05 	bl	8003d0c <HAL_RCCEx_PeriphCLKConfig>
 8008102:	4603      	mov	r3, r0
 8008104:	2b00      	cmp	r3, #0
 8008106:	d001      	beq.n	800810c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8008108:	f7f8 fbac 	bl	8000864 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800810c:	4b1d      	ldr	r3, [pc, #116]	@ (8008184 <HAL_PCD_MspInit+0xc8>)
 800810e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008110:	4a1c      	ldr	r2, [pc, #112]	@ (8008184 <HAL_PCD_MspInit+0xc8>)
 8008112:	f043 0302 	orr.w	r3, r3, #2
 8008116:	6313      	str	r3, [r2, #48]	@ 0x30
 8008118:	4b1a      	ldr	r3, [pc, #104]	@ (8008184 <HAL_PCD_MspInit+0xc8>)
 800811a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800811c:	f003 0302 	and.w	r3, r3, #2
 8008120:	60fb      	str	r3, [r7, #12]
 8008122:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8008124:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8008128:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800812c:	2302      	movs	r3, #2
 800812e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008132:	2300      	movs	r3, #0
 8008134:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008138:	2303      	movs	r3, #3
 800813a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800813e:	230c      	movs	r3, #12
 8008140:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008144:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8008148:	4619      	mov	r1, r3
 800814a:	480f      	ldr	r0, [pc, #60]	@ (8008188 <HAL_PCD_MspInit+0xcc>)
 800814c:	f7f9 fca6 	bl	8001a9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8008150:	4b0c      	ldr	r3, [pc, #48]	@ (8008184 <HAL_PCD_MspInit+0xc8>)
 8008152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008154:	4a0b      	ldr	r2, [pc, #44]	@ (8008184 <HAL_PCD_MspInit+0xc8>)
 8008156:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800815a:	6313      	str	r3, [r2, #48]	@ 0x30
 800815c:	4b09      	ldr	r3, [pc, #36]	@ (8008184 <HAL_PCD_MspInit+0xc8>)
 800815e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008160:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008164:	60bb      	str	r3, [r7, #8]
 8008166:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8008168:	2200      	movs	r2, #0
 800816a:	2100      	movs	r1, #0
 800816c:	204d      	movs	r0, #77	@ 0x4d
 800816e:	f7f9 fc5e 	bl	8001a2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8008172:	204d      	movs	r0, #77	@ 0x4d
 8008174:	f7f9 fc77 	bl	8001a66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8008178:	bf00      	nop
 800817a:	37a8      	adds	r7, #168	@ 0xa8
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}
 8008180:	40040000 	.word	0x40040000
 8008184:	40023800 	.word	0x40023800
 8008188:	40020400 	.word	0x40020400

0800818c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 2504 	ldr.w	r2, [r3, #1284]	@ 0x504
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80081a0:	4619      	mov	r1, r3
 80081a2:	4610      	mov	r0, r2
 80081a4:	f7fe fb31 	bl	800680a <USBD_LL_SetupStage>
}
 80081a8:	bf00      	nop
 80081aa:	3708      	adds	r7, #8
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b082      	sub	sp, #8
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	460b      	mov	r3, r1
 80081ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8d3 0504 	ldr.w	r0, [r3, #1284]	@ 0x504
 80081c2:	78fa      	ldrb	r2, [r7, #3]
 80081c4:	6879      	ldr	r1, [r7, #4]
 80081c6:	4613      	mov	r3, r2
 80081c8:	00db      	lsls	r3, r3, #3
 80081ca:	4413      	add	r3, r2
 80081cc:	009b      	lsls	r3, r3, #2
 80081ce:	440b      	add	r3, r1
 80081d0:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	78fb      	ldrb	r3, [r7, #3]
 80081d8:	4619      	mov	r1, r3
 80081da:	f7fe fb6b 	bl	80068b4 <USBD_LL_DataOutStage>
}
 80081de:	bf00      	nop
 80081e0:	3708      	adds	r7, #8
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}

080081e6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081e6:	b580      	push	{r7, lr}
 80081e8:	b082      	sub	sp, #8
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
 80081ee:	460b      	mov	r3, r1
 80081f0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8d3 0504 	ldr.w	r0, [r3, #1284]	@ 0x504
 80081f8:	78fa      	ldrb	r2, [r7, #3]
 80081fa:	6879      	ldr	r1, [r7, #4]
 80081fc:	4613      	mov	r3, r2
 80081fe:	00db      	lsls	r3, r3, #3
 8008200:	4413      	add	r3, r2
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	440b      	add	r3, r1
 8008206:	334c      	adds	r3, #76	@ 0x4c
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	78fb      	ldrb	r3, [r7, #3]
 800820c:	4619      	mov	r1, r3
 800820e:	f7fe fc04 	bl	8006a1a <USBD_LL_DataInStage>
}
 8008212:	bf00      	nop
 8008214:	3708      	adds	r7, #8
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}

0800821a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800821a:	b580      	push	{r7, lr}
 800821c:	b082      	sub	sp, #8
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8008228:	4618      	mov	r0, r3
 800822a:	f7fe fd38 	bl	8006c9e <USBD_LL_SOF>
}
 800822e:	bf00      	nop
 8008230:	3708      	adds	r7, #8
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}

08008236 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008236:	b580      	push	{r7, lr}
 8008238:	b084      	sub	sp, #16
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800823e:	2301      	movs	r3, #1
 8008240:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	68db      	ldr	r3, [r3, #12]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d102      	bne.n	8008250 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800824a:	2300      	movs	r3, #0
 800824c:	73fb      	strb	r3, [r7, #15]
 800824e:	e008      	b.n	8008262 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	68db      	ldr	r3, [r3, #12]
 8008254:	2b02      	cmp	r3, #2
 8008256:	d102      	bne.n	800825e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008258:	2301      	movs	r3, #1
 800825a:	73fb      	strb	r3, [r7, #15]
 800825c:	e001      	b.n	8008262 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800825e:	f7f8 fb01 	bl	8000864 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8008268:	7bfa      	ldrb	r2, [r7, #15]
 800826a:	4611      	mov	r1, r2
 800826c:	4618      	mov	r0, r3
 800826e:	f7fe fcd8 	bl	8006c22 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8008278:	4618      	mov	r0, r3
 800827a:	f7fe fc80 	bl	8006b7e <USBD_LL_Reset>
}
 800827e:	bf00      	nop
 8008280:	3710      	adds	r7, #16
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
	...

08008288 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b082      	sub	sp, #8
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8008296:	4618      	mov	r0, r3
 8008298:	f7fe fcd3 	bl	8006c42 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	6812      	ldr	r2, [r2, #0]
 80082aa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80082ae:	f043 0301 	orr.w	r3, r3, #1
 80082b2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6a1b      	ldr	r3, [r3, #32]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d005      	beq.n	80082c8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80082bc:	4b04      	ldr	r3, [pc, #16]	@ (80082d0 <HAL_PCD_SuspendCallback+0x48>)
 80082be:	691b      	ldr	r3, [r3, #16]
 80082c0:	4a03      	ldr	r2, [pc, #12]	@ (80082d0 <HAL_PCD_SuspendCallback+0x48>)
 80082c2:	f043 0306 	orr.w	r3, r3, #6
 80082c6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80082c8:	bf00      	nop
 80082ca:	3708      	adds	r7, #8
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	e000ed00 	.word	0xe000ed00

080082d4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7fe fcc3 	bl	8006c6e <USBD_LL_Resume>
}
 80082e8:	bf00      	nop
 80082ea:	3708      	adds	r7, #8
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b082      	sub	sp, #8
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	460b      	mov	r3, r1
 80082fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8008302:	78fa      	ldrb	r2, [r7, #3]
 8008304:	4611      	mov	r1, r2
 8008306:	4618      	mov	r0, r3
 8008308:	f7fe fd1b 	bl	8006d42 <USBD_LL_IsoOUTIncomplete>
}
 800830c:	bf00      	nop
 800830e:	3708      	adds	r7, #8
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b082      	sub	sp, #8
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	460b      	mov	r3, r1
 800831e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8008326:	78fa      	ldrb	r2, [r7, #3]
 8008328:	4611      	mov	r1, r2
 800832a:	4618      	mov	r0, r3
 800832c:	f7fe fcd7 	bl	8006cde <USBD_LL_IsoINIncomplete>
}
 8008330:	bf00      	nop
 8008332:	3708      	adds	r7, #8
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8008346:	4618      	mov	r0, r3
 8008348:	f7fe fd2d 	bl	8006da6 <USBD_LL_DevConnected>
}
 800834c:	bf00      	nop
 800834e:	3708      	adds	r7, #8
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b082      	sub	sp, #8
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8008362:	4618      	mov	r0, r3
 8008364:	f7fe fd2a 	bl	8006dbc <USBD_LL_DevDisconnected>
}
 8008368:	bf00      	nop
 800836a:	3708      	adds	r7, #8
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b082      	sub	sp, #8
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	2b01      	cmp	r3, #1
 800837e:	d140      	bne.n	8008402 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8008380:	4a22      	ldr	r2, [pc, #136]	@ (800840c <USBD_LL_Init+0x9c>)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8c2 3504 	str.w	r3, [r2, #1284]	@ 0x504
  pdev->pData = &hpcd_USB_OTG_HS;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	4a20      	ldr	r2, [pc, #128]	@ (800840c <USBD_LL_Init+0x9c>)
 800838c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8008390:	4b1e      	ldr	r3, [pc, #120]	@ (800840c <USBD_LL_Init+0x9c>)
 8008392:	4a1f      	ldr	r2, [pc, #124]	@ (8008410 <USBD_LL_Init+0xa0>)
 8008394:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 8;
 8008396:	4b1d      	ldr	r3, [pc, #116]	@ (800840c <USBD_LL_Init+0x9c>)
 8008398:	2208      	movs	r2, #8
 800839a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800839c:	4b1b      	ldr	r3, [pc, #108]	@ (800840c <USBD_LL_Init+0x9c>)
 800839e:	2202      	movs	r2, #2
 80083a0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80083a2:	4b1a      	ldr	r3, [pc, #104]	@ (800840c <USBD_LL_Init+0x9c>)
 80083a4:	2200      	movs	r2, #0
 80083a6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80083a8:	4b18      	ldr	r3, [pc, #96]	@ (800840c <USBD_LL_Init+0x9c>)
 80083aa:	2202      	movs	r2, #2
 80083ac:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80083ae:	4b17      	ldr	r3, [pc, #92]	@ (800840c <USBD_LL_Init+0x9c>)
 80083b0:	2200      	movs	r2, #0
 80083b2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80083b4:	4b15      	ldr	r3, [pc, #84]	@ (800840c <USBD_LL_Init+0x9c>)
 80083b6:	2200      	movs	r2, #0
 80083b8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80083ba:	4b14      	ldr	r3, [pc, #80]	@ (800840c <USBD_LL_Init+0x9c>)
 80083bc:	2200      	movs	r2, #0
 80083be:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80083c0:	4b12      	ldr	r3, [pc, #72]	@ (800840c <USBD_LL_Init+0x9c>)
 80083c2:	2200      	movs	r2, #0
 80083c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80083c6:	4b11      	ldr	r3, [pc, #68]	@ (800840c <USBD_LL_Init+0x9c>)
 80083c8:	2200      	movs	r2, #0
 80083ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80083cc:	4b0f      	ldr	r3, [pc, #60]	@ (800840c <USBD_LL_Init+0x9c>)
 80083ce:	2200      	movs	r2, #0
 80083d0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80083d2:	480e      	ldr	r0, [pc, #56]	@ (800840c <USBD_LL_Init+0x9c>)
 80083d4:	f7f9 fd41 	bl	8001e5a <HAL_PCD_Init>
 80083d8:	4603      	mov	r3, r0
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d001      	beq.n	80083e2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80083de:	f7f8 fa41 	bl	8000864 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 80083e2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80083e6:	4809      	ldr	r0, [pc, #36]	@ (800840c <USBD_LL_Init+0x9c>)
 80083e8:	f7fa ffbb 	bl	8003362 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 80083ec:	2280      	movs	r2, #128	@ 0x80
 80083ee:	2100      	movs	r1, #0
 80083f0:	4806      	ldr	r0, [pc, #24]	@ (800840c <USBD_LL_Init+0x9c>)
 80083f2:	f7fa ff6f 	bl	80032d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 80083f6:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 80083fa:	2101      	movs	r1, #1
 80083fc:	4803      	ldr	r0, [pc, #12]	@ (800840c <USBD_LL_Init+0x9c>)
 80083fe:	f7fa ff69 	bl	80032d4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008402:	2300      	movs	r3, #0
}
 8008404:	4618      	mov	r0, r3
 8008406:	3708      	adds	r7, #8
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}
 800840c:	200016d0 	.word	0x200016d0
 8008410:	40040000 	.word	0x40040000

08008414 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800841c:	2300      	movs	r3, #0
 800841e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008420:	2300      	movs	r3, #0
 8008422:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800842a:	4618      	mov	r0, r3
 800842c:	f7f9 fe39 	bl	80020a2 <HAL_PCD_Start>
 8008430:	4603      	mov	r3, r0
 8008432:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008434:	7bfb      	ldrb	r3, [r7, #15]
 8008436:	4618      	mov	r0, r3
 8008438:	f000 f97e 	bl	8008738 <USBD_Get_USB_Status>
 800843c:	4603      	mov	r3, r0
 800843e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008440:	7bbb      	ldrb	r3, [r7, #14]
}
 8008442:	4618      	mov	r0, r3
 8008444:	3710      	adds	r7, #16
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}

0800844a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800844a:	b580      	push	{r7, lr}
 800844c:	b084      	sub	sp, #16
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
 8008452:	4608      	mov	r0, r1
 8008454:	4611      	mov	r1, r2
 8008456:	461a      	mov	r2, r3
 8008458:	4603      	mov	r3, r0
 800845a:	70fb      	strb	r3, [r7, #3]
 800845c:	460b      	mov	r3, r1
 800845e:	70bb      	strb	r3, [r7, #2]
 8008460:	4613      	mov	r3, r2
 8008462:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008464:	2300      	movs	r3, #0
 8008466:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008468:	2300      	movs	r3, #0
 800846a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008472:	78bb      	ldrb	r3, [r7, #2]
 8008474:	883a      	ldrh	r2, [r7, #0]
 8008476:	78f9      	ldrb	r1, [r7, #3]
 8008478:	f7fa fb26 	bl	8002ac8 <HAL_PCD_EP_Open>
 800847c:	4603      	mov	r3, r0
 800847e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008480:	7bfb      	ldrb	r3, [r7, #15]
 8008482:	4618      	mov	r0, r3
 8008484:	f000 f958 	bl	8008738 <USBD_Get_USB_Status>
 8008488:	4603      	mov	r3, r0
 800848a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800848c:	7bbb      	ldrb	r3, [r7, #14]
}
 800848e:	4618      	mov	r0, r3
 8008490:	3710      	adds	r7, #16
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}

08008496 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008496:	b580      	push	{r7, lr}
 8008498:	b084      	sub	sp, #16
 800849a:	af00      	add	r7, sp, #0
 800849c:	6078      	str	r0, [r7, #4]
 800849e:	460b      	mov	r3, r1
 80084a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084a2:	2300      	movs	r3, #0
 80084a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084a6:	2300      	movs	r3, #0
 80084a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80084b0:	78fa      	ldrb	r2, [r7, #3]
 80084b2:	4611      	mov	r1, r2
 80084b4:	4618      	mov	r0, r3
 80084b6:	f7fa fb6f 	bl	8002b98 <HAL_PCD_EP_Close>
 80084ba:	4603      	mov	r3, r0
 80084bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084be:	7bfb      	ldrb	r3, [r7, #15]
 80084c0:	4618      	mov	r0, r3
 80084c2:	f000 f939 	bl	8008738 <USBD_Get_USB_Status>
 80084c6:	4603      	mov	r3, r0
 80084c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3710      	adds	r7, #16
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	460b      	mov	r3, r1
 80084de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084e0:	2300      	movs	r3, #0
 80084e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084e4:	2300      	movs	r3, #0
 80084e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80084ee:	78fa      	ldrb	r2, [r7, #3]
 80084f0:	4611      	mov	r1, r2
 80084f2:	4618      	mov	r0, r3
 80084f4:	f7fa fc47 	bl	8002d86 <HAL_PCD_EP_SetStall>
 80084f8:	4603      	mov	r3, r0
 80084fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084fc:	7bfb      	ldrb	r3, [r7, #15]
 80084fe:	4618      	mov	r0, r3
 8008500:	f000 f91a 	bl	8008738 <USBD_Get_USB_Status>
 8008504:	4603      	mov	r3, r0
 8008506:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008508:	7bbb      	ldrb	r3, [r7, #14]
}
 800850a:	4618      	mov	r0, r3
 800850c:	3710      	adds	r7, #16
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008512:	b580      	push	{r7, lr}
 8008514:	b084      	sub	sp, #16
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
 800851a:	460b      	mov	r3, r1
 800851c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800851e:	2300      	movs	r3, #0
 8008520:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008522:	2300      	movs	r3, #0
 8008524:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800852c:	78fa      	ldrb	r2, [r7, #3]
 800852e:	4611      	mov	r1, r2
 8008530:	4618      	mov	r0, r3
 8008532:	f7fa fc8c 	bl	8002e4e <HAL_PCD_EP_ClrStall>
 8008536:	4603      	mov	r3, r0
 8008538:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800853a:	7bfb      	ldrb	r3, [r7, #15]
 800853c:	4618      	mov	r0, r3
 800853e:	f000 f8fb 	bl	8008738 <USBD_Get_USB_Status>
 8008542:	4603      	mov	r3, r0
 8008544:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008546:	7bbb      	ldrb	r3, [r7, #14]
}
 8008548:	4618      	mov	r0, r3
 800854a:	3710      	adds	r7, #16
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008550:	b480      	push	{r7}
 8008552:	b085      	sub	sp, #20
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	460b      	mov	r3, r1
 800855a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008562:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008564:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008568:	2b00      	cmp	r3, #0
 800856a:	da0b      	bge.n	8008584 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800856c:	78fb      	ldrb	r3, [r7, #3]
 800856e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008572:	68f9      	ldr	r1, [r7, #12]
 8008574:	4613      	mov	r3, r2
 8008576:	00db      	lsls	r3, r3, #3
 8008578:	4413      	add	r3, r2
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	440b      	add	r3, r1
 800857e:	333e      	adds	r3, #62	@ 0x3e
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	e00b      	b.n	800859c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008584:	78fb      	ldrb	r3, [r7, #3]
 8008586:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800858a:	68f9      	ldr	r1, [r7, #12]
 800858c:	4613      	mov	r3, r2
 800858e:	00db      	lsls	r3, r3, #3
 8008590:	4413      	add	r3, r2
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	440b      	add	r3, r1
 8008596:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800859a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800859c:	4618      	mov	r0, r3
 800859e:	3714      	adds	r7, #20
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b084      	sub	sp, #16
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	460b      	mov	r3, r1
 80085b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085b4:	2300      	movs	r3, #0
 80085b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085b8:	2300      	movs	r3, #0
 80085ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80085c2:	78fa      	ldrb	r2, [r7, #3]
 80085c4:	4611      	mov	r1, r2
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7fa fa59 	bl	8002a7e <HAL_PCD_SetAddress>
 80085cc:	4603      	mov	r3, r0
 80085ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085d0:	7bfb      	ldrb	r3, [r7, #15]
 80085d2:	4618      	mov	r0, r3
 80085d4:	f000 f8b0 	bl	8008738 <USBD_Get_USB_Status>
 80085d8:	4603      	mov	r3, r0
 80085da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3710      	adds	r7, #16
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}

080085e6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80085e6:	b580      	push	{r7, lr}
 80085e8:	b086      	sub	sp, #24
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	60f8      	str	r0, [r7, #12]
 80085ee:	607a      	str	r2, [r7, #4]
 80085f0:	603b      	str	r3, [r7, #0]
 80085f2:	460b      	mov	r3, r1
 80085f4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085f6:	2300      	movs	r3, #0
 80085f8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085fa:	2300      	movs	r3, #0
 80085fc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008604:	7af9      	ldrb	r1, [r7, #11]
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	f7fa fb72 	bl	8002cf2 <HAL_PCD_EP_Transmit>
 800860e:	4603      	mov	r3, r0
 8008610:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008612:	7dfb      	ldrb	r3, [r7, #23]
 8008614:	4618      	mov	r0, r3
 8008616:	f000 f88f 	bl	8008738 <USBD_Get_USB_Status>
 800861a:	4603      	mov	r3, r0
 800861c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800861e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008620:	4618      	mov	r0, r3
 8008622:	3718      	adds	r7, #24
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b086      	sub	sp, #24
 800862c:	af00      	add	r7, sp, #0
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	607a      	str	r2, [r7, #4]
 8008632:	603b      	str	r3, [r7, #0]
 8008634:	460b      	mov	r3, r1
 8008636:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008638:	2300      	movs	r3, #0
 800863a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800863c:	2300      	movs	r3, #0
 800863e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008646:	7af9      	ldrb	r1, [r7, #11]
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	687a      	ldr	r2, [r7, #4]
 800864c:	f7fa faee 	bl	8002c2c <HAL_PCD_EP_Receive>
 8008650:	4603      	mov	r3, r0
 8008652:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008654:	7dfb      	ldrb	r3, [r7, #23]
 8008656:	4618      	mov	r0, r3
 8008658:	f000 f86e 	bl	8008738 <USBD_Get_USB_Status>
 800865c:	4603      	mov	r3, r0
 800865e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008660:	7dbb      	ldrb	r3, [r7, #22]
}
 8008662:	4618      	mov	r0, r3
 8008664:	3718      	adds	r7, #24
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}

0800866a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800866a:	b580      	push	{r7, lr}
 800866c:	b082      	sub	sp, #8
 800866e:	af00      	add	r7, sp, #0
 8008670:	6078      	str	r0, [r7, #4]
 8008672:	460b      	mov	r3, r1
 8008674:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800867c:	78fa      	ldrb	r2, [r7, #3]
 800867e:	4611      	mov	r1, r2
 8008680:	4618      	mov	r0, r3
 8008682:	f7fa fb1e 	bl	8002cc2 <HAL_PCD_EP_GetRxCount>
 8008686:	4603      	mov	r3, r0
}
 8008688:	4618      	mov	r0, r3
 800868a:	3708      	adds	r7, #8
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	460b      	mov	r3, r1
 800869a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800869c:	78fb      	ldrb	r3, [r7, #3]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d002      	beq.n	80086a8 <HAL_PCDEx_LPM_Callback+0x18>
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d01f      	beq.n	80086e6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80086a6:	e03b      	b.n	8008720 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6a1b      	ldr	r3, [r3, #32]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d007      	beq.n	80086c0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80086b0:	f000 f83c 	bl	800872c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80086b4:	4b1c      	ldr	r3, [pc, #112]	@ (8008728 <HAL_PCDEx_LPM_Callback+0x98>)
 80086b6:	691b      	ldr	r3, [r3, #16]
 80086b8:	4a1b      	ldr	r2, [pc, #108]	@ (8008728 <HAL_PCDEx_LPM_Callback+0x98>)
 80086ba:	f023 0306 	bic.w	r3, r3, #6
 80086be:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	687a      	ldr	r2, [r7, #4]
 80086cc:	6812      	ldr	r2, [r2, #0]
 80086ce:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80086d2:	f023 0301 	bic.w	r3, r3, #1
 80086d6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 80086de:	4618      	mov	r0, r3
 80086e0:	f7fe fac5 	bl	8006c6e <USBD_LL_Resume>
    break;
 80086e4:	e01c      	b.n	8008720 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	6812      	ldr	r2, [r2, #0]
 80086f4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80086f8:	f043 0301 	orr.w	r3, r3, #1
 80086fc:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f8d3 3504 	ldr.w	r3, [r3, #1284]	@ 0x504
 8008704:	4618      	mov	r0, r3
 8008706:	f7fe fa9c 	bl	8006c42 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6a1b      	ldr	r3, [r3, #32]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d005      	beq.n	800871e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008712:	4b05      	ldr	r3, [pc, #20]	@ (8008728 <HAL_PCDEx_LPM_Callback+0x98>)
 8008714:	691b      	ldr	r3, [r3, #16]
 8008716:	4a04      	ldr	r2, [pc, #16]	@ (8008728 <HAL_PCDEx_LPM_Callback+0x98>)
 8008718:	f043 0306 	orr.w	r3, r3, #6
 800871c:	6113      	str	r3, [r2, #16]
    break;
 800871e:	bf00      	nop
}
 8008720:	bf00      	nop
 8008722:	3708      	adds	r7, #8
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}
 8008728:	e000ed00 	.word	0xe000ed00

0800872c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008730:	f7f7 ff34 	bl	800059c <SystemClock_Config>
}
 8008734:	bf00      	nop
 8008736:	bd80      	pop	{r7, pc}

08008738 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008738:	b480      	push	{r7}
 800873a:	b085      	sub	sp, #20
 800873c:	af00      	add	r7, sp, #0
 800873e:	4603      	mov	r3, r0
 8008740:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008742:	2300      	movs	r3, #0
 8008744:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008746:	79fb      	ldrb	r3, [r7, #7]
 8008748:	2b03      	cmp	r3, #3
 800874a:	d817      	bhi.n	800877c <USBD_Get_USB_Status+0x44>
 800874c:	a201      	add	r2, pc, #4	@ (adr r2, 8008754 <USBD_Get_USB_Status+0x1c>)
 800874e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008752:	bf00      	nop
 8008754:	08008765 	.word	0x08008765
 8008758:	0800876b 	.word	0x0800876b
 800875c:	08008771 	.word	0x08008771
 8008760:	08008777 	.word	0x08008777
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008764:	2300      	movs	r3, #0
 8008766:	73fb      	strb	r3, [r7, #15]
    break;
 8008768:	e00b      	b.n	8008782 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800876a:	2303      	movs	r3, #3
 800876c:	73fb      	strb	r3, [r7, #15]
    break;
 800876e:	e008      	b.n	8008782 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008770:	2301      	movs	r3, #1
 8008772:	73fb      	strb	r3, [r7, #15]
    break;
 8008774:	e005      	b.n	8008782 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008776:	2303      	movs	r3, #3
 8008778:	73fb      	strb	r3, [r7, #15]
    break;
 800877a:	e002      	b.n	8008782 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800877c:	2303      	movs	r3, #3
 800877e:	73fb      	strb	r3, [r7, #15]
    break;
 8008780:	bf00      	nop
  }
  return usb_status;
 8008782:	7bfb      	ldrb	r3, [r7, #15]
}
 8008784:	4618      	mov	r0, r3
 8008786:	3714      	adds	r7, #20
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr

08008790 <malloc>:
 8008790:	4b02      	ldr	r3, [pc, #8]	@ (800879c <malloc+0xc>)
 8008792:	4601      	mov	r1, r0
 8008794:	6818      	ldr	r0, [r3, #0]
 8008796:	f000 b82d 	b.w	80087f4 <_malloc_r>
 800879a:	bf00      	nop
 800879c:	2000010c 	.word	0x2000010c

080087a0 <free>:
 80087a0:	4b02      	ldr	r3, [pc, #8]	@ (80087ac <free+0xc>)
 80087a2:	4601      	mov	r1, r0
 80087a4:	6818      	ldr	r0, [r3, #0]
 80087a6:	f000 b8f5 	b.w	8008994 <_free_r>
 80087aa:	bf00      	nop
 80087ac:	2000010c 	.word	0x2000010c

080087b0 <sbrk_aligned>:
 80087b0:	b570      	push	{r4, r5, r6, lr}
 80087b2:	4e0f      	ldr	r6, [pc, #60]	@ (80087f0 <sbrk_aligned+0x40>)
 80087b4:	460c      	mov	r4, r1
 80087b6:	6831      	ldr	r1, [r6, #0]
 80087b8:	4605      	mov	r5, r0
 80087ba:	b911      	cbnz	r1, 80087c2 <sbrk_aligned+0x12>
 80087bc:	f000 f8ae 	bl	800891c <_sbrk_r>
 80087c0:	6030      	str	r0, [r6, #0]
 80087c2:	4621      	mov	r1, r4
 80087c4:	4628      	mov	r0, r5
 80087c6:	f000 f8a9 	bl	800891c <_sbrk_r>
 80087ca:	1c43      	adds	r3, r0, #1
 80087cc:	d103      	bne.n	80087d6 <sbrk_aligned+0x26>
 80087ce:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80087d2:	4620      	mov	r0, r4
 80087d4:	bd70      	pop	{r4, r5, r6, pc}
 80087d6:	1cc4      	adds	r4, r0, #3
 80087d8:	f024 0403 	bic.w	r4, r4, #3
 80087dc:	42a0      	cmp	r0, r4
 80087de:	d0f8      	beq.n	80087d2 <sbrk_aligned+0x22>
 80087e0:	1a21      	subs	r1, r4, r0
 80087e2:	4628      	mov	r0, r5
 80087e4:	f000 f89a 	bl	800891c <_sbrk_r>
 80087e8:	3001      	adds	r0, #1
 80087ea:	d1f2      	bne.n	80087d2 <sbrk_aligned+0x22>
 80087ec:	e7ef      	b.n	80087ce <sbrk_aligned+0x1e>
 80087ee:	bf00      	nop
 80087f0:	20001bd8 	.word	0x20001bd8

080087f4 <_malloc_r>:
 80087f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087f8:	1ccd      	adds	r5, r1, #3
 80087fa:	f025 0503 	bic.w	r5, r5, #3
 80087fe:	3508      	adds	r5, #8
 8008800:	2d0c      	cmp	r5, #12
 8008802:	bf38      	it	cc
 8008804:	250c      	movcc	r5, #12
 8008806:	2d00      	cmp	r5, #0
 8008808:	4606      	mov	r6, r0
 800880a:	db01      	blt.n	8008810 <_malloc_r+0x1c>
 800880c:	42a9      	cmp	r1, r5
 800880e:	d904      	bls.n	800881a <_malloc_r+0x26>
 8008810:	230c      	movs	r3, #12
 8008812:	6033      	str	r3, [r6, #0]
 8008814:	2000      	movs	r0, #0
 8008816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800881a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80088f0 <_malloc_r+0xfc>
 800881e:	f000 f869 	bl	80088f4 <__malloc_lock>
 8008822:	f8d8 3000 	ldr.w	r3, [r8]
 8008826:	461c      	mov	r4, r3
 8008828:	bb44      	cbnz	r4, 800887c <_malloc_r+0x88>
 800882a:	4629      	mov	r1, r5
 800882c:	4630      	mov	r0, r6
 800882e:	f7ff ffbf 	bl	80087b0 <sbrk_aligned>
 8008832:	1c43      	adds	r3, r0, #1
 8008834:	4604      	mov	r4, r0
 8008836:	d158      	bne.n	80088ea <_malloc_r+0xf6>
 8008838:	f8d8 4000 	ldr.w	r4, [r8]
 800883c:	4627      	mov	r7, r4
 800883e:	2f00      	cmp	r7, #0
 8008840:	d143      	bne.n	80088ca <_malloc_r+0xd6>
 8008842:	2c00      	cmp	r4, #0
 8008844:	d04b      	beq.n	80088de <_malloc_r+0xea>
 8008846:	6823      	ldr	r3, [r4, #0]
 8008848:	4639      	mov	r1, r7
 800884a:	4630      	mov	r0, r6
 800884c:	eb04 0903 	add.w	r9, r4, r3
 8008850:	f000 f864 	bl	800891c <_sbrk_r>
 8008854:	4581      	cmp	r9, r0
 8008856:	d142      	bne.n	80088de <_malloc_r+0xea>
 8008858:	6821      	ldr	r1, [r4, #0]
 800885a:	1a6d      	subs	r5, r5, r1
 800885c:	4629      	mov	r1, r5
 800885e:	4630      	mov	r0, r6
 8008860:	f7ff ffa6 	bl	80087b0 <sbrk_aligned>
 8008864:	3001      	adds	r0, #1
 8008866:	d03a      	beq.n	80088de <_malloc_r+0xea>
 8008868:	6823      	ldr	r3, [r4, #0]
 800886a:	442b      	add	r3, r5
 800886c:	6023      	str	r3, [r4, #0]
 800886e:	f8d8 3000 	ldr.w	r3, [r8]
 8008872:	685a      	ldr	r2, [r3, #4]
 8008874:	bb62      	cbnz	r2, 80088d0 <_malloc_r+0xdc>
 8008876:	f8c8 7000 	str.w	r7, [r8]
 800887a:	e00f      	b.n	800889c <_malloc_r+0xa8>
 800887c:	6822      	ldr	r2, [r4, #0]
 800887e:	1b52      	subs	r2, r2, r5
 8008880:	d420      	bmi.n	80088c4 <_malloc_r+0xd0>
 8008882:	2a0b      	cmp	r2, #11
 8008884:	d917      	bls.n	80088b6 <_malloc_r+0xc2>
 8008886:	1961      	adds	r1, r4, r5
 8008888:	42a3      	cmp	r3, r4
 800888a:	6025      	str	r5, [r4, #0]
 800888c:	bf18      	it	ne
 800888e:	6059      	strne	r1, [r3, #4]
 8008890:	6863      	ldr	r3, [r4, #4]
 8008892:	bf08      	it	eq
 8008894:	f8c8 1000 	streq.w	r1, [r8]
 8008898:	5162      	str	r2, [r4, r5]
 800889a:	604b      	str	r3, [r1, #4]
 800889c:	4630      	mov	r0, r6
 800889e:	f000 f82f 	bl	8008900 <__malloc_unlock>
 80088a2:	f104 000b 	add.w	r0, r4, #11
 80088a6:	1d23      	adds	r3, r4, #4
 80088a8:	f020 0007 	bic.w	r0, r0, #7
 80088ac:	1ac2      	subs	r2, r0, r3
 80088ae:	bf1c      	itt	ne
 80088b0:	1a1b      	subne	r3, r3, r0
 80088b2:	50a3      	strne	r3, [r4, r2]
 80088b4:	e7af      	b.n	8008816 <_malloc_r+0x22>
 80088b6:	6862      	ldr	r2, [r4, #4]
 80088b8:	42a3      	cmp	r3, r4
 80088ba:	bf0c      	ite	eq
 80088bc:	f8c8 2000 	streq.w	r2, [r8]
 80088c0:	605a      	strne	r2, [r3, #4]
 80088c2:	e7eb      	b.n	800889c <_malloc_r+0xa8>
 80088c4:	4623      	mov	r3, r4
 80088c6:	6864      	ldr	r4, [r4, #4]
 80088c8:	e7ae      	b.n	8008828 <_malloc_r+0x34>
 80088ca:	463c      	mov	r4, r7
 80088cc:	687f      	ldr	r7, [r7, #4]
 80088ce:	e7b6      	b.n	800883e <_malloc_r+0x4a>
 80088d0:	461a      	mov	r2, r3
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	42a3      	cmp	r3, r4
 80088d6:	d1fb      	bne.n	80088d0 <_malloc_r+0xdc>
 80088d8:	2300      	movs	r3, #0
 80088da:	6053      	str	r3, [r2, #4]
 80088dc:	e7de      	b.n	800889c <_malloc_r+0xa8>
 80088de:	230c      	movs	r3, #12
 80088e0:	6033      	str	r3, [r6, #0]
 80088e2:	4630      	mov	r0, r6
 80088e4:	f000 f80c 	bl	8008900 <__malloc_unlock>
 80088e8:	e794      	b.n	8008814 <_malloc_r+0x20>
 80088ea:	6005      	str	r5, [r0, #0]
 80088ec:	e7d6      	b.n	800889c <_malloc_r+0xa8>
 80088ee:	bf00      	nop
 80088f0:	20001bdc 	.word	0x20001bdc

080088f4 <__malloc_lock>:
 80088f4:	4801      	ldr	r0, [pc, #4]	@ (80088fc <__malloc_lock+0x8>)
 80088f6:	f000 b84b 	b.w	8008990 <__retarget_lock_acquire_recursive>
 80088fa:	bf00      	nop
 80088fc:	20001d18 	.word	0x20001d18

08008900 <__malloc_unlock>:
 8008900:	4801      	ldr	r0, [pc, #4]	@ (8008908 <__malloc_unlock+0x8>)
 8008902:	f000 b846 	b.w	8008992 <__retarget_lock_release_recursive>
 8008906:	bf00      	nop
 8008908:	20001d18 	.word	0x20001d18

0800890c <memset>:
 800890c:	4402      	add	r2, r0
 800890e:	4603      	mov	r3, r0
 8008910:	4293      	cmp	r3, r2
 8008912:	d100      	bne.n	8008916 <memset+0xa>
 8008914:	4770      	bx	lr
 8008916:	f803 1b01 	strb.w	r1, [r3], #1
 800891a:	e7f9      	b.n	8008910 <memset+0x4>

0800891c <_sbrk_r>:
 800891c:	b538      	push	{r3, r4, r5, lr}
 800891e:	4d06      	ldr	r5, [pc, #24]	@ (8008938 <_sbrk_r+0x1c>)
 8008920:	2300      	movs	r3, #0
 8008922:	4604      	mov	r4, r0
 8008924:	4608      	mov	r0, r1
 8008926:	602b      	str	r3, [r5, #0]
 8008928:	f7f8 f85c 	bl	80009e4 <_sbrk>
 800892c:	1c43      	adds	r3, r0, #1
 800892e:	d102      	bne.n	8008936 <_sbrk_r+0x1a>
 8008930:	682b      	ldr	r3, [r5, #0]
 8008932:	b103      	cbz	r3, 8008936 <_sbrk_r+0x1a>
 8008934:	6023      	str	r3, [r4, #0]
 8008936:	bd38      	pop	{r3, r4, r5, pc}
 8008938:	20001d1c 	.word	0x20001d1c

0800893c <__errno>:
 800893c:	4b01      	ldr	r3, [pc, #4]	@ (8008944 <__errno+0x8>)
 800893e:	6818      	ldr	r0, [r3, #0]
 8008940:	4770      	bx	lr
 8008942:	bf00      	nop
 8008944:	2000010c 	.word	0x2000010c

08008948 <__libc_init_array>:
 8008948:	b570      	push	{r4, r5, r6, lr}
 800894a:	4d0d      	ldr	r5, [pc, #52]	@ (8008980 <__libc_init_array+0x38>)
 800894c:	4c0d      	ldr	r4, [pc, #52]	@ (8008984 <__libc_init_array+0x3c>)
 800894e:	1b64      	subs	r4, r4, r5
 8008950:	10a4      	asrs	r4, r4, #2
 8008952:	2600      	movs	r6, #0
 8008954:	42a6      	cmp	r6, r4
 8008956:	d109      	bne.n	800896c <__libc_init_array+0x24>
 8008958:	4d0b      	ldr	r5, [pc, #44]	@ (8008988 <__libc_init_array+0x40>)
 800895a:	4c0c      	ldr	r4, [pc, #48]	@ (800898c <__libc_init_array+0x44>)
 800895c:	f000 f864 	bl	8008a28 <_init>
 8008960:	1b64      	subs	r4, r4, r5
 8008962:	10a4      	asrs	r4, r4, #2
 8008964:	2600      	movs	r6, #0
 8008966:	42a6      	cmp	r6, r4
 8008968:	d105      	bne.n	8008976 <__libc_init_array+0x2e>
 800896a:	bd70      	pop	{r4, r5, r6, pc}
 800896c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008970:	4798      	blx	r3
 8008972:	3601      	adds	r6, #1
 8008974:	e7ee      	b.n	8008954 <__libc_init_array+0xc>
 8008976:	f855 3b04 	ldr.w	r3, [r5], #4
 800897a:	4798      	blx	r3
 800897c:	3601      	adds	r6, #1
 800897e:	e7f2      	b.n	8008966 <__libc_init_array+0x1e>
 8008980:	08008aa0 	.word	0x08008aa0
 8008984:	08008aa0 	.word	0x08008aa0
 8008988:	08008aa0 	.word	0x08008aa0
 800898c:	08008aa4 	.word	0x08008aa4

08008990 <__retarget_lock_acquire_recursive>:
 8008990:	4770      	bx	lr

08008992 <__retarget_lock_release_recursive>:
 8008992:	4770      	bx	lr

08008994 <_free_r>:
 8008994:	b538      	push	{r3, r4, r5, lr}
 8008996:	4605      	mov	r5, r0
 8008998:	2900      	cmp	r1, #0
 800899a:	d041      	beq.n	8008a20 <_free_r+0x8c>
 800899c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089a0:	1f0c      	subs	r4, r1, #4
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	bfb8      	it	lt
 80089a6:	18e4      	addlt	r4, r4, r3
 80089a8:	f7ff ffa4 	bl	80088f4 <__malloc_lock>
 80089ac:	4a1d      	ldr	r2, [pc, #116]	@ (8008a24 <_free_r+0x90>)
 80089ae:	6813      	ldr	r3, [r2, #0]
 80089b0:	b933      	cbnz	r3, 80089c0 <_free_r+0x2c>
 80089b2:	6063      	str	r3, [r4, #4]
 80089b4:	6014      	str	r4, [r2, #0]
 80089b6:	4628      	mov	r0, r5
 80089b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089bc:	f7ff bfa0 	b.w	8008900 <__malloc_unlock>
 80089c0:	42a3      	cmp	r3, r4
 80089c2:	d908      	bls.n	80089d6 <_free_r+0x42>
 80089c4:	6820      	ldr	r0, [r4, #0]
 80089c6:	1821      	adds	r1, r4, r0
 80089c8:	428b      	cmp	r3, r1
 80089ca:	bf01      	itttt	eq
 80089cc:	6819      	ldreq	r1, [r3, #0]
 80089ce:	685b      	ldreq	r3, [r3, #4]
 80089d0:	1809      	addeq	r1, r1, r0
 80089d2:	6021      	streq	r1, [r4, #0]
 80089d4:	e7ed      	b.n	80089b2 <_free_r+0x1e>
 80089d6:	461a      	mov	r2, r3
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	b10b      	cbz	r3, 80089e0 <_free_r+0x4c>
 80089dc:	42a3      	cmp	r3, r4
 80089de:	d9fa      	bls.n	80089d6 <_free_r+0x42>
 80089e0:	6811      	ldr	r1, [r2, #0]
 80089e2:	1850      	adds	r0, r2, r1
 80089e4:	42a0      	cmp	r0, r4
 80089e6:	d10b      	bne.n	8008a00 <_free_r+0x6c>
 80089e8:	6820      	ldr	r0, [r4, #0]
 80089ea:	4401      	add	r1, r0
 80089ec:	1850      	adds	r0, r2, r1
 80089ee:	4283      	cmp	r3, r0
 80089f0:	6011      	str	r1, [r2, #0]
 80089f2:	d1e0      	bne.n	80089b6 <_free_r+0x22>
 80089f4:	6818      	ldr	r0, [r3, #0]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	6053      	str	r3, [r2, #4]
 80089fa:	4408      	add	r0, r1
 80089fc:	6010      	str	r0, [r2, #0]
 80089fe:	e7da      	b.n	80089b6 <_free_r+0x22>
 8008a00:	d902      	bls.n	8008a08 <_free_r+0x74>
 8008a02:	230c      	movs	r3, #12
 8008a04:	602b      	str	r3, [r5, #0]
 8008a06:	e7d6      	b.n	80089b6 <_free_r+0x22>
 8008a08:	6820      	ldr	r0, [r4, #0]
 8008a0a:	1821      	adds	r1, r4, r0
 8008a0c:	428b      	cmp	r3, r1
 8008a0e:	bf04      	itt	eq
 8008a10:	6819      	ldreq	r1, [r3, #0]
 8008a12:	685b      	ldreq	r3, [r3, #4]
 8008a14:	6063      	str	r3, [r4, #4]
 8008a16:	bf04      	itt	eq
 8008a18:	1809      	addeq	r1, r1, r0
 8008a1a:	6021      	streq	r1, [r4, #0]
 8008a1c:	6054      	str	r4, [r2, #4]
 8008a1e:	e7ca      	b.n	80089b6 <_free_r+0x22>
 8008a20:	bd38      	pop	{r3, r4, r5, pc}
 8008a22:	bf00      	nop
 8008a24:	20001bdc 	.word	0x20001bdc

08008a28 <_init>:
 8008a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a2a:	bf00      	nop
 8008a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a2e:	bc08      	pop	{r3}
 8008a30:	469e      	mov	lr, r3
 8008a32:	4770      	bx	lr

08008a34 <_fini>:
 8008a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a36:	bf00      	nop
 8008a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a3a:	bc08      	pop	{r3}
 8008a3c:	469e      	mov	lr, r3
 8008a3e:	4770      	bx	lr
